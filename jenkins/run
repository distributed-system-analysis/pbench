#!/bin/bash

# Run commands within the pbench-devel container image.
#
# Generally you want to run a shell, and `source jenkins/python-setup.py` to
# initialize a Pbench testing environment.
#
# Several customizing inputs can be given via environment variables:
#
# CONTAINER_HOME []
# CONTAINER_HOME_OPTION [z] (used only if CONTAINER_HOME is given)
# EXTRA_PODMAN_SWITCHES []
# IMAGE_REPO [quay.io/pbench]
#
# For example, run with HOME mapped to /tmp/jenkins in the host system, and run
# an interactive bash shell:
#
#     EXTRA_PODMAN_SWITCHES=-it CONTAINER_HOME=/tmp/jenkins jenkins/run bash
#
if [[ "$(realpath -e $(pwd)/jenkins)" != "$(realpath -e $(dirname ${0}))" ]]; then
    printf -- "ERROR - Jenkins running from an unexpected directory, %s\n" "$(pwd)" >&2
    exit 1
fi

if [[ -z "${1}" ]]; then
    printf -- "ERROR - missing required arguments for what to run\n" >&2
    exit 1
fi

_branch_name="$(cat jenkins/branch.name)"

if [[ -z "${IMAGE_REPO}" ]]; then
    IMAGE_REPO="quay.io/pbench"
fi

IHOME=/container/home

if [[ -z "${CONTAINER_HOME}" ]]; then
    HOME_VOLUME=${IHOME}
else
    HOME_VOLUME="${CONTAINER_HOME}:${IHOME}:${CONTAINER_HOME_OPTION:="z"}"
fi

# The PBR in our setup.py Pbench installer relies on `git` knowledge and can't
# handle a git worktree. This handy sequence solves the problem by importing
# the base git tree into the container along with the worktree.
GIT_BASE_VOLUME=""
git_dir="$(git rev-parse --absolute-git-dir)"
if [ "${git_dir}" != "$(pwd)/.git" ]; then
    git_common_dir="$(git rev-parse --git-common-dir)"
    GIT_BASE_VOLUME="--volume ${git_common_dir}:${git_common_dir}:z"
fi

podman run \
    --pull=always \
    --userns=keep-id \
    --volume $(pwd):/src/pbench:z \
    --volume ${HOME_VOLUME} \
    ${GIT_BASE_VOLUME} \
    -w /src/pbench \
    --env-host \
    --env HOME=${IHOME} \
    --ulimit nofile=65536:65536 \
    --rm \
    ${EXTRA_PODMAN_SWITCHES} \
    ${IMAGE_REPO}/pbench-devel:${_branch_name} /bin/bash -c "${*}"
