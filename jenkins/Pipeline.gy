pipeline {
    agent { label 'pbench' }
    environment {
        // Environment variables for various `jenkins/run` invocations.
        EXTRA_PODMAN_SWITCHES="--pull=always -e=COV_REPORT_XML=yes"
        IMAGE_KIND="fedora"
        IMAGE_REPO="quay.io/pbench"
        IMAGE_ROLE="ci"
        NO_COLORS=0
        PY_COLORS=0
        TERM='dumb'

        // Configuration for remote container registries
        PB_CI_REGISTRY=credentials('c3e2d737-0e56-4c1e-a945-d86bc644384c')
        PB_CI_REG_CRED=credentials('12b404ca-3036-4960-9929-979148b9e49a')
        PB_ORG_NAME="pbench"
        // If we are executing for a PR, as opposed to executing for a branch
        // like `main`, the CHANGE_ID will be defined to the PR number.  If it
        // is defined we'll use its value for the container image tag;
        // otherwise we set it to the branch name (e.g., `main`).
        PB_IMAGE_TAG="${env.CHANGE_ID ?: env.BRANCH_NAME}"
        PB_SERVER_IMAGE_NAME="pbench-server-ci"
    }
    stages {
        stage('Agent Python3.6 Check') {
            steps {
                echo 'Verify agent side works with Python 3.6'
                sh 'jenkins/run tox -e agent-py36 -- agent'
            }
        }
        stage('Linting, Unit Tests, RPM builds') {
            steps {
                // If we don't have a sequence number file left over from a
                // previous run, then create one.
                sh 'if [[ ! -e agent/rpm/seqno ]] ; then echo "1" > agent/rpm/seqno ; fi'
                sh 'if [[ ! -e server/rpm/seqno ]] ; then echo "1" > server/rpm/seqno ; fi'

                // Run the "build" (lint, unit tests, etc.) in a container.
                sh 'jenkins/run ./build.sh'
            }
        }
        stage('Build the Pbench Server Container') {
            environment {
                KEYCLOAK_CLIENT_SECRET=credentials('5cf0304d-8a00-48a4-ade5-9f59cb37ba68')
                PB_SERVER_IMAGE_TAG="${PB_IMAGE_TAG}"
                RPM_PATH="${WORKSPACE_TMP}/rpmbuild/RPMS/noarch/pbench-server-*.rpm"
            }
            steps {
                sh 'buildah login -u="${PB_CI_REG_CRED_USR}" -p="${PB_CI_REG_CRED_PSW}" ${PB_CI_REGISTRY}'
                sh 'bash -ex ./server/pbenchinacan/container-build-ci.sh'
                sh 'buildah push localhost/pbench-server:${PB_IMAGE_TAG} ${PB_CI_REGISTRY}/${PB_ORG_NAME}/pbench-server:${PB_IMAGE_TAG}'
                sh 'buildah push localhost/${PB_SERVER_IMAGE_NAME}:${PB_IMAGE_TAG} ${PB_CI_REGISTRY}/${PB_ORG_NAME}/${PB_SERVER_IMAGE_NAME}:${PB_IMAGE_TAG}'
            }
        }
        stage('Build the Pbench Agent Containers') {
            environment {
                PB_AGENT_DISTRO="fedora-36"
            }
            steps {
                sh 'buildah login -u="${PB_CI_REG_CRED_USR}" -p="${PB_CI_REG_CRED_PSW}" ${PB_CI_REGISTRY}'
                sh '/usr/bin/python3 -m pip install --user jinja2-cli'
                sh 'make -C agent/containers/images CI_RPM_ROOT=${WORKSPACE_TMP} clean ${PB_AGENT_DISTRO}-everything'
                sh 'make -C agent/containers/images IMAGE_REPO=${PB_CI_REGISTRY}/${PB_ORG_NAME} IMAGE_TAG=${PB_IMAGE_TAG} ${PB_AGENT_DISTRO}-push-ci'
            }
        }
        stage('Deploy server and run functional tests') {
            environment {
                PB_CONTAINER_REG="${PB_CI_REGISTRY}"
                PB_DASHBOARD_DIR="${WORKSPACE}/dashboard/build/"
                PB_SERVER_IMAGE_TAG="${PB_IMAGE_TAG}"
            }
            steps {
                sh 'jenkins/run-server-func-tests --cleanup'
            }
        }
    }
    post {
        success {
            // Note that jenkins/run-pytests is executed inside the container
            // while the Cobertura plug-in is executed natively, so this poses
            // a challenge in terms of finding the coverage report file; we
            // finesse this by assuming that it will be in the current
            // directory in both environments.
            step([$class: 'CoberturaPublisher',
                autoUpdateHealth: false,
                autoUpdateStability: false,
                coberturaReportFile: "cov/report.xml",
                failNoReports: false,
                failUnhealthy: false,
                failUnstable: false,
                maxNumberOfBuilds: 10,
                onlyStable: false,
                sourceEncoding: 'ASCII',
                zoomCoverageChart: false])
            sh 'rm -f cov/report.xml'
        }
    }
}
