pipeline {
    agent { label 'pbench' }
    environment {
        EXTRA_PODMAN_SWITCHES="--pull=always -e=COV_REPORT_XML=yes"
        IMAGE_KIND="fedora"
        IMAGE_REPO="quay.io/pbench"
        IMAGE_ROLE="ci"
        NO_COLORS=0
        PB_AGENT_CONTAINER_REG="quay.io"
        PB_SERVER_CONTAINER_REG="images.paas.redhat.com"
        PODMAN_AGENT=credentials('87ad2797-02eb-464f-989f-8ab78d63cdf3')
        PODMAN_SERVER=credentials('12b404ca-3036-4960-9929-979148b9e49a')
        PY_COLORS=0
        TERM='dumb'
    }
    stages {
        stage('Agent Python3.6 Check') {
            steps {
                echo 'Verify agent side works with Python 3.6'
                sh 'jenkins/run tox -e py36 -- agent'
            }
        }
        stage('Linting, Unit Tests, RPM builds') {
            steps {
                // If we don't have a sequence number file left over from a
                // previous run, then create one.
                sh 'if [[ ! -e agent/rpm/seqno ]] ; then echo "1" > agent/rpm/seqno ; fi'
                sh 'if [[ ! -e server/rpm/seqno ]] ; then echo "1" > server/rpm/seqno ; fi'

                // If there is somehow a symlink left over from a previous run's
                // Cobertura processing, remove it, because it seems to confuse
                // the coverage data collection.
                sh 'rm -fv pbench'

                // Run the "build" (lint, unit tests, etc.) in a container.
                sh 'jenkins/run ./build.sh'
            }
        }
        stage('Pbench Server Container build') {
            steps {
                sh 'buildah login -u="${PODMAN_SERVER_USR}" -p="${PODMAN_SERVER_PSW}" ${PB_SERVER_CONTAINER_REG}'
                sh 'RPM_PATH=${WORKSPACE_TMP}/rpmbuild/RPMS/noarch/pbench-server-*.rpm OUTPUT_IMAGE_TAG=${CHANGE_ID:-${BRANCH_NAME}} bash -ex ./server/pbenchinacan/container-build.sh'
                sh 'buildah push localhost/pbench-server:${CHANGE_ID:-${BRANCH_NAME}} ${PB_SERVER_CONTAINER_REG}/pbench/pbenchinacan-pbenchserver:${CHANGE_ID:-${BRANCH_NAME}}'
            }
        }
    }
    post {
        success {
            // This symlink somehow allows the Cobertura plug-in to find the
            // sources referenced in the coverage report.  However, the presence
            // of this link inside the container seems to confuse the coverage
            // data collection, so we create it here and then remove it after
            // generating the report. (We use the -f option just in case there's
            // an old one hanging around.)
            sh 'ln -sTf lib/pbench pbench'

            // Note that jenkins/run-pytests is executed inside the container
            // while the Cobertura plug-in is executed natively, so this poses
            // a challenge in terms of finding the coverage report file; we
            // finesse this by assuming that it will be in the current
            // directory in both environments.
            step([$class: 'CoberturaPublisher',
                autoUpdateHealth: false,
                autoUpdateStability: false,
                coberturaReportFile: "cov/report.xml",
                failNoReports: false,
                failUnhealthy: false,
                failUnstable: false,
                maxNumberOfBuilds: 10,
                onlyStable: false,
                sourceEncoding: 'ASCII',
                zoomCoverageChart: false])
            sh 'rm cov/report.xml pbench'
        }
    }
}
