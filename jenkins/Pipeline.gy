pipeline {
    agent { label 'pbench' }
    environment {
        // Environment variables for various `jenkins/run` invocations.
        EXTRA_PODMAN_SWITCHES="--pull=always -e=COV_REPORT_XML=yes"
        IMAGE_KIND="fedora"
        IMAGE_REPO="quay.io/pbench"
        IMAGE_ROLE="ci"
        NO_COLORS=0
        PY_COLORS=0
        TERM='dumb'

        // The remaining variables are for `jenkins/run-server-func-tests`.

        PODMAN_INTERNAL=credentials('12b404ca-3036-4960-9929-979148b9e49a')
        KEYCLOAK_CLIENT_SECRET=credentials('5cf0304d-8a00-48a4-ade5-9f59cb37ba68')
        PB_CONTAINER_REG=credentials('c3e2d737-0e56-4c1e-a945-d86bc644384c')

        PB_ORG_NAME="pbench"

        PB_SERVER_IMAGE_NAME="pbench-server-ci"
        // Set the tag to the PR number (i.e., the Jenkins CHANGE_ID) if run for
        // a PR; otherwise set it to the branch name (e.g., `main`).  Set a
        // shorthand for the Pbench Server image path, and set a variable for
        // the Server Pod name, based on the image tag, so that we don't
        // interfere with other pods on this executor.
        PB_SERVER_IMAGE_TAG="""${sh(
            returnStdout: true,
            script: 'echo ${CHANGE_ID:-${BRANCH_NAME}}'
            )}""".trim()

        PB_DASHBOARD_DIR="${WORKSPACE}/dashboard/build/"
    }
    stages {
        stage('Agent Python3.6 Check') {
            steps {
                echo 'Verify agent side works with Python 3.6'
                sh 'jenkins/run tox -e agent-py36 -- agent'
            }
        }
        stage('Linting, Unit Tests, RPM builds') {
            steps {
                // If we don't have a sequence number file left over from a
                // previous run, then create one.
                sh 'if [[ ! -e agent/rpm/seqno ]] ; then echo "1" > agent/rpm/seqno ; fi'
                sh 'if [[ ! -e server/rpm/seqno ]] ; then echo "1" > server/rpm/seqno ; fi'

                // Run the "build" (lint, unit tests, etc.) in a container.
                sh 'jenkins/run ./build.sh'
            }
        }
        stage('Build the Pbench Server Container') {
            steps {
                sh 'buildah login -u="${PODMAN_INTERNAL_USR}" -p="${PODMAN_INTERNAL_PSW}" ${PB_CONTAINER_REG}'
                sh 'RPM_PATH=${WORKSPACE_TMP}/rpmbuild/RPMS/noarch/pbench-server-*.rpm bash -ex ./server/pbenchinacan/container-build-ci.sh'
                sh 'buildah push localhost/pbench-server:${PB_SERVER_IMAGE_TAG} ${PB_CONTAINER_REG}/${PB_ORG_NAME}/pbench-server:${PB_SERVER_IMAGE_TAG}'
                sh 'buildah push localhost/${PB_SERVER_IMAGE_NAME}:${PB_SERVER_IMAGE_TAG} ${PB_CONTAINER_REG}/${PB_ORG_NAME}/${PB_SERVER_IMAGE_NAME}:${PB_SERVER_IMAGE_TAG}'
            }
        }
        stage('Deploy server and run functional tests') {
            steps {
                sh 'jenkins/run-server-func-tests --cleanup'
            }
        }
    }
    post {
        success {
            // Note that jenkins/run-pytests is executed inside the container
            // while the Cobertura plug-in is executed natively, so this poses
            // a challenge in terms of finding the coverage report file; we
            // finesse this by assuming that it will be in the current
            // directory in both environments.
            step([$class: 'CoberturaPublisher',
                autoUpdateHealth: false,
                autoUpdateStability: false,
                coberturaReportFile: "cov/report.xml",
                failNoReports: false,
                failUnhealthy: false,
                failUnstable: false,
                maxNumberOfBuilds: 10,
                onlyStable: false,
                sourceEncoding: 'ASCII',
                zoomCoverageChart: false])
            sh 'rm -f cov/report.xml'
        }
    }
}
