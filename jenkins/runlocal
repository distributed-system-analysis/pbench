#!/bin/bash -e
#
# Build the Pbench Server RPM and container, and run functional tests locally.
#
# NOTE WELL: By default, when the functional tests are run, the infrastructure
# pod and Pbench Server container are left running by default.  Add the switch,
# `--cleanup` to direct `jenkins/run-server-func-tests` to cleanup when
# finished (success or failure).
#
# Also NOTE: This relies on the incremental build capabilities of Make -- if
# you wish to build from source you should first issue the following commands:
#
#     WORKSPACE_TMP=${WORKSPACE_TMP:-${HOME}} jenkins/run make -C server/rpm distclean
#     WORKSPACE_TMP=${WORKSPACE_TMP:-${HOME}} jenkins/run make -C dashboard clean
#

export PB_SERVER_IMAGE_NAME=pbench-server

# We use the current user name as the tag to avoid any conflict with what the CI
# environment does.
export PB_CONTAINER_REG=images.paas.redhat.com/pbench
export PB_SERVER_IMAGE_TAG=${USER}

# We use the image pull policy of `never` here to ensure our locally built image
# is used by the pod.
export PB_SERVER_IMAGE_PULL_POLICY=never

# Create an RPM from the current source tree and double check it exists.
# Set the workspace to the home directory so that the RPM built inside the
# container will be available after it exits.
export WORKSPACE_TMP=${WORKSPACE_TMP:-${HOME}}
jenkins/run make -C server/rpm ci
export RPM_PATH=${WORKSPACE_TMP}/rpmbuild/RPMS/noarch/'pbench-server-*.rpm'
# _Don't_ quote the expansion of ${RPM_PATH}:  we _want_ it to be globbed!
# shellcheck disable=SC2086
ls -ld ${RPM_PATH}

# Create a Pbench Dashboard deployment
jenkins/run make -C dashboard build

# Build the canned Pbench Server container from the RPM built above.
server/pbenchinacan/container-build.sh

# Run the functional tests using the locally built image.
jenkins/run-server-func-tests "${@}"
