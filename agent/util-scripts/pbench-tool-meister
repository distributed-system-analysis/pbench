#!/usr/bin/env python3
# -*- mode: python -*-

"""pbench-tool-meister

Handles the life-cycle executing a given tool on a host. The tool meister
performs the following operations:

  1. Ensures the given tool exists with the supported version
  2. Fetches the parameters configured for the tool
  3. Waits for the message to start the tool
     a. Messages contain three pieces of information:
        the next operational state to move to, the tool group being for which
        the operation will be applied, and the directory in which the tool-
        data-sink will collect and store all the tool data during send
        operations
  4. Waits for the message to stop the tool
  5. Waits for the message to send the tool data remotely
  6. Repeats steps 3 - 5 until a "terminate" message is received

If a SIGTERM or SIGQUIT signal is sent to the tool meister, any existing
running tool is shutdown, all local data is removed, and the tool meister
exits.

A redis [1] instance is used as the communication mechanism between the
various tool meisters on nodes and the benchmark driver. The redis instance is
used both to communicate the initial data set describing the tools to use, and
their parameteres, for each tool meister, as well as a pub/sub for
coordinating starts and stops of all the tools.

The tool meister is given two arguments when started: the redis server to use,
and the redis key to fetch its configuration from for its operation.

[1] https://redis.io/

$ sudo dnf install python3-redis
$ sudo pip3 install python-daemon
$ sudo pip3 install python-pidfile
"""

import sys
import os
import time
import json
import logging
import tempfile
import subprocess
import daemon
import pidfile
import redis
import shutil

from pathlib import Path


class Tool(object):
    """Encapsulates all the state needed to manage a tool running as a background
    process.

    The ToolMeister class uses one Tool object per running tool.

    FIXME: this class effecitvely re-implements the former
    "tool-scripts/base-tool" bash script.
    """

    def __init__(self, name, group, tool_opts, pbench_bin, tool_dir, logger):
        self.logger = logger
        self.name = name
        self.group = group
        self.tool_opts = tool_opts
        self.pbench_bin = pbench_bin
        self.tool_dir = tool_dir
        self.screen_name = f"pbench-tool-{group}-{name}"
        self.start_process = None
        self.stop_process = None
        self.post_process = None

    def start(self):
        """Creates the background `screen` process running the tool's "start"
        operation.
        """
        if (
            self.start_process is not None
            or self.stop_process is not None
            or self.post_process is not None
        ):
            self.logger.error(
                "Tool(%s) has unexpected process already running", self.name
            )
            return
        # screen -dm -L -S \"${screen_name}\" ${pbench_bin}/tool-scripts/${name} --${action} --dir=${tool_output_dir} ${tool_opts[@]}
        args = [
            "/usr/bin/screen",
            "-dmS",
            self.screen_name,
            f"{self.pbench_bin}/tool-scripts/{self.name}",
            "--start",
            f"--dir={self.tool_dir}",
            self.tool_opts,
        ]
        self.logger.info("%s: start_tool -- %s", self.name, " ".join(args))
        self.start_process = subprocess.Popen(args)

    def stop(self):
        """Creates the background `screen` process to running the tool's "stop"
        operation.
        """
        if self.start_process is None:
            self.logger.error("Tool(%s)'s start process not already running", self.name)
            return
        if self.stop_process is not None:
            self.logger.error(
                "Tool(%s) has unexpected stop process already running", self.name
            )
            return
        if self.post_process is not None:
            self.logger.error(
                "Tool(%s) has unexpected post-process process already" " running",
                self.name,
            )
            return

        # FIXME - before we "stop" a tool, check to see if a
        # "{tool}/{tool}.pid" file exists.  If it doesn't wait for a second to
        # show up, if after a second it does not show up, then give up waiting
        # and just call the stop method.
        tool_pid_file = self.tool_dir / self.name / f"{self.name}.pid"
        cnt = 0
        while not tool_pid_file.exists() and cnt < 100:
            time.sleep(0.1)
            cnt += 1
        if not tool_pid_file.exists():
            self.logger.warning(
                "Toll(%s) pid file, %s, does not exist after waiting 10 seconds",
                self.name,
                tool_pid_file,
            )

        # $pbench_bin/tool-scripts/$name --$action --dir=${tool_output_dir} "${tool_opts[@]}"
        args = [
            f"{self.pbench_bin}/tool-scripts/{self.name}",
            "--stop",
            f"--dir={self.tool_dir}",
            self.tool_opts,
        ]
        self.logger.info("%s: stop_tool -- %s", self.name, " ".join(args))
        self.stop_process = subprocess.Popen(args)

    def wait(self):
        """Wait for any tool processes to terminate after a "stop" process has
        completed.

        Waits for the tool's "stop" process to complete, if started, then
        waits for the tool's start process to complete. Finally, if there is a
        post-processing process running, wait for that to complete before
        returning.
        """
        if self.stop_process is not None:
            if self.start_process is None:
                self.logger.error(
                    "Tool(%s) does not have a start process running", self.name
                )
                return
            if self.post_process is not None:
                self.logger.error(
                    "Tool(%s) has unexpected post-process process running", self.name
                )
                return
            self.logger.info("waiting for stop %s", self.name)
            # We wait for the stop process to finish first ...
            self.stop_process.wait()
            self.stop_process = None
            # ... then we wait for the start process to finish
            self.start_process.wait()
            self.stop_process = None
        elif self.post_process is not None:
            if self.start_process is not None:
                self.logger.error(
                    "Tool(%s) has unexpected start process running", self.name
                )
                return
            if self.stop_process is not None:
                self.logger.error(
                    "Tool(%s) has unexpected stop process running", self.name
                )
                return
            self.logger.info("waiting for post-process %s", self.name)
            self.post_process.wait()
            self.post_process = None
        else:
            self.logger.error(
                "wait (%s) not called after 'stop' or 'post-process'", self.name
            )

    def postprocess(self):
        """Run the tool's "post-process" action.
        """
        if (
            self.start_process is not None
            or self.stop_process is not None
            or self.post_process is not None
        ):
            self.logger.error(
                "Tool(%s) has unexpected process already running", self.name
            )
            return
        # $pbench_bin/tool-scripts/$name --postprocess --dir=$dir "${tool_opts[@]}"
        args = [
            f"{self.pbench_bin}/tool-scripts/{self.name}",
            "--postprocess",
            f"--dir={self.tool_dir}",
            self.tool_opts,
        ]
        self.logger.info("%s: post-process_tool -- %s", self.name, " ".join(args))
        self.post_process = subprocess.Popen(args)


class Terminate(Exception):
    """Simple exception to be raised when the tool meister main loop should exit
    gracefully.
    """

    pass


class ToolMeisterError(Exception):
    """Simple exception for any errors from the ToolMeister class.
    """

    pass


class ToolMeister(object):
    """Encapsulate tool life-cycle

    The goal of this class is to make sure all necessary state and behaviors
    for managing a given tool are handled by the methods offered by the
    class.

    The start_, stop_, send_, and wait_ prefixed methods represent all the
    necessary interfaces for managing the life-cycle of a tool.  The cleanup()
    method is provided to abstract away any necessary clean up required by a
    tool so that the main() driver does not need to know any details about a
    tool.

    The format of the JSON data for the parameters is as follows:

        {
            "benchmark_run_dir":  "<Top-level directory of the current"
                          " benchmark run>",
            "channel":    "<Redis server channel name to subscribe to for"
                          " start/stop/send messages from controller>",
            "controller": "<hostname of the controller driving all the tool"
                          " miesters; if this tool meister is running locally"
                          " with the controller, then it does not need to send"
                          " data to the tool data sink since it can access the"
                          " ${benchmark_run_dir} and ${benchmark_results_dir}"
                          " directories directly.>",
            "group":      "<Name of the tool group from which the following"
                          " tools data was pulled, passed as the"
                          " --group argument to the individual tools>",
            "hostname":   "<hostname of tool meister, should be same as"
                          " 'hostname -f' where tool meister is running>",
            "tools": {
                "tool-0": [ "--opt-0", "--opt-1", ..., "--opt-N" ],
                "tool-1": [ "--opt-0", "--opt-1", ..., "--opt-N" ],
                ...,
                "tool-N": [ "--opt-0", "--opt-1", ..., "--opt-N" ]
            }
        }

    Each action message should contain three pieces of data: the state to
    move to, either start, stop, or send, the tool group to apply that action to,
    and the directory in which to store the data. In JSON form it will look
    like:

        {
            "state":     "<'start'|'stop'|'send'>",
            "group":     "<tool group name>",
            "directory": "<directory in which to store tool data>"
        }

    If the Tool Meister is running on the same host as the pbench agent
    controller, then the Tool Meister will write is data directly to the
    ${benchmark_results_dir} using the controller's host name; if the Tool
    Meister is running remotely, then it will use a temporary directory under
    ${benchmark_run_dir}, and will send the data to the Tool Data Sink during
    the "send" phase.
    """

    @staticmethod
    def fetch_params(params):
        """Static help method that allows the method constructing a ToolMeister
        instance to verify the parameters before we actually construct the
        object.

        The definition of the contents of a parameter block is really
        independent of a ToolMeister implementation, but we keep this method
        in the ToolMeister class since it is closely related to the
        implementation.
        """
        try:
            benchmark_run_dir = params["benchmark_run_dir"]
            channel = params["channel"]
            controller = params["controller"]
            group = params["group"]
            hostname = params["hostname"]
            tools = params["tools"]
        except KeyError as exc:
            raise ToolMeisterError(f"Invalid parameter block, missing key {exc}")
        else:
            return benchmark_run_dir, channel, controller, group, hostname, tools

    def __init__(self, pbench_bin, params, redis_server, logger):
        self.logger = logger
        self.pbench_bin = pbench_bin
        ret_val = self.fetch_params(params)
        (
            self._benchmark_run_dir,
            self._channel,
            self._controller,
            self._group,
            self._hostname,
            self._tools,
        ) = ret_val
        self._running_tools = dict()
        self._rs = redis_server
        self._pubsub = self._rs.pubsub()
        self._pubsub.subscribe(self._channel)
        self._chan = self._pubsub.listen()
        # Name of the temporary tool data directory to use when invoking
        # tools.  This is a local temporary directory when the Tool Meister is
        # remote from the pbench controller.
        if self._controller != self._hostname:
            self._tmp_dir = tempfile.mkdtemp(
                dir=self._benchmark_run_dir, prefix=f"tm.{self._group}.{os.getpid()}."
            )
        else:
            self._tmp_dir = None
        # Now that we have subscribed the channel as specified in the params
        # object, we need to pull off the first message, which is an
        # acknowledgement that we have properly subscribed.
        resp = next(self._chan)
        assert resp["type"] == "subscribe", "Unexpected 'type': {!r}".format(resp)
        assert resp["pattern"] is None, "Unexpected 'pattern': {!r}".format(resp)
        assert (
            resp["channel"].decode("utf-8") == self._channel
        ), "Unexpected" " 'channel': {!r}".format(resp)
        assert resp["data"] == 1, "Unexpected 'data': {!r}".format(resp)
        # First state we are expecting
        self.state = "start"
        self._state_trans = {
            "start": {"next": "stop", "action": self.start_tools},
            "stop": {"next": "send", "action": self.stop_tools},
            "send": {"next": "start", "action": self.send_tools},
        }
        self._valid_states = frozenset(["start", "stop", "send", "terminate"])
        for key in self._state_trans.keys():
            assert (
                key in self._valid_states
            ), f"INTERNAL ERROR: invalid state transition entry, '{key}'"
            assert self._state_trans[key]["next"] in self._valid_states, (
                "INTERANL ERROR: invalie state transition next entry for"
                f" '{key}', '{self._state_trans[key]['next']}'"
            )
        self._message_keys = frozenset(["directory", "group", "state"])
        # Tell the entity that started us who we are, indicating we're ready.
        started_msg = dict(kind="tm", hostname=self._hostname, pid=os.getpid())
        self._rs.publish("{}-start".format(self._channel), json.dumps(started_msg))
        # The current 'directory' into which the tools are collected; not set
        # until a 'start tools' is executed, cleared when a 'send tools'
        # completes.
        self._directory = None

    def cleanup(self):
        """cleanup - close down the Redis pubsub object.
        """
        self.logger.debug("%s: cleanup", self._hostname)
        self._pubsub.unsubscribe()
        self._pubsub.close()
        if self._tmp_dir:
            shutil.rmtree(self._tmp_dir)
            self._tmp_dir = None

    def _get_data(self):
        """_get_data - fetch and decode the JSON object off the "wire".

        The keys in the JSON object are validated against the expected keys,
        and the value of the 'state' key is validated against the valid
        states.
        """
        payload = next(self._chan)
        data = None
        while not data:
            json_str = payload["data"].decode("utf-8")
            try:
                data = json.loads(json_str)
            except Exception:
                self.logger.warning("data payload in message not JSON, '%s'", json_str)
                data = None
                payload = next(self._chan)
            else:
                keys = frozenset(data.keys())
                if keys != self._message_keys:
                    self.logger.warning(
                        "unrecognized keys in data of payload in message," " '%s'",
                        json_str,
                    )
                    data = None
                    payload = next(self._chan)
                elif data["state"] not in self._valid_states:
                    self.logger.warning(
                        "unrecognized state in data of payload in message," " '%s'",
                        json_str,
                    )
                    data = {}
                    payload = next(self._chan)
                elif data["group"] is not None and data["group"] != self._group:
                    self.logger.warning(
                        "unrecognized group in data of payload in message," " '%s'",
                        json_str,
                    )
                    data = {}
                    payload = next(self._chan)
        return data

    def wait_for_command(self):
        """wait_for_command - wait for the expected data message for the
        expected state

        Reads messages pulled from the wire, ignoring messages for unexpected
        states, returning an (action, data) tuple when an expected state
        transition is encountered, and setting the next expected state
        properly.
        """
        self.logger.debug("%s: wait_for_command %s", self._hostname, self.state)
        data = self._get_data()
        while data["state"] != self.state:
            if data["state"] == "terminate":
                raise Terminate()
            self.logger.info(
                "ignoring unexpected data, %r, expecting state %s", data, self.state
            )
            data = self._get_data()
        state_rec = self._state_trans[self.state]
        action = state_rec["action"]
        self.state = state_rec["next"]
        self.logger.debug("%s: msg - %r", self._hostname, data)
        return action, data

    def start_tools(self, data):
        """start_tools - start all registered tools executing in the background

        The 'state' and 'group' values of the payload have already been
        validated before this "start tools" action is invoked.

        If this Tool Miester instance is running on the same host as the
        controller, we'll use the given "directory" argument directly for
        where tools will store their collected data.  When this Tool Meister
        instance is remote, we'll use a temporary directory off of the
        ${benchmark_run_dir} (self._benchmark_run_dir).
        """
        if self._running_tools or self._directory is not None:
            self.logger.error(
                "INTERNAL ERROR - encountered previously running tools, '%r'",
                self._running_tools,
            )
            return False

        # script_path=`dirname $0`
        # script_name=`basename $0`
        # pbench_bin="`cd ${script_path}/..; /bin/pwd`"
        # action=`echo ${script_name#pbench-} | awk -F- '{print $1}'`
        # dir=${1}; shift (-d|--dir)
        if self._tmp_dir:
            _dir = Path(self._tmp_dir)
        else:
            try:
                _dir = Path(data["directory"]).resolve()
            except Exception:
                self.logger.exception(
                    "Failed to access provided result directory, %s", data["directory"]
                )
                return False
        _dir = _dir / self._hostname
        try:
            _dir.mkdir()
        except Exception:
            self.logger.exception("Failed to create local result directory, %s", _dir)
            return False
        self._directory = data["directory"]

        # tool_group_dir="$pbench_run/tools-$group"
        # for this_tool_file in `/bin/ls $tool_group_dir`; do
        # 	tool_opts=()
        # 	while read line; do
        # 		tool_opts[$i]="$line"
        # 		((i++))
        # 	done < "$tool_group_dir/$this_tool_file"
        # name="$this_tool_file"
        failures = 0
        for name, tool_opts in self._tools.items():
            try:
                tool = Tool(
                    name, self._group, tool_opts, self.pbench_bin, _dir, self.logger
                )
                tool.start()
            except Exception:
                self.logger.exception(
                    "Failed to start tool %s running in background", name
                )
                failures += 1
                continue
            else:
                self._running_tools[name] = tool
        return failures

    def _wait_for_tools(self):
        failures = 0
        for name in self._tools.keys():
            try:
                tool = self._running_tools[name]
            except KeyError:
                self.logger.error(
                    "INTERNAL ERROR - tool %s not found in list of running" " tools",
                    name,
                )
                failures += 1
                continue
            try:
                tool.wait()
            except Exception:
                self.logger.exception(
                    "Failed to wait for tool %s to stop running in" " background", name
                )
                failures += 1
        return failures

    def stop_tools(self, data):
        """stop_tools - stop any running tools.

        The 'state' and 'group' values of the payload have already been
        validated before this "stop tools" action is invoked.

        This method only proceeds if the 'directory' entry value of the
        payload matches what was previously provided to a "start tools"
        action.
        """
        if self._directory != data["directory"]:
            self.logger.error(
                "INTERNAL ERROR - stop tools action encountered for a"
                " directory, '%s', that is different from the previous"
                " start tools, '%s'",
                data["directory"],
                self._directory,
            )
            return False

        failures = 0
        for name in self._tools.keys():
            try:
                tool = self._running_tools[name]
            except KeyError:
                self.logger.error(
                    "INTERNAL ERROR - tool %s not found in list of running" " tools",
                    name,
                )
                failures += 1
                continue
            try:
                tool.stop()
            except Exception:
                self.logger.exception(
                    "Failed to stop tool %s running in background", name
                )
                failures += 1
        failures += self._wait_for_tools()
        return failures

    def send_tools(self, data):
        """send_tools - post-process and send any collected tool data to the
        tool data sink.

        The 'state' and 'group' values of the payload have already been
        validated before this "send tools" action is invoked.

        This method only proceeds if the 'directory' entry value of the
        payload matches what was previously provided to a "start tools"
        action.
        """
        if self._directory != data["directory"]:
            self.logger.error(
                "INTERNAL ERROR - send tools action encountered for a"
                " directory, '%s', that is different from the previous"
                " start tools, '%s'",
                data["directory"],
                self._directory,
            )
            return False

        failures = 0
        for name in self._tools.keys():
            try:
                tool = self._running_tools[name]
            except KeyError:
                self.logger.error(
                    "INTERNAL ERROR - tool %s not found in list of running" " tools",
                    name,
                )
                failures += 1
                continue
            try:
                tool.postprocess()
            except Exception:
                self.logger.exception("Failed to post-process tool %s data", name)
                failures += 1
        failures += self._wait_for_tools()
        for name in self._tools.keys():
            try:
                del self._running_tools[name]
            except KeyError:
                self.logger.error(
                    "INTERNAL ERROR - tool %s not found in list of running" " tools",
                    name,
                )
                failures += 1
                continue
        # FIXME: implement tool data directory send to the data sink.
        self.logger.info(
            "%s: send_tool %s %s", self._hostname, self._group, self._directory
        )
        self._directory = None
        return failures


def main(argv):
    """Main program for the tool meister.

    This function is the simple driver for the tool meister behaviors,
    handling setup of signals, Redis() client construction, loading and
    validating parameters.
    """
    PROG = os.path.basename(argv[0])
    pbench_bin = os.path.dirname(os.path.dirname(argv[0]))

    logger = logging.getLogger(PROG)
    fh = logging.FileHandler("{}.log".format(PROG))
    if os.environ.get("_PBENCH_UNIT_TESTS"):
        fmtstr = "%(levelname)s %(name)s %(funcName)s -- %(message)s"
    else:
        fmtstr = (
            "%(asctime)s %(levelname)s %(process)s %(thread)s"
            " %(name)s %(funcName)s %(lineno)d -- %(message)s"
        )
    fhf = logging.Formatter(fmtstr)
    fh.setFormatter(fhf)
    fh.setLevel(logging.INFO)
    logger.addHandler(fh)
    logger.setLevel(logging.INFO)

    try:
        redis_host = argv[1]
        redis_port = argv[2]
        param_key = argv[3]
    except IndexError as e:
        logger.error("Invalid arguments: %s", e)
        return 1

    try:
        redis_server = redis.Redis(host=redis_host, port=redis_port, db=0)
    except Exception as e:
        logger.error(
            "Unable to connect to redis server, %s:%s: %s", redis_host, redis_port, e
        )
        return 2

    try:
        params_raw = redis_server.get(param_key)
        if params_raw is None:
            logger.error('Parameter key, "%s" does not exist.', param_key)
            return 3
        logger.info("params_key (%s): %r", param_key, params_raw)
        params_str = params_raw.decode("utf-8")
        params = json.loads(params_str)
        # Validate the tool meister parameters without constructing an object
        # just yet, as we want to make sure we can talk to the redis server
        # before we go through the trouble of daemonizing below.
        ToolMeister.fetch_params(params)
    except Exception as exc:
        logger.error(
            "Unable to fetch and decode parameter key, '%s': %s", param_key, exc
        )
        return 4

    pidfile_name = "{}.pid".format(PROG)
    pfctx = pidfile.PIDFile(pidfile_name)
    with daemon.DaemonContext(
        stdout=sys.stdout,
        stderr=sys.stderr,
        working_directory=os.getcwd(),
        umask=0o022,
        pidfile=pfctx,
        files_preserve=[sys.stdout, sys.stderr, fh.stream.fileno()],
    ):
        try:
            # Previously we validated the tool meister parameters, and in
            # doing so made sure we had proper access to the redis server.
            #
            # We can safely create the ToolMeister object now that we are
            # "daemonized".
            try:
                # NOTE: we have to recreate the connection to the redis
                # service since all open file descriptors were closed as part
                # of the daemonizing process.
                redis_server = redis.Redis(host=redis_host, port=redis_port, db=0)
            except Exception as e:
                logger.error(
                    "Unable to connect to redis server, %s:%s: %s",
                    redis_host,
                    redis_port,
                    e,
                )
                return 2
            try:
                tm = ToolMeister(pbench_bin, params, redis_server, logger)
            except Exception:
                logger.exception(
                    "Unable to re-construct the ToolMeister" ' object with parms, "%r"',
                    params,
                )
                return 4

            terminate = False
            try:
                while not terminate:
                    try:
                        logger.debug("waiting ...")
                        action, data = tm.wait_for_command()
                        logger.debug("acting ... %r, %r", action, data)
                        failures = action(data)
                        if failures > 0:
                            logger.warning(
                                "%d failures encountered for action, '%r',"
                                " on data, '%r'",
                                failures,
                                action,
                                data,
                            )
                    except Terminate:
                        logger.info("terminating")
                        terminate = True
            except Exception:
                logger.exception("Unexpected error encountered")
            finally:
                tm.cleanup()
        finally:
            logger.info("Remove pid file ... (%s)", pidfile_name)
            try:
                os.unlink(pidfile_name)
            except Exception:
                logger.exception("Failed to remove pid file %s", pidfile_name)

    return 0


if __name__ == "__main__":
    status = main(sys.argv)
    sys.exit(status)
