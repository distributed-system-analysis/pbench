#!/usr/bin/env python3
# -*- mode: python -*-

"""pbench-tool-meister-stop

Responsible for stopping all local/remote tool meisters, closing down the data
sink, and finally the redis server.
"""

import sys
import os
import json
import time
import errno
import logging
import redis
import signal

# port number is "One Tool" in hex 0x17001
# FIXME: move to common area
redis_port = 17001
# FIXME: this should be moved to a shared area
channel = "tool-meister-chan"


def is_running(pid):
    """Is the given PID running?

    See https://stackoverflow.com/questions/7653178/wait-until-a-certain-process-knowing-the-pid-end
    """
    try:
        os.kill(pid, 0)
    except OSError as err:
        if err.errno == errno.ESRCH:
            return False
    return True


def main(argv):
    """Main program for the tool meister stop.

    This simply sends the "terminate" message to the redis server so that all
    connected services, tool-meisters, tool-data-sink, etc. will shutdown.
    Once all services acknowledge the receipt of the "terminate" message, we
    declare victory.

    TBD:

    We currently have a mode to "double-check" that the services all stopped
    by ssh'ing into all the local/remote hosts and inspecting the system for
    any lingering processes.
    """
    PROG = os.path.basename(argv[0])
    logger = logging.getLogger(PROG)
    logger.setLevel(logging.INFO)
    sh = logging.StreamHandler()
    sh.setLevel(logging.INFO)
    shf = logging.Formatter("%(message)s")
    sh.setFormatter(shf)
    logger.addHandler(sh)

    try:
        full_hostname = os.environ["full_hostname"]
    except Exception:
        logger.exception("failed to fetch parameters from the environment")
        return 1

    try:
        redis_server = redis.Redis(host="localhost", port=redis_port, db=0)
    except Exception as e:
        logger.error(
            "Unable to connect to redis server, localhost:%d: %r", redis_port, e
        )
        return 2

    try:
        tm_pids_raw = redis_server.get("tm-pids")
        if tm_pids_raw is None:
            logger.error('Tool Meister PIDs key, "tm-pids", does not exist.')
            return 3
        tm_pids_str = tm_pids_raw.decode("utf-8")
        tm_pids = json.loads(tm_pids_str)
    except Exception as ex:
        logger.error('Unable to fetch and decode "tm-pids" key: %s', ex)
        return 4
    else:
        expected_pids = 0
        if "ds" in tm_pids:
            expected_pids += 1
        if "tm" in tm_pids:
            expected_pids += len(tm_pids["tm"])
        logger.debug("tm_pids = %r", tm_pids)

    ret_val = 0

    logger.debug("terminating %d pids at localhost:%d", expected_pids, redis_port)
    terminate_msg = dict(state="terminate", group=None, directory=None)
    try:
        num_present = redis_server.publish(channel, json.dumps(terminate_msg))
    except Exception:
        logger.exception("Failed to publish terminate message")
        ret_val = 1
    else:
        if num_present != expected_pids:
            logger.error(
                "Failed to terminate %d pids, only encountered %d on" " the channel",
                expected_pids,
                num_present,
            )
            ret_val = 1

    # The assumption/assertion here is that where the tool meister "stop"
    # command is run is on the same node as the tool data sink. So we want to
    # make sure any thing "local" to this stop command is shut down gracefully
    # before we report back to the user.  If tool meisters from remote nodes
    # have already reported that they have received the "terminate" message,
    # then we trust they will shutdown gracefully themselves.
    if "ds" in tm_pids:
        pid = tm_pids["ds"]["pid"]
        logger.debug("waiting for tool-data-sink (%d) to exit", pid)
        while is_running(pid):
            time.sleep(0.1)
    if "tm" in tm_pids:
        for tm in tm_pids["tm"]:
            if tm["hostname"] == full_hostname:
                pid = tm["pid"]
                logger.debug("waiting for local tool-meister (%d) to exit", pid)
                while is_running(pid):
                    time.sleep(0.1)

    if ret_val == 0:
        # All was good so far, so we can terminate the redis server.
        try:
            benchmark_run_dir = os.environ["benchmark_run_dir"]
            redis_server_pid_file = os.path.join(
                benchmark_run_dir, "tm", "redis_{:d}.pid".format(redis_port)
            )
            try:
                with open(redis_server_pid_file, "r") as fp:
                    pid_str = fp.read()
            except OSError as exc:
                if exc.errno != errno.ENOENT:
                    raise
            else:
                redis_server_pid = int(pid_str)
                pid_exists = True
                while pid_exists:
                    try:
                        os.kill(redis_server_pid, signal.SIGTERM)
                    except ProcessLookupError:
                        pid_exists = False
                    else:
                        time.sleep(0.1)
        except Exception:
            logger.exception("Exception encountered terminating Redis server")
            ret_val = 1

    return ret_val


if __name__ == "__main__":
    status = main(sys.argv)
    sys.exit(status)
