#!/bin/bash

_tdir=$(dirname $(readlink -f $0))

_testroot=/var/tmp/pbench-test-utils
mkdir -p $_testroot
if [[ ! -d $_testroot ]]; then
    echo "ERROR: failed to create test root directory, \"$_testroot\"" >&2
    exit 1
fi
rm -rf $_testroot/*
if [[ $? -gt 0 ]]; then
    echo "ERROR: failed to empty test root directory, \"$_testroot\"" >&2
    exit 1
fi
export _testout=$_testroot/output.txt
export _testlog=$_testroot/test-execution.log
_testdir=$_testroot/pbench

# Copy util-scripts execution environment to _testroot
_testopt=$_testroot/opt/pbench-agent
res=0
mkdir -p $_testopt/config
let res=res+$?
mkdir -p $_testopt/util-scripts
let res=res+$?
cp $_tdir/../base $_testopt/
mkdir -p $_testopt/config
cp $_tdir/samples/pbench-agent.cfg $_testopt/config
let res=res+$?
mkdir -p $_testopt/tool-scripts
let res=res+$?
cp $_tdir/../tool-scripts/{iostat,kvmstat,mpstat,numastat,perf,pidstat,proc-interrupts,proc-vmstat,sar,turbostat,vmstat} $_testopt/tool-scripts
let res=res+$?
# scripts="$_tdir/pbench-register-tool $_tdir/pbench-metadata-log"
scripts="$_tdir/pbench-*"
for script in $scripts ; do
    cp $script $_testopt/util-scripts/
    let res=res+$?
done
mkdir -p $_testopt/unittest-scripts/
let res=res+$?
cp $_tdir/test-bin/* $_testopt/unittest-scripts/
let res=res+$?
if [[ $res -ne 0 ]]; then
    echo "ERROR: failed to construct unittest execution directory hierarchy" \
         "under, \"$_testroot\"" >&2
    exit 1
fi

# Fixed timestamp output
export _PBENCH_BENCH_TESTS=1
# Allows us to intercept scp, ssh, rsync, etc.
export PATH=$_testopt/util-scripts:$_testopt/tool-scripts:$_testopt/unittest-scripts:$PATH
export CONFIG=$_testopt/config/pbench-agent.cfg

res=0

function _run {
    local sts
    
    tname=$1
    shift
    tscrpt=$1
    shift
    echo "$tname $tscrpt $@"
    echo "+++ Running $tname $tscrpt" >> $_testout
    benchmark_bin=$_testopt/unittest-scripts/bm pbench_run=$_testdir pbench_log=$_testdir/pbench.log pbench_config=$_testopt $_testopt/util-scripts/$tscrpt $@ >> $_testout 2>&1
    sts=$?
    echo "--- Finished $tname $tscrpt (status=$sts}" >> $_testout
    return $sts
}
function _save_tree {
    # Save state of the tree
    echo "+++ pbench tree state" >> $_testout
    find $_testdir | sort >> $_testout
    if [ -d $_testdir/tools-default ] ;then
        pushd $_testdir/tools-default >/dev/null
        for x in $(ls) ;do
            echo $_testdir/tools-default/$x:
            cat $x
        done
        popd >/dev/null
    elif [ -f $_testdir/tools.default ]; then
        echo $_testdir/tools.default: 
        cat $_testdir/tools.default
    fi >> $_testout
    for x in $(find $_testdir/tmp -type f) ;do
        echo $x:
        sed '/start_run/d' $x
    done >> $_testout
    echo "--- pbench tree state" >> $_testout
}
function _dump_logs {
    # Dump the state of any generated script logs
    echo "+++ pbench.log file contents" >> $_testout
    grep -HvF "\-\-should-n0t-ex1st--" $_testdir/pbench.log >> $_testout 2>&1
    echo "--- pbench.log file contents" >> $_testout
    echo "+++ test-execution.log file contents" >> $_testout
    grep -HvF "\-\-should-n0t-ex1st--" $_testroot/test-execution.log >> $_testout 2>&1
    echo "--- test-execution.log file contents" >> $_testout
    rm -f $_testroot/test-execution.log
}
function _verify_output {
    local sts tname tscrpt
    sts=$1
    tname=$2
    tscrpt=$3
    expected_status=${4:-0}
    diff -cw $_tdir/gold/${tscrpt}/${tname}.txt $_testout
    if [[ $? -gt 0 ]]; then
        echo "FAIL - $tname"
        mv $_testout $_testroot/${tname}_output.txt
        sts=1
    else
        if [[ $sts -eq 0 ]]; then
            echo "PASS - $tname"
            rm $_testout
        elif [[ $sts -eq $expected_status ]] ; then
            echo "PASS - $tname failed with expected exit status: $sts"
            rm $_testout
            sts=0
        else
            echo "FAIL - $tname: PASS output but execution returned non-zero exit status"
        fi
    fi
    return $sts
}
function _setup_state {
    local tool
    local tst
    tst=$1
    tool=$2

    mkdir $_testdir
    if [[ $? -ne 0 ]]; then
        echo "ERROR: failed to create test pbench directory, \"$_testdir\"" >&2
        exit 1
    fi
    if [ ! -z "$tool" -a ! -z "$tst" ] ;then
        if [ -d $_tdir/samples/$tool/$tst ] ;then
            cp -r $_tdir/samples/$tool/$tst/* $_testdir
        fi
    fi
}
function _reset_state {
    rm -rf $_testdir
    if [[ -d $_testdir ]]; then
        echo "ERROR: unable to remove pbench hierarchy" >&2
        exit 1
    fi
}

let errs=0

tests="$*"
if [ -z "$tests" ] ;then

    tests="$(seq -f "test-%02g" 0 19)"
fi

declare -A tools=(
    [test-00]="pbench-register-tool"
    [test-01]="pbench-metadata-log"
    [test-02]="pbench-metadata-log"
    [test-03]="pbench-metadata-log"
    [test-04]="pbench-metadata-log"
    [test-05]="pbench-stop-tools"
    [test-06]="pbench-stop-tools"
    [test-07]="pbench-stop-tools"
    [test-08]="pbench-stop-tools"
    [test-09]="pbench-stop-tools"
    [test-10]="pbench-stop-tools"
    [test-11]="pbench-register-tool-set"
    [test-12]="pbench-clear-tools"
    [test-13]="pbench-postprocess-tools"
    [test-14]="pbench-agent-config-activate"
    [test-15]="pbench-get-hosts"
    [test-16]="pbench-get-hosts"
    [test-17]="pbench-get-hosts"
    [test-18]="pbench-collect-sysinfo"
    [test-19]="pbench-collect-sysinfo"
)
declare -A options=(
    [test-00]="--name=mpstat --group=default -- --interval=10"
    [test-01]="--dir=$_testdir/tmp beg"
    [test-02]="--dir=$_testdir/tmp beg"
    [test-03]="--dir=$_testdir/tmp beg"
    [test-04]="--dir=$_testdir/tmp beg"
    [test-05]="--dir=$_testdir/tmp"
    [test-06]="--dir=$_testdir/tmp"
    [test-07]="--dir=$_testdir/tmp"
    [test-08]="--dir=$_testdir/tmp"
    [test-09]="--dir=$_testdir/tmp"
    [test-10]="--dir=$_testdir/tmp"
    # fubar is assumed to *NOT* exist
    [test-11]="--remote=fubar"
    [test-13]="--dir=$_testdir/tmp --group=default --iteration=1"
    [test-14]="$_testdir/tmp/pbench-agent.cfg"
    [test-15]="$_testdir/tools-default"
    [test-16]="$_testdir/tools-default"
    [test-17]="$_testdir/tools-default"
    [test-18]="--dir=$_testdir/tmp --group=default beg"
    [test-19]="--dir=$_testdir/tmp --group=default beg"
)

declare -A expected_status=(
    [test-05]=1
    [test-06]=1
    [test-11]=4
    [test-12]=1
    [test-13]=1
)

for tst in $tests; do
    tool=${tools[$tst]}
    opts=${options[$tst]}
    status=${expected_status[$tst]}

    _setup_state $tst $tool
    _run $tst $tool $opts
    res=$?
    _save_tree
    _dump_logs
    _verify_output $res $tst $tool $status
    res=$?
    let errs=$errs+$res
    _reset_state
done

if [[ $errs -gt 0 ]]; then
    sts=1
else
    sts=0
fi
exit $sts
