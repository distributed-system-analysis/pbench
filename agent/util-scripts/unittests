#!/bin/bash
export LANG=C.UTF-8
export LC_ALL=C.UTF-8
_tdir=$(dirname $(readlink -f ${0}))

_testroot=/var/tmp/pbench-test-utils
mkdir -p ${_testroot}
if [[ ! -d ${_testroot} ]]; then
    echo "ERROR: failed to create test root directory, \"${_testroot}\"" >&2
    exit 1
fi
rm -rf ${_testroot}/*
if [[ ${?} -gt 0 ]]; then
    echo "ERROR: failed to empty test root directory, \"${_testroot}\"" >&2
    exit 1
fi
export _testout=${_testroot}/output.txt
export _testlog=${_testroot}/test-execution.log
export _testdir=${_testroot}/pbench

# Copy util-scripts execution environment to _testroot
_testopt=${_testroot}/opt/pbench-agent
res=0
mkdir -p ${_testopt}/config ${_testopt}/util-scripts/tool-meister ${_testopt}/tool-scripts ${_testopt}/lib ${_testopt}/unittest-scripts ${_testopt}/common/lib
let res=res+${?}
cat ${_tdir}/../base.ut.pre ${_tdir}/../base ${_tdir}/../base.ut.post > ${_testopt}/base
let res=res+${?}
cp -rL ${_tdir}/../config/* ${_testopt}/config/
# rename pbench-agent.cfg - we need to process it for each test but it gets cleaned up after each test.
mv ${_testopt}/config/pbench-agent.cfg ${_testopt}/config/pbench-agent.cfg.orig
let res=res+${?}
cp -a ${_tdir}/{require-rpm,pbench-*} ${_testopt}/util-scripts/
let res=res+${?}
cp -a ${_tdir}/tool-meister/pbench-* ${_testopt}/util-scripts/tool-meister/
let res=res+${?}
scripts="${_tdir}/../tool-scripts/*"
for script in ${scripts}; do
    if [[ "${script}" == *README ]]; then
        # Ignore all README files
        continue
    fi
    if [[ -d "${script}" ]]; then
        # Ignore any sub-directories
        continue
    fi
    cp -L ${script} ${_testopt}/tool-scripts/
    let res=res+${?}
done
mkdir ${_testopt}/tool-scripts/datalog ${_testopt}/tool-scripts/postprocess
let res=res+${?}
cp -L ${_tdir}/../tool-scripts/datalog/*-datalog ${_testopt}/tool-scripts/datalog/
let res=res+${?}
cp -L ${_tdir}/../tool-scripts/datalog/*-convert ${_testopt}/tool-scripts/datalog/
let res=res+${?}
cp -L ${_tdir}/../tool-scripts/postprocess/*-postprocess ${_testopt}/tool-scripts/postprocess/
let res=res+${?}
cp ${_tdir}/../tool-scripts/postprocess/*-postprocess-cdm ${_testopt}/tool-scripts/postprocess/
let res=res+${?}
cp -rL ${_tdir}/../lib/* ${_testopt}/lib/
let res=res+${?}
cp -rL ${_tdir}/test-bin/* ${_testopt}/unittest-scripts/
let res=res+${?}

if [[ $res -ne 0 ]]; then
    echo "ERROR: failed to construct unittest execution directory hierarchy" \
         "under, \"${_testroot}\"" >&2
    exit 1
fi

# After this point the "cp" command it mocked-out, so we have to use
# the "real" one.
export _real_cp="$(command -v cp)"

function remove_path {
    # PATH (${2}) => /bin:/opt/a dir/bin:/sbin
    WORK=:${2}:
    # WORK => :/bin:/opt/a dir/bin:/sbin:
    REMOVE=${1}
    WORK=${WORK/:${REMOVE}:/:}
    # WORK => :/bin:/sbin:
    WORK=${WORK%:}
    WORK=${WORK#:}
    #PATH=${WORK}
    # PATH => /bin:/sbin
    echo ${WORK}
}
PATH=$(remove_path /opt/pbench-agent/bench-scripts ${PATH})
PATH=$(remove_path /opt/pbench-agent/util-scripts ${PATH})
# Allows us to intercept scp, ssh, rsync, etc.
export PATH=${_testopt}/unittest-scripts:${_testopt}/util-scripts:${_testopt}/tool-scripts:${PATH}

# Fixed timestamp output
export _PBENCH_UNIT_TESTS=1

res=0

function _run {
    local sts

    local tname=${1}
    shift
    local tscrpt=${1}
    shift
    local sortit=${1}
    shift

    pushd ${_testdir} > /dev/null 2>&1
    if [[ ${?} -ne 0 ]]; then
        exit 1
    fi

    local opts=${options[${tname}]}
    echo "${tname} ${tscrpt} ${opts}"
    echo "+++ Running ${tname} ${tscrpt} ${opts}" >> ${_testout}

    _runout=${_testroot}/run.out
    eval ${tscrpt} ${opts} > ${_runout} 2>&1
    sts=${?}

    popd > /dev/null 2>&1
    if [[ ${?} -ne 0 ]]; then
        exit 1
    fi

    if [[ "${sortit}" == "sort" ]]; then
        sort ${_runout} >> ${_testout}
    else
        cat ${_runout} >> ${_testout}
    fi
    rm ${_runout}

    echo "--- Finished $tname ${tscrpt} (status=${sts})" >> ${_testout}
    return ${sts}
}

function _save_tree {
    # Save state of the tree
    echo "+++ pbench tree state" >> ${_testout}
    find ${_testdir} 2> /dev/null | sort >> ${_testout}

    for x in $(find "${_testdir}/tools"-* -type f 2> /dev/null | sort); do
        echo "=== ${x}:"
        cat ${x}
    done >> ${_testout}

    for x in $(find "${_testdir}/tmp" -type f 2> /dev/null | sort); do
        echo "=== ${x}:"
        cat ${x}
    done >> ${_testout}
    echo "--- pbench tree state" >> ${_testout}
}

function _dump_logs {
    # Dump the state of any generated script logs
    if [[ -f ${_testdir}/pbench.log ]]; then
        echo "+++ pbench.log file contents" >> ${_testout}
        cat ${_testdir}/pbench.log >> ${_testout} 2>&1
        echo "--- pbench.log file contents" >> ${_testout}
    fi
    for mdlog in ${_testdir}/*/metadata.log; do
        if [[ -f ${mdlog} ]]; then
            mddir=$(basename $(dirname "${mdlog}"))
            if [[ "${mddir}" == "tmp" ]]; then
                continue
            fi
            echo "+++ ${mddir}/metadata.log file contents" >> ${_testout}
            cat ${_testdir}/${mddir}/metadata.log >> ${_testout} 2>&1
            echo "--- ${mddir}/metadata.log file contents" >> ${_testout}
        fi
    done
    local bm_run_dir="$(basename "${benchmark_run_dir}")"
    for actionlog in $(cd ${_testdir}; find "${bm_run_dir}" \( -name 'stop.log' -o -name 'postprocess.log' \) 2> /dev/null | sort); do
        echo "+++ ${actionlog} file contents" >> ${_testout}
        cat ${_testdir}/${actionlog} >> ${_testout} 2>&1
        echo "--- ${actionlog} file contents" >> ${_testout}
    done
    for tmfile in ${_testdir}/*/tm/*; do
        if [[ -f ${tmfile} ]]; then
            tmdir=$(basename $(dirname $(dirname "${tmfile}")))
            tmfilename=$(basename ${tmfile})
            echo "+++ ${tmdir}/tm/${tmfilename} file contents" >> ${_testout}
            if [[ "${tmfilename}" == "redis.log" ]]; then
                grep -E -o -- '# Configuration loaded|# Server initialized|\* Ready to accept connections|# User requested shutdown\.\.\.|\* Removing the pid file\.|# Redis is now ready to exit, bye bye\.\.\.' ${_testdir}/${tmdir}/tm/${tmfilename} >> ${_testout} 2>&1
            else
                cat ${_testdir}/${tmdir}/tm/${tmfilename} >> ${_testout} 2>&1
            fi
            echo "--- ${tmdir}/tm/${tmfilename} file contents" >> ${_testout}
        fi
    done
    if [[ -f ${_testlog} ]]; then
        echo "+++ test-execution.log file contents" >> ${_testout}
        cat ${_testlog} >> ${_testout} 2>&1
        echo "--- test-execution.log file contents" >> ${_testout}
        rm -f ${_testlog}
    fi
}

function _verify_output {
    local sts tname tscrpt expected_status
    sts=${1}
    tname=${2}
    tscrpt=${3}
    expected_status=${4:-0}
    # Fix up any ${HOME} text that landed in the output.
    if [[ ! -z "${HOME}" ]]; then
        sed -i "s;${HOME};;g" ${_testout}
        if [[ ${?} -ne 0 ]]; then
            printf -- "INTERNAL ERROR: sed failed to remove '%s'\n" "${HOME}" >&2
            exit 1
        fi
    fi
    # Fix up any pids or temporary file or directory numbers that have snuck
    # into the output.
    sed -i -e 's;tmp/\([a-z-]*\)\.[0-9][0-9]*;tmp/\1.NNNNN;g' \
           -e 's;\(tm\.[a-z-]*\)\.[0-9][0-9]*\.[a-z0-9_][a-z0-9_]*;\1.NNNNN.nnnnnnnn;g' \
           -e 's;raw_size = [0-9][0-9]*;raw_size = #####;g' \
           -e 's;v[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*;v#.##.##;g' \
           -e 's;"pid": [0-9][0-9]*\([,}]\);"pid": NNNNN\1;g' \
           -e 's;tar up [0-9][0-9]* bytes;tar up ##### bytes;g' \
           ${_testout}
    if [[ ${?} -ne 0 ]]; then
        printf -- "INTERNAL ERROR: sed failed to replace unique patterns\n" >&2
        exit 1
    fi
    diff -c ${_tdir}/gold/${tscrpt}/${tname}.txt ${_testout}
    if [[ ${?} -gt 0 ]]; then
        echo "FAIL - ${tname}"
        mv ${_testout} ${_testroot}/${tname}_output.txt
        sts=1
    else
        if [[ ${sts} -eq ${expected_status} ]]; then
            if [[ ${expected_status} -ne 0 ]]; then
                echo "PASS - ${tname} exited with expected status: ${sts}"
                sts=0
            else
                echo "PASS - ${tname}"
            fi
        else
            echo "FAIL - ${tname}: PASS output but execution returned unexpected exit status: ${sts}"
            sts=1
        fi
        rm ${_testout}
    fi
    return ${sts}
}

function _setup_state {
    local tool
    local tst
    tst=${1}
    tool=${2}

    sed "s;/opt/pbench-agent;${_testopt};" ${_testopt}/config/pbench-agent.cfg.orig > ${_testopt}/config/pbench-agent.cfg
    if [[ ${?} -ne 0 ]]; then
        echo "ERROR: failed to create default pbench-agent.cfg" >&2
        exit 1
    fi
    printf -- "\n[pbench-agent]\npbench_run = %s\n" "${_testdir}" >> ${_testopt}/config/pbench-agent.cfg
    export _PBENCH_AGENT_CONFIG=${_testopt}/config/pbench-agent.cfg

    mkdir ${_testdir}
    if [[ ${?} -ne 0 ]]; then
        echo "ERROR: failed to create test pbench directory, \"${_testdir}\"" >&2
        exit 1
    fi
    if [[ ! -z "${tool}" && ! -z "${tst}" ]]; then
        if [[ -e ${_tdir}/configs/${tool}/${tst}/pbench-agent.cfg.frag ]]; then
            printf -- "\n" >> ${_PBENCH_AGENT_CONFIG}
            cat ${_tdir}/configs/${tool}/${tst}/pbench-agent.cfg.frag >> ${_PBENCH_AGENT_CONFIG}
            if [[ ${?} -ne 0 ]]; then
                echo "ERROR: failed to setup pbench-agent.cfg file" >&2
                exit 1
            fi
        fi
        if [[ -d ${_tdir}/samples/${tool}/${tst} ]]; then
            ${_real_cp} -r ${_tdir}/samples/${tool}/${tst}/* ${_testroot}
            if [[ ${?} -ne 0 ]]; then
                echo "ERROR: failed to setup ${tool}/${tst} samples" >&2
                exit 1
            fi
        fi
    fi

    export benchmark="fake-bm"
    export benchmark_bin=${_testopt}/unittest-scripts/bm

    # Discover the "benchmark_run_dir"
    bm_run_dir="$(ls -1 ${_testdir} 2>/dev/null | grep -vE 'tmp|tools-.+|tool-triggers|tools\.default' 2>/dev/null)"
    if [[ -z "${bm_run_dir}" ]]; then
        bm_run_dir="mock-run"
    fi
    export benchmark_run_dir=${_testdir}/${bm_run_dir}
}

function _reset_state {
    rm ${_testopt}/config/pbench-agent.cfg
    unset _PBENCH_AGENT_CONFIG

    rm -rf ${_testdir}
    if [[ -d ${_testdir} ]]; then
        echo "ERROR: unable to remove pbench hierarchy" >&2
        exit 1
    fi

    unset benchmark_run_dir
    unset benchmark_bin
    unset benchmark
}

let errs=0

declare -A tools=(
    [test-00]="pbench-register-tool"
    [test-01]="pbench-metadata-log"
    [test-02]="pbench-metadata-log"
    [test-03]="pbench-metadata-log"
    [test-04]="pbench-metadata-log"
    [test-05]="pbench-start-tools"
    [test-06]="pbench-stop-tools"
    [test-07]="pbench-postprocess-tools"
    [test-08]="pbench-kill-tools"
    [test-09]="pbench-kill-tools"
    [test-10]="pbench-kill-tools"
    [test-11.00]="pbench-register-tool-set"
    [test-11.01]="pbench-register-tool-set"
    [test-11.02]="pbench-register-tool-set"
    [test-11.03]="pbench-register-tool-set"
    [test-11.04]="pbench-register-tool-set"
    [test-11.05]="pbench-register-tool-set"
    [test-11.06]="pbench-register-tool-set"
    [test-11.07]="pbench-register-tool-set"
    [test-11.08]="pbench-register-tool-set"
    [test-11.09]="pbench-register-tool-set"
    [test-11.10]="pbench-register-tool-set"
    [test-11.11]="pbench-register-tool-set"
    [test-11.12]="pbench-register-tool-set"
    [test-11.13]="pbench-register-tool-set"
    [test-11.14]="pbench-register-tool-set"
    [test-12]="pbench-clear-tools"
    [test-13]="pbench-clear-tools"
    [test-14]="pbench-agent-config-activate"
    [test-15]="pbench-register-tool-trigger"
    [test-16]="pbench-list-triggers"
    [test-17]="pbench-list-triggers"
    [test-18]="pbench-list-triggers"
    [test-19]="test-tool-trigger"
    [test-22]="pbench-metadata-log"
    [test-23]="pbench-collect-sysinfo"
    [test-24]="pbench-collect-sysinfo"
    [test-25]="pbench-collect-sysinfo"
    [test-26]="pbench-collect-sysinfo"
    [test-27]="pbench-collect-sysinfo"
    [test-28]="pbench-collect-sysinfo"
    [test-29]="pbench-collect-sysinfo"
    [test-30]="pbench-collect-sysinfo"
    [test-31]="pbench-copy-results"
    [test-32]="pbench-copy-results"
    [test-35]="pbench-register-tool-trigger"
    [test-36]="pbench-register-tool-trigger"
    [test-39]="pbench-copy-results"
    [test-40]="pbench-copy-results"
    [test-41]="pbench-copy-results"
    [test-42]="pbench-register-tool"
    [test-43]="pbench-register-tool"
    [test-44]="pbench-register-tool"
    [test-45]="pbench-register-tool"
    [test-46]="pbench-register-tool"
    [test-47]="pbench-register-tool"
    [test-48]="test-add-metalog-%-option"
    [test-49]="pbench-copy-results"
    [test-50]="test-pbench-metadata-log"
    [test-51]="test-start-stop-tool-meister"
    [test-52]="test-start-stop-tool-meister"
    [test-53]="test-client-tool-meister"
    [test-54]="pbench-collect-sysinfo"
    [test-55]="pbench-collect-sysinfo"
    [test-56]="test-client-tool-meister"
    [test-57]="test-client-tool-meister"
    [test-58]="pbench-stop-tools"
    [test-59]="pbench-postprocess-tools"
    [test-60]="pbench-send-tools"
    [test-61]="pbench-init-tools"
    [test-62]="pbench-end-tools"
    [test-63]="pbench-clear-results"
    [test-64]="pbench-cleanup"
    [test-65]="pbench-clear-tools"
    [test-66]="pbench-clear-tools"
    [test-67]="pbench-clear-tools"
    [test-68]="pbench-clear-tools"
    [test-69]="pbench-clear-tools"
)

declare -A sortem=(
    [test-51]="sort"
    [test-52]="sort"
)

declare -A options=(
    [test-00]="--name=mpstat --group=default -- --interval=10"
    [test-01]="--dir=${_testdir}/mock-run beg"
    [test-02]="--dir=${_testdir}/mock-run beg"
    [test-03]="--dir=${_testdir}/mock-run beg"
    [test-04]="--dir=${_testdir}/mock-run beg"
    [test-05]="--group=default --dir=42-iter/sample42"
    [test-06]="--group=default --dir=42-iter/sample42"
    [test-07]="--group=foobar --dir=${_testdir}/42-iter/sample42"
    [test-08]="--group=barfoo --dir=42-iter/sample42"
    [test-09]="--group=barfoo"
    [test-10]="--dir=barfoo"
    # fubar is assumed to *NOT* exist
    [test-11.00]="--remote=fubar"
    [test-11.02]="--interval=10"
    # verify one remote
    [test-11.04]="--remotes=one.example.com"
    # verify multiple remotes
    [test-11.05]="--remotes=a.example.com,b.example.com,c.example.com"
    # verify no remotes with a label (local)
    [test-11.06]="--labels=labelNO"
    # verify one remote (default) with two labels
    [test-11.07]="--labels=labelG,labelB"
    # verify two remotes with one label
    [test-11.08]="--remotes=one.example.com,two.example.com --labels=labelOne"
    # verify three remotes with three labels
    [test-11.09]="--remotes=one.example.com,two.example.com,three.example.com --labels=labelOne,labelTwo,labelThree"
    # verify --toolset option other than "default"
    [test-11.10]="--toolset=other"
    # verify --toolset option that does not exist
    [test-11.11]="--toolset=doesntexist"
    # verify --group option works along side --no-install
    [test-11.12]="--group=other --no-install"
    [test-11.13]="--help"
    [test-13]="--remote=fubar2"
    [test-14]="${_testdir}/tmp/pbench-agent.cfg"
    [test-15]="--group=default --start-trigger=\"START DEFAULT\" --stop-trigger=\"STOP DEFAULT\""
    [test-17]="--group=default"
    [test-18]="--group=foo"
    [test-22]="--dir=${_testdir}/mock-run end"
    [test-23]="--help"
    [test-24]="--options"
    [test-25]="--check --sysinfo=all"
    [test-26]="--check --sysinfo=none"
    [test-27]="--check --sysinfo=default"
    [test-28]="--check --sysinfo=block,libvirt,kernel_config,sos,topology"
    [test-29]="--check --sysinfo=block,sos,bad,topology"
    [test-30]="--check --sysinfo=libvirt,default,kernel_config,all,topology,none"
    [test-31]="--prefix=foo/bar --user=ndk"
    [test-32]="--help"
    [test-34]="--help"
    [test-35]="--group=default --start-trigger=\"START:DEFAULT\" --stop-trigger=\"STOP DEFAULT\""
    [test-36]="--group=default --start-trigger=\"START DEFAULT\" --stop-trigger=\"STOP:DEFAULT\""
    [test-37]="--prefix="
    [test-38]="--user="
    [test-39]="--prefix=goo/tar"
    [test-40]="--user=pap"
    [test-42]="--name=vmstat --group=default --no-install -- --interval=42"
    [test-43]="--name=turbostat --no-install --remotes=one.example.com,localhost,testhost.example.com,two.example.com"
    [test-44]="--name=mpstat --no-install --remotes=@${_testdir}/tmp/doesntexist.lis"
    [test-45]="--name=mpstat --no-install --remotes=@${_testdir}/tmp/remotes.lis"
    [test-46]="--name=mpstat --no-install --remotes=@${_testdir}/tmp/remotes.lis"
    [test-47]="--name=mpstat --no-install --remotes=@${_testdir}/tmp/remotes.lis --labels=labelOne,labelTwo"
    [test-49]="--prefix=foo/bar3% --user=ndk20%"
    [test-52]="mygroup"
    [test-54]="bad"
    [test-55]="--dir=${_testdir}/mock-run end"
    [test-56]="lite with-remotes"
    [test-57]="lite with-remotes delayed-send"
    [test-58]="--group=default --dir=42-iter/sample42"
    [test-59]="--group=foobar --dir=42-iter/sample42"
    [test-60]="--group=default --dir=42-iter/sample42"
    [test-61]="--group=default --dir=${_testdir}/mock-run"
    [test-62]="--group=default --dir=${_testdir}/mock-run"
    # pbench-clear-tools
    # Remove all tools from group good, leave default alone
    [test-65]="--group=good"
    # Error group does not exist
    [test-66]="--group=bad"
    # Remove all tools from 2 remotes, one remote does not exist
    [test-67]="--remotes=fubar3.example.com,doesnotexist.example.com,fubar4.example.com"
    # Remove one tool from two remotes, remotes not removed
    [test-68]="--name=vmstat --remotes=fubar5.example.com,fubar6.example.com"
    # One tool, one remote w label, one remote w/o label, one remote w 2 tools, 1st two remotes removed
    [test-69]="--name=pidstat --remotes=fubar5.example.com,fubar6.example.com,fubar7.example.com"
)

declare -A expected_status=(
    [test-01]=1
    [test-09]=1
    [test-10]=1
    [test-11.07]=1
    [test-11.08]=1
    [test-11.11]=1
    [test-29]=1
    [test-35]=1
    [test-36]=1
    [test-37]=1
    [test-38]=1
    [test-44]=1
    [test-46]=1
    [test-47]=1
    [test-54]=1
    [test-58]=1
    [test-59]=1
    [test-60]=1
    [test-66]=1
)

declare -A pre_hooks=(
    [test-05]='ln -s mock-pbench-tool-meister-client ${_testopt}/unittest-scripts/pbench-tool-meister-client'
    [test-06]='ln -s mock-pbench-tool-meister-client ${_testopt}/unittest-scripts/pbench-tool-meister-client; mkdir -p ${_testdir}/42-iter/sample42/tools-default/testhost.example.com/iostat; touch ${_testdir}/42-iter/sample42/tools-default/testhost.example.com/iostat/iostat-stdout.txt'
    [test-07]='mkdir -p ${_testdir}/42-iter/sample42/tools-foobar/testhost.example.com/iostat; touch ${_testdir}/42-iter/sample42/tools-foobar/testhost.example.com/iostat/iostat-stdout.txt'
    [test-14]='rm ${_testopt}/config/pbench-agent.cfg; sed -i "s;_REPLACE_ME_;${_testopt};g" ${_testdir}/tmp/pbench-agent.cfg'
    [test-19]='ln -s mock-pbench-tool-meister-client ${_testopt}/unittest-scripts/pbench-tool-meister-client'
    [test-33]='(echo "+++ setup pbench results dir time stamps"; touch --date="2019-01-01 12:00:42" ${_testdir}/pbench-user-benchmark_ndk-test-1_2019.01.01T12.00.42; touch --date="2019-01-01 12:00:43" ${_testdir}/pbench-user-benchmark_ndk-test-1_2019.01.01T12.00.43; touch --date="2019-01-01 12:00:44" ${_testdir}/pbench-user-benchmark_ndk-test-1_2019.01.01T12.00.44; echo "--- setup pbench results dir time stamps") >> ${_testout}'
    [test-45]='mkdir ${_testdir}/tmp; printf -- "# good list\none.example.com\ntwo.example.com,labelTwo\n\nthree.example.com\n" > ${_testdir}/tmp/remotes.lis'
    [test-46]='mkdir ${_testdir}/tmp; printf -- "# bad list\none.example.com\ntwo.example.com,labelTwo\n\nthree.example.com,labelThree,junk\n" > ${_testdir}/tmp/remotes.lis'
    [test-47]='mkdir ${_testdir}/tmp; printf -- "# good list with no labels\none.example.com\ntwo.example.com\nthree.example.com\n" > ${_testdir}/tmp/remotes.lis'
    [test-48]='mkdir ${_testdir}/tmp; printf -- "%s\n" "30%" > ${_testdir}/tmp/foo.txt'
    [test-55]='pbench-register-tool --name=mpstat --remote=localhost > /dev/null; mkdir ${_testdir}/mock-run'
    [test-61]='ln -s mock-pbench-tool-meister-client ${_testopt}/unittest-scripts/pbench-tool-meister-client'
    [test-62]='ln -s mock-pbench-tool-meister-client ${_testopt}/unittest-scripts/pbench-tool-meister-client; mkdir -p ${_testdir}/mock-run/tools-default'
)

function sort_testlog {
    sed -e 's;\(tm\.[a-z-]*\)\.[0-9][0-9]*\.[a-z0-9_][a-z0-9_]*;\1.NNNNN.nnnnnnnn;g' ${_testlog} | sort > ${_testlog}.sorted
    mv ${_testlog}.sorted ${_testlog}
}

function sort_tdslog {
    sort ${_testdir}/mock-run/tm/pbench-tool-data-sink.log > ${_testdir}/mock-run/tm/pbench-tool-data-sink.log.sorted
    mv ${_testdir}/mock-run/tm/pbench-tool-data-sink.log.sorted ${_testdir}/mock-run/tm/pbench-tool-data-sink.log
}

declare -A post_hooks=(
    [test-05]='rm ${_testopt}/unittest-scripts/pbench-tool-meister-client'
    [test-06]='rm ${_testopt}/unittest-scripts/pbench-tool-meister-client'
    [test-07]='cat ${_testdir}/42-iter/sample42/tools-foobar/testhost.example.com/postprocess.log >> ${_testout} 2>&1'
    [test-19]='rm ${_testopt}/unittest-scripts/pbench-tool-meister-client'
    [test-53]='sort_testlog'
    [test-56]='sort_testlog; sort_tdslog'
    [test-57]='sort_testlog; sort_tdslog'
    [test-61]='rm ${_testopt}/unittest-scripts/pbench-tool-meister-client'
    [test-62]='rm ${_testopt}/unittest-scripts/pbench-tool-meister-client'
)

tests="${*}"
if [[ -z "${tests}" ]]; then
    typeset -i len=${#tools[@]}
    len=${len}-1
    tests=$(echo ${!tools[*]} | tr ' ' '\n' | sort)
fi

for tst in ${tests}; do
    tool=${tools[${tst}]}
    sort=${sortem[${tst}]}
    status=${expected_status[${tst}]}
    pre_hook=${pre_hooks[${tst}]}
    post_hook=${post_hooks[${tst}]}

    _setup_state ${tst} ${tool}
    eval "${pre_hook}"
    USER=nobody _run ${tst} ${tool} ${sort}
    res=${?}
    eval "${post_hook}"
    _save_tree
    _dump_logs
    _verify_output ${res} ${tst} ${tool} ${status}
    res=${?}
    let errs=${errs}+${res}
    _reset_state
done

# Clean up opt subdirectory, and attempt to remove test directory entirely;
# if we fail, ignore it as it just means there are output files present for
# failed tests.
rm -rf ${_testroot}/opt
rmdir ${_testroot} > /dev/null 2>&1

if [[ ${errs} -gt 0 ]]; then
    sts=1
else
    sts=0
fi
exit ${sts}
