#!/bin/bash
# -*- mode: shell-script; indent-tabs-mode: t; sh-basic-offset: 8; sh-indentation: 8; sh-indent-for-case-alt: + -*-

script_path=`dirname $0`
script_name=`basename $0`
pbench_bin="`cd ${script_path}/..; /bin/pwd`"
sysinfo=$2

# source the base script
. "$pbench_bin"/base

dir=$(readlink -f $1 2>/dev/null)
if [[ $? -ne 0 ]]; then
	error_log "You must provide a directory that exists, \"$1\" is not a real path"
	exit 1
fi
if [[ ! -d "$dir" ]]; then
	error_log "You must provide a directory that exists, \"$dir\" does not"
	exit 1
fi

label=$3
if [[ -z "$label" ]]; then
    dir="$dir/$hostname"
else
    dir="$dir/$label:$hostname"
fi
mkdir -p $dir
if [[ ! -d "$dir" ]]; then
	error_log "Failed to create the sysinfo directory, \"$dir\""
	exit 1
fi

function collect_kernel_config {
	if [[ -e /boot/config-$(uname -r) ]] ;then
		cp /boot/config-$(uname -r) $dir
	fi
}

function collect_mitigation_data {
	# spectre and meltdown

	> $dir/security-mitigation-data.txt
	# check the generic vulnerabilities files first
	if [ -d  /sys/devices/system/cpu/vulnerabilities ] ;then
		grep -Hs . /sys/devices/system/cpu/vulnerabilities/* >> $dir/security-mitigation-data.txt
	fi 
	# then check the RHEL-specific flag settings files - only
	# applicable on x86_64
	if [ -d /sys/kernel/debug/x86 ] ;then
		echo >> $dir/security-mitigation-data.txt
		grep -Hs . /sys/kernel/debug/x86/*enabled >> $dir/security-mitigation-data.txt
	fi
}

function collect_libvirt {
	if [[ -e /var/log/libvirt && -e /etc/libvirt ]]; then
		debug_log "[$script_name]collecting libvirt data"
		mkdir -p $dir/libvirt/log
		pushd /var/log/libvirt >/dev/null && find . -name "*.log" | cpio -pdum $dir/libvirt/log/ 2>/dev/null
		mkdir -p $dir/libvirt/etc
		pushd /etc/libvirt >/dev/null && find | cpio -pdum $dir/libvirt/etc/ 2>/dev/null
		debug_log "[$script_name]done collecting libvirt data"
	fi
}

function collect_topology {
	debug_log "[$script_name]collecting system topology"
	if [[ -f /usr/bin/lstopo ]]; then
		lstopo --of txt >$dir/lstopo.txt
	fi
	debug_log "[$script_name]done collecting system topology"
}

function collect_block {
	debug_log "[$script_name]collecting block data"
	for n in  /sys/block/[s,h,v]d\*[a-z]/; do
		find $n  -type f -printf "%p " -exec cat '{}' \;  2>/dev/null
	done >$dir/block-params.log
	debug_log "[$script_name]done collecting block data"
}

function collect_sos {
	name=$(hostname -f)-pbench
	debug_log "[$script_name]collecting sosreport"
	sos_ver=`rpm -q sos | awk -F- '{print $2}' | awk -F. '{print $1}'`
	if [[ "$sos_ver" == "3" ]]; then
		quiet="--quiet"
		block="-o block"
		processor="-o processor"
		sos_ver=`rpm -q sos | awk -F- '{print $2}' | awk -F. '{print $2}'`
		if [[ "$sos_ver" == "0" ]]; then
		    # No tuned plug-in in sosreport v3.0
		    tuned=""
		else
		    # tuned plug-in in sosreport v3.1+
		    tuned="-o tuned"
		fi
	else
		quiet=""
		block=""
		processor=""
		tuned=""
	fi
	sosreport -o general -o kernel -o filesys -o devicemapper -o system -o memory \
	      -o hardware -o networking -o lsbrelease ${block} ${processor} ${tuned} \
	      --batch ${quiet} --tmp-dir=$dir --name "$name" > /dev/null 2>&1
	if [[ -f "sosreport-$name-*.tar.xz" ]]; then
		debug_log "[$script_name]done collecting sosreport"
	else
		debug_log "[$script_name]sosreport collection failed!"
	fi
}

function collect_ara_data {
	# collect data only when ara is installed
	if python -c "import ara" &>/dev/null; then
		mkdir $dir/ara
		generate_inventory > $INVENTORY
		ansible-playbook -i ${INVENTORY} --extra-vars '{"SYSINFO_DIR":"'$dir'"}' "$pbench_install_dir/ansible/ara/ara.yml"
	else
		debug_log "[$script_name]skipping, $item not installed"
	fi
}

for item in ${sysinfo//,/ };do
	debug_log "[$script_name]: collecting $item"
	if [[ "$item" == "kernel_config" ]]; then
		collect_kernel_config &
	elif [[ "$item" == "security_mitigations" ]]; then
		collect_mitigation_data &
	elif [[ "$item" == "libvirt" ]]; then
		collect_libvirt &
	elif [[ "$item" == "topology" ]]; then
		collect_topology &
	elif [[ "$item" == "sos" ]]; then
		collect_sos &
	elif [[ "$item" == "block" ]]; then
		collect_block &
	elif [[ "$item" == "ara" ]]; then
		collect_ara_data &> $pbench_log
	else
		debug_log "[$script_name]bad sysinfo value"
	fi
done
wait
chmod -R 775 $dir
