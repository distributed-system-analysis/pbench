#! /bin/bash
# -*- mode: shell-script -*-

# this script uses env variables set by the base script, so it
# needs to be invoked *after* the base script is sourced and *after*
# the bench_run_dir is set.

script_path=`dirname $0`
script_name=`basename $0`
pbench_bin="`cd ${script_path}/..; /bin/pwd`"

# source the base script
. "$pbench_bin"/base

# This script will collect metadata about a pbench run.  This is
# typically called at the beginning and end of a benchmark script to
# capture various bits of information that will be useful in indexing
# the run.

# Defaults
dir=/tmp
group="default"

# Process options and arguments

opts=$(getopt -q -o d:g: --longoptions "dir:,group:" -n "getopt.sh" -- "$@");
if [ $? -ne 0 ]; then
	printf "\n"
	printf "$script_name: you specified an invalid option\n\n"
	printf "The following are required:\n\n"
	printf -- "\t-d str --dir=str, str = a directory where the $script_name\n"
	printf -- "\t                        will store and process data\n"
	printf "\n"
	exit 1
fi
eval set -- "$opts";
while true; do
	case "$1" in
		-d|--dir)
		shift;
		if [ -n "$1" ]; then
			dir="$1"
			shift;
		fi
		;;
		-g|--group)
		shift;
		if [ -n "$1" ]; then
			group="$1"
			shift;
		fi
		;;
		--)
		shift;
		break;
		;;
	esac
done

function usage {
    echo "Usage: $prog beg|end <bench_run_dir>" >&2
}

function metadata_log_tools {
    local log=$1

    # get the remotes from the local tools-$group directory
    # then get the remote tools-$group dirs for each remote
    local remotes="$(/bin/ls $pbench_run/tools-$group/ 2> /dev/null | grep @ | sed 's/.*@//
s/:[^:]*$//' | tr '\n' ' ')"

    # the remotes may have different names than what the controller uses,
    # so go ask them - the names of the remotes in the metadata log have to
    # agree with the names of the remotes used when postprocessing the tool
    # results, otherwise the indexing will fail.
    local rems=""
    for remote in $remotes ;do
        # if the ssh fails, just leave the name alone
        rem=$(ssh $ssh_opts -n $remote hostname -s 2>/dev/null || echo $remote)
        rems="$rems $rem"
    done
    remotes=$rems

    # check if the local tools-$group directory includes any local tools
    local=0
    if /bin/ls $pbench_run/tools-$group 2> /dev/null | grep -q -v "^remote@" ;then
        local=1
    fi

    # if yes ...
    if [ $local == 1 ] ;then
        cat >> $log <<EOF
[tools]
hosts: $hostname $remotes
group: $group

[tools/$hostname]
EOF
        for tool in $(/bin/ls $pbench_run/tools-$group 2> /dev/null) ;do
            # add the options with a space in front, effectively making them continuation
            # lines as far the python config module is concerned.
            echo $tool: $(cat $pbench_run/tools-$group/$tool | sed 's/^/ /')
        done >> $log
        echo "" >> $log
    else
        # just remotes
        if [ ! -z "$remotes" ] ;then
            cat >> $log <<EOF
[tools]
hosts: $remotes
group: $group

EOF
        fi
    fi
    
    for remote in $remotes ;do
        cat >> $log <<EOF
[tools/$remote]
EOF
        for tool in $(ssh $ssh_opts $remote /bin/ls $pbench_run/tools-$group) ;do
            echo $tool: $(ssh $ssh_opts $remote cat $pbench_run/tools-$group/$tool | sed 's/^/ /')
        done >> $log
        echo "" >> $log
    done
}

function metadata_log_start {
    local dir=$1
    local group=$2
    local ts=$3
    local log=$dir/metadata.log

    if [ -z "$ts" ] ;then
        ts=$(timestamp)
    fi
    cat > $log <<EOF
[pbench]
name: $(basename $dir)
script: $benchmark
config: $config
date: $date
rpm-version: $(yum list installed pbench-agent 2>/dev/null | tail -n 1 | awk '{print $2}')

EOF
    metadata_log_tools $log $group
    cat >> $log <<EOF
[run]
controller: $full_hostname
start_run: $ts
EOF
}

function metadata_log_end {
    local dir=$1
    local group=$2
    local int=$3
    local log=$dir/metadata.log

    if [ ! -f $log ] ;then
        # Somehow, metadata_log_start was never called !?!?
        # Call it explicitly.
        # Manufacture a start_run timestamp and pass it
        # explicitly. The manufactured stamp is the date that
        # the base file calculates (now in UTC).
        local start_ts=$(timestamp)
        metadata_log_start $dir $group $start_ts
    fi
    if ! grep -q end_run $log ;then
        echo "$(timestamp)" | pbench-add-metalog-option $dir/metadata.log run end_run
    fi
    if [ "$int" == "int" ] ;then
        echo "true"  | pbench-add-metalog-option $dir/metadata.log run run_interrupted
    fi
}

mkdir -p $dir
case $1 in
    beg)
        metadata_log_start $dir $group
        ;;
    end)
        metadata_log_end $dir $group
        name=$(basename $dir)
        if [ -f $pbench_tmp/$name.iterations ] ;then
            cat $pbench_tmp/$name.iterations |
                pbench-add-metalog-option $dir/metadata.log pbench iterations
        fi
        ;;
    int)
        metadata_log_end $dir $group int
        ;;
    *)
        usage
        exit 2
esac

exit 0
