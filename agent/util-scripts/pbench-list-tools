#!/bin/bash
# -*- mode: shell-script; indent-tabs-mode: t; sh-basic-offset: 8; sh-indentation: 8; sh-indent-for-case-alt: + -*-

script_path="$(dirname ${0})"
script_name="$(basename ${0})"
pbench_bin="$(realpath -e ${script_path}/..)"

# source the base script
. "${pbench_bin}"/base

# This script can list all tools from all groups, list tools from a specific
# group, or list which groups contain a specific tool.

# Defaults
name=""
group=""
with_options=0

function usage() {
	printf -- "usage:\n"
	printf -- "${script_name} [--name=<tool-name>] [--group=<group-name>] [--with-options]\n"
	printf -- "The following options are available:\n\n"
	printf -- "\t-n <tool-name> --name=<tool-name>, list the tool groups in which <tool-name> is used\n"
	printf -- "\t\tNot allowed with the --group option.\n"
	printf -- "\t-g <group-name> --group=<group-name>, list the tools used in this <group-name>\n"
	printf -- "\t\tNot allowed with the --name option.\n"
	printf -- "\t-o --with-options, list the options with each tool\n"
}


# Process options and arguments

opts=$(getopt -q -o tn:og: --longoptions "with-options,name:,group:" -n "getopt.sh" -- "${@}")
if [[ ${?} -ne 0 ]]; then
	printf -- "\n${*}\n" >&2
	printf -- "${script_name}: you specified an invalid option\n\n" >&2
	usage >&2
	exit 1
fi
eval set -- "${opts}"
while true; do
	case "${1}" in
	-n|--name)
		shift;
		if [[ -n "${1}" && "${group}" == "" ]]; then
			name="${1}"
			shift;
		else
			printf "You cannot specify both --group and --name\n" >&2
			exit 1
		fi
		;;
	-g|--group)
		shift;
		if [[ -n "${1}" && "${name}" == "" ]]; then
			group="${1}"
			shift;
		else
			printf "You cannot specify both --group and --name\n" >&2
			exit 1
		fi
		;;
	-o|--with-options)
		shift;
		with_options=1
		;;
	--)
		shift;
		break;
		;;
	esac
done

if [[ ! -d "${pbench_run}" ]]; then
	warn_log "The ${pbench_run} directory does not exist"
	exit 0
fi

# list tools in one or all groups
if [[ -z "${group}" ]]; then
	groups=$(gen_tools_group_list)
else
	groups="${group}"
fi
if [[ -z ${name} ]]; then
	for group in ${groups}; do
		tools=""
		tool_group_dir="$(gen_tools_group_dir "${group}")"
		for dirent in $(/bin/ls -1 ${tool_group_dir}); do
			if [[ "${dirent}" == "__trigger__" ]]; then
				# Ignore trigger files
				continue
			elif [[ ! -d ${tool_group_dir}/${dirent} ]]; then
				warn_log "[$script_name] ${dirent} is NOT a directory in ${tool_group_dir}; that should not happen. Please consider deleting it."
				continue
			fi
			hostdir="${dirent}"
			host_tools=""
			for toolent in $(/bin/ls -1 ${tool_group_dir}/${hostdir}); do
				if [[ "${toolent}" == "__label__" ]]; then
					# We ignore labels
					continue
				fi
				if [[ "${toolent##*.}" == "__noinstall__" ]]; then
					# Ignore the "no-install" symlink markers
					continue
				fi
				host_tools="${host_tools},${toolent}"
				if [[ ${with_options} -eq 1 ]]; then
					host_tools="${host_tools} $(cat ${tool_group_dir}/${hostdir}/${toolent})"
				fi
			done

			if [[ "${hostdir}" == "localhost" ]]; then
				tools="${tools},${host_tools}"
			else
				tools="${tools},${hostdir}[${host_tools}]"
			fi
		done
		tools="${tools#,*}"
		# do not print anything for this group if there are no tools
		if [[ ! -z "$tools" ]]; then
			printf -- "%s: %s\n" "${group}" "${tools}"
		fi
	done
else
	# List the groups which include this tool
	group_list=""
	for agroup in ${groups}; do
		tg_dir="$(gen_tools_group_dir ${agroup})"
		if [[ ${?} -ne 0 || -z "${tg_dir}" ]]; then
			error_log "[${script_name}] bad or missing tools group \"${agroup}\""
			continue
		fi
		# Check to see if the tool is in any of the hosts.
		/bin/ls -1 ${tg_dir}/*/${name} > /dev/null 2>&1
		if [[ ${?} -eq 0 ]]; then
			if [[ -z ${group_list} ]]; then
				group_list="${agroup}"
			else
				group_list="${group_list} ${agroup}"
			fi
		fi
	done
	printf "tool name: ${name}, groups: ${group_list}\n"
fi
exit 0
