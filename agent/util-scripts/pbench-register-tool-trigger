#!/bin/bash
# -*- mode: shell-script; indent-tabs-mode: t; sh-basic-offset: 8; sh-indentation: 8; sh-indent-for-case-alt: + -*-

script_path="$(dirname ${0})"
script_name="$(basename ${0})"
pbench_bin="$(realpath -e ${script_path}/..)"

# source the base script
. "${pbench_bin}"/base

# The sole purpose of this script is to register tool triggers for a given
# tool group of your choosing.  During the execution of a benchmark, the
# output of the benchmark is used to trigger the starting of tools and the
# stopping of tools.
#
# For a list of performance tools, look at the ${pbench_bin}/tool-scripts
# directory.

# Defaults
group="default"
start_trigger=""
stop_trigger=""

function usage() {
	printf -- "usage:\n"
	printf -- "${script_name} --group=<tool group> --start-trigger=<string to match> --stop-trigger=<string to match>\n"
}

# Process options and arguments
opts=$(getopt -q -o h --longoptions "help,group:,start-trigger:,stop-trigger:" -n "getopt.sh" -- "${@}")
if [[ ${?} -ne 0 ]]; then
	printf -- "\n${*}\n" >&2
	printf -- "${script_name}: you specified an invalid option\n\n" >&2
	usage >&2
	exit 1
fi

eval set -- "${opts}"
while true; do
	case "${1}" in
	--start-trigger)
		shift
		if [[ -n "${1}" ]]; then
			start_trigger="${1}"
			shift
		fi
		;;
	--stop-trigger)
		shift
		if [[ -n "${1}" ]]; then
			stop_trigger="${1}"
			shift
		fi
		;;
	--group)
		shift
		if [[ -n "${1}" ]]; then
			group="${1}"
			shift
		fi
		;;
	-h|--help)
		usage
		exit 0
		;;
	--)
		shift
		break
		;;
	*)
		shift
		;;
	esac
done

tg_dir=$(verify_tool_group "${group}")
if [[ ${?} -ne 0 || -z "${tg_dir}" ]]; then
	printf "${script_name}: a tools group is required\n" >&2
	usage >&2
	exit 1
fi
if [[ -z "${start_trigger}" || -z "${stop_trigger}" ]]; then
	printf "${script_name}: both --start-trigger and --stop-trigger are required\n" >&2
	usage >&2
	exit 1
fi
if [[ "${start_trigger}" != "${start_trigger%%:*}" ]]; then
	printf "${script_name}: the start trigger cannot have a colon in it: \"${start_trigger}\"\n" >&2
	exit 1
fi
if [[ "${stop_trigger}" != "${stop_trigger%%:*}" ]]; then
	printf "${script_name}: the stop trigger cannot have a colon in it: \"${stop_trigger}\"\n" >&2
	exit 1
fi

# Remember this trigger
printf -- "%s:%s\n" "${start_trigger}" "${stop_trigger}" > "${tg_dir}/__trigger__"
printf -- "tool trigger strings for start: \"${start_trigger}\" and for stop: \"${stop_trigger}\" are now registered for tool group: \"${group}\"\n"
exit 0
