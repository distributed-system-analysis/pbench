#!/bin/bash
# -*- mode: shell-script; indent-tabs-mode: t; sh-basic-offset: 4; sh-indentation: 4; sh-indent-for-case-alt: + -*-

script_path=`dirname $0`
script_name=`basename $0`
pbench_bin="`cd ${script_path}/..; /bin/pwd`"

# source the base script
. "$pbench_bin"/base

function usage() {
    printf "usage:\n"
    printf "$script_name [--prefix=<path>] [--xz-single-threaded] [--show-server]\n"
}

# Process options and arguments
opts=$(getopt -q -o p:xS --longoptions "prefix:,xz-single-threaded,show-server" -n "getopt.sh" -- "$@");
if [ $? -ne 0 ]; then
    printf "\n"
    printf "%s\n" $*
    printf "$script_name: you specified an invalid option\n\n"
    usage

    exit 1
fi

xz_single_threaded=
show_server=
eval set -- "$opts";
while true; do
    case "$1" in
        -p|--prefix)
            shift;
            if [ -n "$1" ]; then
                prefix="$1"
                shift;
            fi
            ;;
	-x|--xz-single-threaded)
	    shift;
	    xz_single_threaded=1
	    ;;
	-S|--show-server)
	    shift;
	    show_server=1
	    ;;	
        --)
            shift;
            break;
            ;;
    esac
done

if [ ! -d "$pbench_run" ]; then
    error_log "ERROR: pbench local results directory does not exist: $pbench_run"
    exit 1
fi

if [ ! -f "$pbench_bin/id_rsa" ]; then
	error_log "ERROR: $pbench_bin/id_rsa required for moving results to archive host"
	exit 1
fi

results_webserver=$(getconf.py webserver results)
if [ -z "$results_webserver" ]; then
    error_log "ERROR: No web server host configured from which we can fetch the FQDN of the host to which we copy/move results"
    debug_log "\"webserver\" variable in \"results\" section not set"
    exit 1
fi

ver=$(yum info installed pbench-agent 2> /dev/null | grep Version | awk '{ print $3 }')
if [ -z "$ver" ]; then
    ver="unknown"
fi
rel=$(yum info installed pbench-agent 2> /dev/null | grep Release | awk '{ print $3 }')
if [ -z "$ver" ]; then
    rel="unknown"
fi
# User-Agent HTTP header: <pbench-agent-ver-rel>:<FQDN>:<$USER>:<full path of this script>""
user_agent="pbench-agent-$ver-$rel:$(hostname -f):$USER:$0"

results_host_info_url=$(getconf.py host_info_url results)
results_host_info=$(curl -s -A "$user_agent" -L "$results_host_info_url")
if [ -z "$results_host_info" ]; then
    error_log "ERROR: unable to determine results host info from $results_host_info_url"
    debug_log "the curl -A \"$user_agent\" -L \"$results_host_info_url\" command failed for some unknown reason"
    exit 1
fi

#
# The results host info should be in the form:
#
#     <results_user>@<results_host(FQDN)>:<results_path>
#
# if the host is up and running, ready to receive results.
#
# If the target host is not ready, then it will provide a one line message of the following form:
#
#     MESSAGE===<text to be display to the user>
#
sysmsg=${results_host_info%%===*}
if [ $sysmsg = "MESSAGE" ]; then
    echo "*** Message from sysadmins of $results_webserver:"
    echo "***"
    echo "*** ${results_host_info##*===}"
    echo "***"
    echo "*** No local actions taken."
    exit 1
fi
results_repo=${results_host_info%%:*}
results_user=${results_repo%%@*}
if [ -z "$results_user" ]; then
    debug_log "Defaulting to \"pbench\" for the \"results_user\""
    results_user="pbench"
    results_host="$results_repo"
    # Reconstruct the expected results_repo
    results_repo=$results_user@$results_host
fi

results_path_prefix=${results_host_info##*:}
if [ -z "$results_path_prefix" ]; then
    error_log "ERROR: fetch results host info did not contain a path prefix: $results_host_info"
    debug_log "expected the results_host_info to have the form: <results_user>@<results_host(FQDN)>:<results_path_prefix>"
    exit 1
fi
results_full_path="$results_path_prefix/$hostname"

if [[ ! -z "$show_server" ]] ;then
    echo ${results_repo}
    exit 0
fi

# ssh probe test
ssh -q -i $pbench_bin/id_rsa $ssh_opts $results_repo exit
if [ $? -ne 0 ]; then
    error_log "ERROR: results host unreachable: $results_repo"
    debug_log "the following ssh command failed: \"ssh -q -i $pbench_bin/id_rsa $ssh_opts $results_repo exit\""
    exit 1
fi
ssh -i $pbench_bin/id_rsa $ssh_opts $results_repo "mkdir -p $results_full_path"
if [ $? -ne 0 ]; then
    error_log "ERROR: unable to create remote results path, $results_repo:$results_full_path"
    exit 1
fi

let runs_copied=0
let failures=0

trap "rm -f $pbench_tmp/prefix.*" EXIT INT QUIT


# Move into pbench run collection directory
pushd $pbench_run >/dev/null

for dir in `/bin/ls -ort -d */ | awk '{print $8}' | grep -v "^tools-" | grep -v "^tmp/"`; do
    pbench_run_name=${dir%%/*}
    if [ -f $pbench_run_name.copied ]; then
        debug_log "Already copied $pbench_run/$pbench_run_name"
        continue
    fi

    # if the benchmark is still running in this directory, then skip it
    if [ -d $pbench_run_name/.running ]; then
        debug_log "The benchmark is still running in $pbench_run_name - skipping"
        debug_log "If that is not true, rmdir $pbench_run_name/.running and try again"
        continue
    fi

    # Any result where tools or benchmark results were used get the pbench
    # logfile so it can be referenced later if needed.
    if [ -e pbench.log ]; then
        /bin/cp pbench.log $pbench_run_name/
    fi

    results_size=`du -sm $pbench_run_name | awk '{print $1}'`
    debug_log "preparing to copy $results_size MB of data from $pbench_run/$pbench_run_name"

    tarball="$pbench_run_name.tar.xz"
    if [[ ${xz_single_threaded} != "1" ]] ;then
	echo "tar --create --force-local \"$pbench_run_name\" | xz -T0 > \"$tarball\" "
	tar --create --force-local "$pbench_run_name" | xz -T0 > "$tarball"
    else
	echo "tar --create --xz --force-local --file=\"$tarball\" \"$pbench_run_name\" "
	tar --create --xz --force-local --file="$tarball" "$pbench_run_name" 
    fi
    
    if [ $? -ne 0 ]; then
        error_log "ERROR: tar failed for $pbench_run/$pbench_run_name, skipping"
        rm -f "$tarball"
        let failures=failures+1
        continue
    fi
    md5sum "$tarball" > "$tarball.md5"
    if [ $? -ne 0 ]; then
        error_log "ERROR: md5sum failed for $tarball, skipping"
        rm -f $tarball $tarball.md5
        let failures=failures+1
        continue
    fi

    # Perform the actual copy
    # if a prefix is provided, copy it to the other side - maybe this should be part of the tarball?
    prefixfile=""
    if [ ! -z "$prefix" ] ;then
        prefixfile=$pbench_tmp/prefix.$pbench_run_name
        echo "$prefix" > $prefixfile
    fi

    ssh -i $pbench_bin/id_rsa $ssh_opts $results_repo "mkdir -p $results_full_path"

    # check if there is a name collision and resolve it
    typeset -i i=1
    rtarball=$tarball
    rprefixfile=$prefixfile
    while (( 1 )) ; do
        ssh -i $pbench_bin/id_rsa $ssh_opts $results_repo "test -f $results_full_path/$rtarball"
        if [ $? -eq 0 ] ;then
            # collision - warn the first time around
            if [ $i -eq 1 ] ;then
                log "WARNING: name collision - $results_repo:$results_full_path/$rtarball exists"
            fi
        else
            # collision resolution found
            if [ "$tarball" != "$rtarball" ] ;then
                mv $tarball $rtarball
                mv $tarball.md5 $rtarball.md5
                tarball=$rtarball
                if [ ! -z "$prefixfile" ]; then
                    mv $prefixfile $rprefixfile
                    prefixfile=$rprefixfile
                fi
            fi
            break
        fi
        rtarball="DUPLICATE__NAME.$i.$pbench_run_name.tar.xz"
        if [ ! -z "$prefixfile" ] ;then
            rprefixfile="$prefixfile.$i"
        fi
        i=$i+1
    done

    # FIXME: don't assume final path contains /incoming in it
    if [[ $i -eq 1 ]]; then
        if [[ ! -z "$prefix" ]]; then
            debug_log "copying $tarball to http://$results_webserver/results/$hostname/$prefix/..."
        else
            debug_log "copying $tarball to http://$results_webserver/results/$hostname/..."
        fi
    else
        debug_log "archiving $tarball to $results_webserver, but not being made available via the web"
    fi

    # finally do the copy
    scp $scp_opts -i $pbench_bin/id_rsa $ssh_opts ./$tarball ./$tarball.md5 $prefixfile $results_repo:$results_full_path
    if [ $? -ne 0 ]; then
        error_log "ERROR: unable to copy results tarball, $tarball, to $results_repo:$results_full_path"
        rm -f $tarball $tarball.md5
        let failures=failures+1
        continue
    fi

    # clean up the prefix file (if present)
    if [ ! -z "$prefixfile" -a -f "$prefixfile" ] ;then
        rm -f $prefixfile
    fi

    # Verify the bits copied are good
    ssh -i $pbench_bin/id_rsa $ssh_opts $results_repo "cd $results_full_path; md5sum --check $pbench_run_name.tar.xz.md5"
    chk_res=$?
    rm -f $tarball $tarball.md5
    if [ $chk_res -ne 0 ]; then
        error_log "ERROR: remote copy failed, remote tarball MD5 does not match original"
        rm -f $tarball $tarball.md5
        let failures=failures+1
        continue
    else
        if [ "$script_name" == "pbench-move-results" ]; then
            rm -rf $pbench_run_name
        else
            touch $pbench_run_name.copied
        fi
    fi

    # make a symlink in the remote TODO directory so that the tarball will be unpacked by the cron job
    ssh -i $pbench_bin/id_rsa $ssh_opts $results_repo \
        "mkdir -p $results_full_path/TODO; cd $results_full_path/TODO; ln -s $results_full_path/$tarball ."

    let runs_copied=runs_copied+1
done

popd >/dev/null

let anything=runs_copied+failures
if [ $anything -gt 0 ]; then
    if [ "$script_name" == "pbench-move-results" ]; then
        op="moved"
    else
        op="copied"
    fi
    debug_log "successfully $op $runs_copied runs, encountered $failures failures"
fi
exit $failures
