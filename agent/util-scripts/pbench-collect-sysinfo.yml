---
- hosts: remote
  user: root
  vars:
    - sysinfo_path: "{{ SYSINFO_PATH }}"
  tasks:
    - name: Install sos
      shell: yum install sos ethtool -y
    - name: create sysinfo dir
      file: path="{{ sysinfo_path }}" state=directory
    - name: get sos_version
      shell: rpm -q sos | awk -F- '{print $2}' | awk -F. '{print $1}'
      register: sos_ver
    - name: get sos_version
      shell: rpm -q sos | awk -F- '{print $2}' | awk -F. '{print $2}'
      register: sosreport_ver
    - name: copy validity check script
      copy: src=/opt/pbench-agent/util-scripts/sosreport.py dest=/tmp/sosreport.py
    - name: check libvirt compatability
      command: python3 /tmp/sosreport.py libvirt
      register: plugin1
    - name: check lstopo compatability
      command: python3 /tmp/sosreport.py lstopo
      register: plugin2
    - name: flags check
      set_fact:
        flag: '-o'
      when: plugin1.stdout == "libvirt"
    - name: flag check
      set_fact:
        flag: ' '
      when: plugin2.stdout != "libvirt"
    - name: flags check
      set_fact:
        flags: '-o'
      when: plugin2.stdout == "lstopo"
    - name: set flags
      set_fact:
        flags: ' '
      when: plugin2.stdout != "lstopo"
    - name: run sos report
      shell: sosreport -o general -o kernel -o filesys -o devicemapper -o system -o memory -o hardware -o networking -o lsbrelease -o block -o processor -o tuned {{ flag }} {{ plugin1.stdout }} {{ flags }} {{ plugin2.stdout }} --batch --quiet --tmp-dir "{{ sysinfo_path }}"
      when: sos_ver.stdout == "3" and sosreport_ver != "0"
    - name: run sos report 
      shell: sosreport -o general -o kernel -o filesys -o devicemapper -o system -o memory -o hardware -o networking -o lsbrelease -o block -o processor {{ flag }} {{ plugin1.stdout }} {{ flags }} {{ plugin2.stdout }} --batch --quiet --tmp-dir "{{ sysinfo_path }}"
      when: sos_ver.stdout == "3" and sosreport_ver == "0"
    - name: run sos report 
      shell: sosreport -o general -o kernel -o filesys -o devicemapper -o system -o memory -o hardware -o networking -o lsbrelease {{ flag }} {{ plugin1.stdout }} {{ b }} {{ plugin2.stdout }} --batch --quiet --tmp-dir "{{ sysinfo_path }}"
      when: sos_ver.stdout != "3"
    - name: check if label exists
      stat: path=/var/lib/pbench-agent/tools-default/label
      register: getlabel
    - name: getting the label
      command: cat "/var/lib/pbench-agent/tools-default/label"
      register: label
      when: getlabel.stat.exists == True
    - name: create sysinfo dir with label on controller
      local_action: shell mkdir "{{ sysinfo_path }}/{{ label.stdout }}:{{ ansible_hostname }}" 
      when: getlabel.stat.exists == True
    - name: create sysinfo direc
      local_action: shell  mkdir "{{ sysinfo_path }}/{{ ansible_hostname }}" 
      when: getlabel.stat.exists == False
    - name: create ethtool dir
      file: path="{{ sysinfo_path }}/ethtool" state=directory
    - name: ethtool results
      shell: for i in `/bin/ls /sys/class/net`;do ethtool -g $i >{{ sysinfo_path }}/ethtool/$i.txt; ethtool -c $i >>{{ sysinfo_path }}/ethtool/$i.txt; done
      ignore_errors: yes
    - name: block results
      shell:  for n in /sys/block/[s,h,v]d\*[a-z]/; do find $n  -type f -printf "%p " -exec cat '{}' \; done >{{ sysinfo_path }}/ethtool/block-params.log
      ignore_errors: yes
    - name: Sync results
      synchronize:
        src: "{{ sysinfo_path  }}/"
        dest: "{{ sysinfo_path }}/{{ label.stdout }}:{{ ansible_hostname }}"
        mode: pull
        archive: yes
      when: getlabel.stat.exists == True
    - name: Sync results
      synchronize:
        src: "{{ sysinfo_path  }}/"
        dest: "{{ sysinfo_path }}/{{ ansible_hostname }}"
        mode: pull
        archive: yes
      when: getlabel.stat.exists == False
