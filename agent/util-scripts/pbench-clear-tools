#!/bin/bash
# -*- mode: shell-script; indent-tabs-mode: t; sh-basic-offset: 8; sh-indentation: 8; sh-indent-for-case-alt: + -*-

script_path="$(dirname ${0})"
script_name="$(basename ${0})"
pbench_bin="$(realpath -e ${script_path}/..)"

# source the base script
. "$pbench_bin"/base

# This script will remove tools that have been registered.  If no options are
# used, then all tools from the "default" tool group are removed.  Specifying
# a tool name and/or remote host will limit the scope of the removal.

# Defaults
def_group="default"
group="${def_group}"
name=""
remotes_arg=""

function usage() {
	printf -- "usage:\n"
	printf -- "${script_name} --name=<tool-name> [--group=<group-name>] [--remotes=<remote-host>[,<remote-host>]]\n"
	printf -- "\nThe following options are available:\n"
	printf -- "\t-g str --group=str, str = the group from which tools should be removed\n"
	printf -- "\t\t(the default group is '%s')\n" "${def_group}"
	printf -- "\t-n str --name=str, str = a specific tool to be removed.\n"
	printf -- "\t\tIf no tool is specified, all tools in the group are removed\n"
	printf -- "\t-r str --remote=str, str = a specific remote on which tools needs to be cleared.\n"
	printf -- "\t\tIf no remote is specified, all the tools on all remotes are removed\n\n"
}

# Process options and arguments

opts=$(getopt -q -o hg:n:r: --longoptions "help,group:,name:,remote:,remotes:" -n "getopt.sh" -- "${@}")
if [[ ${?} -ne 0 ]]; then
	printf -- "\n${*}\n" >&2
	printf -- "${script_name}: you specified an invalid option\n\n" >&2
	usage >&2
	exit 1
fi
eval set -- "${opts}"
while true; do
	case "${1}" in
	-n|--name)
		shift
		if [[ -n "${1}" ]]; then
			name="${1}"
			shift
		fi
		;;
	-g|--group)
		shift
		if [[ -n "${1}" ]]; then
			group="${1}"
			shift
		fi
		;;
	-r|--remote|--remotes)
		shift
		if [[ -n "${1}" ]]; then
			remotes_arg="${1}"
			shift
		fi
		;;
	-h|--help)
		usage
		exit 0
		;;
	--)
		shift
		break
		;;
	esac
done

tools_group_dir=$(verify_tool_group "${group}")
if [[ ${?} -ne 0 ]]; then
	printf -- "\n" >&2
	usage >&2
	exit 1
fi

IFS=',' read -ra remotes <<< "${remotes_arg}"
if [[ ${#remotes[@]} == 0 ]]; then
	# We were not given any remotes on the command line, build the list
	# from the tools group directory.
	typeset -i idx=0
	for remote in $(/bin/ls ${tools_group_dir}); do
		if [[ "${remote}" == __trigger__ ]]; then
			continue
		fi
		if [[ ! -d "${tools_group_dir}/${remote}" ]]; then
			warn_log "Unexpected file found in ${tools_group_dir}: ${remote}"
			continue
		fi
		remotes[${idx}]=${remote}
		(( idx++ ))
	done
fi

function clear_tool() {
	local tname=${1}
	local remote=${2}
	local tpath=${tools_group_dir}/${remote}/${tname}

	/bin/rm ${tpath}
	local rc=${?}
	if [[ ${rc} == 0 && -e ${tpath}.__noinstall__ ]]; then
		/bin/rm ${tpath}.__noinstall__
		rc=${?}
	fi
	if [[ ${rc} != 0 ]]; then
		error_log "Failed to clear tool ${tpath}.*"
		return 1
	else
		msg="Removed \"${tname}\" from host, \"${remote}\", in tools group, \"${group}\""
		echo "${msg}"
		log "${msg}"
	fi
	return 0
}

typeset -i nerrs=0
for remote in ${remotes[@]}; do
	if [[ ! -d ${tools_group_dir}/${remote} ]]; then
		# Ignore any specified remote that does not exist.
		warn_log "The given remote host, \"${remote}\", is not a directory in ${tools_group_dir}."
		continue
	fi

	declare -A names
	if [[ -n ${name} ]]; then
		# Use the given tool name from the command line
		names[0]=${name}
	else
		# Discovery all the tools registered for this remote
		typeset -i idx=0
		for _name in $(/bin/ls ${tools_group_dir}/${remote}); do
			if [[ "${_name}" =~ .+\.__noinstall__ || "${_name}" == "__label__" ]]; then
				# Skip __label__ and *.__noinstall__ files,
				# everything else is a tool name.
				continue
			fi
			names[${idx}]=${_name}
			(( idx++ ))
		done
	fi
	for _name in ${names[@]}; do
		clear_tool ${_name} ${remote}
		if [[ ${?} -ne 0 ]]; then
			(( nerrs++ ))
		fi
	done
	tools_files=$(/bin/ls ${tools_group_dir}/${remote})
	if [[ "${tools_files}" == "__label__" ]]; then
		/bin/rm ${tools_group_dir}/${remote}/__label__
		if [[ ${?} -ne 0 ]]; then
			error_log "Failed to remove label for remote ${tools_group_dir}/${remote}"
			(( nerrs++ ))
		fi
		tools_files=""
	fi
	if [[ -z "${tools_files}" ]]; then
		msg="All tools removed from host, \"${remote}\""
		echo "${msg}"
		log "${msg}"
		/bin/rmdir ${tools_group_dir}/${remote}
		if [[ ${?} -ne 0 ]]; then
			error_log "Failed to remove remote directory ${tools_group_dir}/${remote}"
			(( nerrs++ ))
		fi
	fi
done

exit ${nerrs}
