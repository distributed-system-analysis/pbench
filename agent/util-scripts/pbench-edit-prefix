#!/bin/bash
# -*- mode: shell-script; indent-tabs-mode: t; sh-basic-offset: 4; sh-indentation: 4 -*-

script_path=`dirname $0`
script_name=`basename $0`
pbench_bin="`cd ${script_path}/..; /bin/pwd`"

# source the base script
. "$pbench_bin"/base

function usage() {
    printf "usage:\n"
    printf "$script_name --prefix=<path> <result name> ...\n"
}

# Process options and arguments
opts=$(getopt -q -o p: --longoptions "prefix:" -n "getopt.sh" -- "$@");
if [ $? -ne 0 ]; then
    printf "\n"
    printf "%s\n" $*
    printf "$script_name: you specified an invalid option\n\n"
    usage

    exit 1
fi

prefix=""
eval set -- "$opts";
while true; do
    case "$1" in
	-p|--prefix)
	    shift;
	    if [ -n "$1" ]; then
		prefix="$1"
		shift;
	    fi
	    ;;
	--)
	    shift;
	    break;
	    ;;
    esac
done

if [ -z "$prefix" ] ;then
    usage
    exit 1
fi

if [ ! -d "$pbench_run" ]; then
    error_log "ERROR: pbench local results directory does not exist: $pbench_run"
    exit 1
fi

if [ ! -f "$pbench_bin/id_rsa" ]; then
	error_log "ERROR: $pbench_bin/id_rsa required for moving results to archive host"
	exit 1
fi

results_webserver=$(getconf.py webserver results)
if [ -z "$results_webserver" ]; then
    error_log "ERROR: No web server host configured from which we can fetch the FQDN of the host to which we copy/move results"
    debug_log "\"webserver\" variable in \"results\" section not set"
    exit 1
fi

ver=$(yum info installed pbench-agent 2> /dev/null | grep Version | awk '{ print $3 }')
if [ -z "$ver" ]; then
    ver="unknown"
fi
rel=$(yum info installed pbench-agent 2> /dev/null | grep Release | awk '{ print $3 }')
if [ -z "$ver" ]; then
    rel="unknown"
fi
# User-Agent HTTP header: <pbench-ver-rel>:<FQDN>:<$USER>:<full path of this script>""
user_agent="pbench-$ver-$rel:$(hostname -f):$USER:$0"

results_host_info_url="http://$results_webserver/pbench-results-host-info.versioned/pbench-results-host-info.URL001"
results_host_info=$(curl -s -A "$user_agent" -L "$results_host_info_url")
if [ -z "$results_host_info" ]; then
    error_log "ERROR: unable to determine results host info from $results_host_info_url"
    debug_log "the curl -A \"$user_agent\" -L \"$results_host_info_url\" command failed for some unknown reason"
    exit 1
fi

#
# The results host info should be in the form:
#
#     <results_user>@<results_host(FQDN)>:<results_path>
#
# if the host is up and running, ready to receive results.
#
# If the target host is not ready, then it will provide a one line message of the following form:
#
#     MESSAGE===<text to be display to the user>
#
sysmsg=${results_host_info%%===*}
if [ $sysmsg = "MESSAGE" ]; then
    echo "*** Message from sysadmins of $results_webserver:"
    echo "***"
    echo "*** ${results_host_info##*===}"
    echo "***"
    echo "*** No local actions taken."
    exit 1
fi
results_repo=${results_host_info%%:*}
results_user=${results_repo%%@*}
if [ -z "$results_user" ]; then
    debug_log "Defaulting to \"pbench\" for the \"results_user\""
    results_user="pbench"
    results_host="$results_repo"
    # Reconstruct the expected results_repo
    results_repo=$results_user@$results_host
fi

results_path_prefix=${results_host_info##*:}
if [ -z "$results_path_prefix" ]; then
    error_log "ERROR: fetch results host info did not contain a path prefix: $results_host_info"
    debug_log "expected the results_host_info to have the form: <results_user>@<results_host(FQDN)>:<results_path_prefix>"
    exit 1
fi
results_full_path="$results_path_prefix/$hostname"

# ssh probe test
ssh -q -i $pbench_bin/id_rsa $ssh_opts $results_repo exit
if [ $? -ne 0 ]; then
    error_log "ERROR: results host unreachable: $results_repo"
    debug_log "the following ssh command failed: \"ssh -q $results_repo exit\""
    exit 1
fi

ssh -i $pbench_bin/id_rsa $ssh_opts $results_repo "mkdir -p $results_full_path"
if [ $? -ne 0 ]; then
    error_log "ERROR: unable to create remote results path, $results_repo:$results_full_path"
    exit 1
fi

let runs_copied=0
let failures=0

for arg in $* ;do
    pbench_run_name=$(basename $arg)
    basedir=$(dirname $arg)
    prefixfile=""
    if [ ! -z "$prefix" ] ;then
	# use ./ to avoid problems with the colons in the pbench_run_name
	echo "mkdir -p $prefix; mv $arg $prefix" > ./prefix.$pbench_run_name
	prefixfile=./prefix.$pbench_run_name
    else
	usage
	exit 1
    fi

    # check that the tarball exists
    tarball=$pbench_run_name.tar.xz
    ssh -i $pbench_bin/id_rsa $ssh_opts $results_repo "test -f $results_full_path/$tarball"
    if [ $? -ne 0 ] ;then
	error_log "ERROR: no $results_full_path/$tarball"
	let failures=failures+1
	continue
    fi

    # check that the link exists
    path=/pbench/public_html/results/$(hostname -s)
    ssh -i $pbench_bin/id_rsa $ssh_opts $results_repo "test -L $path/$basedir/$pbench_run_name"
    if [ $? -ne 0 ] ;then
	error_log "ERROR: no $results_full_path/$tarball"
	let failures=failures+1
	continue
    fi


    # copy prefix file to remote
    scp -i $pbench_bin/id_rsa $ssh_opts $prefixfile $results_repo:$results_full_path/.prefix
    if [ $? -ne 0 ]; then
	error_log "ERROR: unable to copy  $prefixfile to $results_repo:$results_full_path"
	let failures=failures+1
	continue
    fi

    # make a symlink in the remote TO-LINK directory so that the tarball will be unpacked by the cron job
    ssh -i $pbench_bin/id_rsa $ssh_opts $results_repo \
        "mkdir -p $results_full_path/TO-LINK; cd $results_full_path/TO-LINK; ln -s $results_full_path/$tarball ."

    let runs_copied=runs_copied+1
done

let anything=runs_copied+failures
if [ $anything -gt 0 ]; then
    debug_log "successfully added prefix to $runs_copied runs, encountered $failures failures"
fi
exit 0
