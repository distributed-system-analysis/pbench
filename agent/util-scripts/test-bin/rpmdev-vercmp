#!/bin/bash

args="${@}"
echo "${0} ${args}" >> ${_testlog}

# Usage: rpmdev-vercmp <EVR1> <EVR2>
#
# Exit status is 0 if the EVR's are equal, 11 if EVR1 is newer, and 12 if EVR2
# is newer.
#
# E.g.:
#   $ rpmdev-vercmp fio-3.21 fio-3.22
#   fio-3.21 < fio-3.22
#   $ rpmdev-vercmp fio-3.22 fio-3.22
#   fio-3.22 == fio-3.22
#   $ rpmdev-vercmp fio-3.23 fio-3.22
#   fio-3.23 > fio-3.22
#   $

# We are mocking the behavior of rpmdev-vercmp where the behavior of this
# mock is directed by the 2nd arguments name.  This allows specific test
# cases to request a certain behavior from rpmdev-vercmp.

if [[ "${2}" == "not-greater-equal-1.0.0" ]]; then
    echo "${1} < ${2}"
    _rc=12
elif [[ "${2}" == "greater-equal-1.0.0" || "${2}" == "greater-1.0.0" ]]; then
    echo "${1} > ${2}"
    _rc=11
elif [[ "${2}" == "not-greater-1.0.0" ]]; then
    echo "${1} == ${2}"
    _rc=0
elif [[ "${1}" == "${2}" ]]; then
    # Mimic behavior of rpmdev-vercmp by exiting with 0 (for unit tests we
    # typically are given exact matches).
    echo "${1} == ${2}"
    _rc=0
else
    # If we are not given an exact match, we always report that the 1st
    # argument is greater than the 2nd.
    echo "${1} > ${2}"
    _rc=11
fi

exit ${_rc}
