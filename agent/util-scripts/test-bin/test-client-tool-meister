#!/bin/bash

_script_path="$(dirname ${0})"
pbench_bin="$(realpath -e ${_script_path}/..)"

# source the base script
. "${pbench_bin}"/base

if [[ -z "${_pbench_full_hostname}" ]]; then
    printf -- "Missing '_pbench_full_hostname' environment variable" >&2
    exit 1
fi
export _pbench_full_hostname

if [[ -z "${_pbench_hostname}" ]]; then
    printf -- "Missing '_pbench_hostname' environment variable" >&2
    exit 1
fi
export _pbench_hostname

if [[ -z "${1}" ]]; then
     group="default"
else
     group="${1}"
fi

sysinfo="block,security_mitigations,sos"

function register {
    if [[ -z "${2}" ]]; then
        local remote_arg=""
    else
        local remote_arg=" --remote ${2}"
    fi
    if [[ -z "${3}" ]]; then
        local label_arg=""
    else
        local label_arg=" --label ${3}"
    fi
    if [[ "${1}" == "node-exporter" || "${1}" == "dcgm" ]]; then
        pbench-register-tool --group "${group}" --name ${1}${remote_arg}${label_arg} -- --inst=${_script_path}
    else
        pbench-register-tool --group "${group}" --name ${1}${remote_arg}${label_arg} -- --interval=42 --options=forty-two
    fi
    status=${?}
    if [[ ${status} -ne 0 ]]; then
        printf -- "ERROR - \"pbench-register-tool --group %s --name %s\" failed to execute successfully (exit code: %s)\n" "${group}" "${1}${remote_arg}${label_arg}" "${status}" >&2
        exit 1
    fi
}

# Always register local tools, transient and persistent
register mpstat
register dcgm

if [[ "${2}" == "with-remotes" ]]; then
    register mpstat remote_a.example.com
    register mpstat remote_b.example.com blue
    register node-exporter remote_b.example.com blue
    register dcgm remote_c.example.com red
    register pcp remote_c.example.com red
fi

# We created the benchmark_run_dir directory as the tool meister expects it to
# exist.
mkdir ${benchmark_run_dir}
status=${?}
if [[ ${status} -ne 0 ]]; then
    printf -- "ERROR - \"mkdir %s\" failed to execute successfully (exit code: %s)\n" "${benchmark_run_dir}" "${status}" >&2
    exit 1
fi

function _timeout {
    timeout --kill-after=10 --signal TERM 20 $*
}

source ${_script_path}/common-tm-cleanup

PBENCH_TM_BIND_HOSTNAME="localhost" _timeout pbench-tool-meister-start --sysinfo="${sysinfo}" "${group}"
status=${?}
if [[ ${status} -ne 0 ]]; then
    printf -- "ERROR - \"pbench-tool-meister-start --sysinfo='%s' '%s'\" failed to execute successfully (exit code: %s)\n" "${sysinfo}" "${group}" "${status}" >&2
    exit 1
fi

sample="sample42"
iterations="0-iter-zero 1-iter-one"

> ${benchmark_run_dir}/.iterations

for iteration in ${iterations}; do
    echo "${iteration}" >> ${benchmark_run_dir}/.iterations
    benchmark_results_dir="${benchmark_run_dir}/${iteration}/${sample}"
    mkdir -p ${benchmark_results_dir}
    status=${?}
    if [[ ${status} -ne 0 ]]; then
        printf -- "ERROR - failed to create tool directory, '%s' (exit code: %s)\n" "${benchmark_results_dir}" "${status}" >&2
        exit 1
    fi
    _timeout pbench-start-tools --group="${group}" --dir="${benchmark_results_dir}"
    status=${?}
    if [[ ${status} -ne 0 ]]; then
        printf -- "ERROR - \"pbench-start-tools\" failed to execute successfully (exit code: %s)\n" "${status}" >&2
        exit 1
    fi
    _timeout pbench-stop-tools --group="${group}" --dir="${benchmark_results_dir}"
    status=${?}
    if [[ ${status} -ne 0 ]]; then
        printf -- "ERROR - \"pbench-stop-tools\" failed to execute successfully (exit code: %s)\n" "${status}" >&2
        exit 1
    fi
    if [[ "${3}" != "delayed-send" ]]; then
        _timeout pbench-send-tools --group="${group}" --dir="${benchmark_results_dir}"
        status=${?}
        if [[ ${status} -ne 0 ]]; then
            printf -- "ERROR - \"pbench-send-tools\" failed to execute successfully (exit code: %s)\n" "${status}" >&2
            exit 1
        fi
    fi
done

if [[ "${3}" == "delayed-send" ]]; then
    for iteration in ${iterations}; do
        benchmark_results_dir="${benchmark_run_dir}/${iteration}/${sample}"
        _timeout pbench-send-tools --group="${group}" --dir="${benchmark_results_dir}"
        status=${?}
        if [[ ${status} -ne 0 ]]; then
            printf -- "ERROR - \"pbench-send-tools\" failed to execute successfully (exit code: %s)\n" "${status}" >&2
            exit 1
        fi
    done
fi

if [[ "${4}" == "interrupt" ]]; then
    _timeout pbench-tool-meister-stop --sysinfo="${sysinfo}" --interrupt "${group}"
else
    _timeout pbench-tool-meister-stop --sysinfo="${sysinfo}" "${group}"
fi
status=${?}
if [[ ${status} -ne 0 ]]; then
    printf -- "ERROR - \"pbench-tool-meister-stop --sysinfo='%s' '%s'\" failed to execute successfully (exit code: %s)\n" "${sysinfo}" "${group}" "${status}" >&2
    exit 1
fi
