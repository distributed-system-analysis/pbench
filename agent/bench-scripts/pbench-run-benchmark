#!/usr/bin/perl
#
# Author: Andrew Theurer
#
# This is a wrapper script that will run a benchmark for the user by doing the following:
# - validating the benchmark exists
# - validating the benchmark parameters and pbench parameters (via pbench-gen-iterations)
# - constructing a list of benchmark-iterations (via pbench-gen-iterations)
# - executing those iterations, with N sample-executions per iteration (via pbench-run-iteration)
# - run any post-processing for those executions
# - bundle all the data in a JSON document

use strict;
use warnings;
use File::Basename;
my $pbench_lib_path;
BEGIN {
	$pbench_lib_path = `getconf.py pbench_install_dir pbench-agent`;
	chomp $pbench_lib_path;
	$pbench_lib_path .= "/lib";
}
use lib "$pbench_lib_path";
use JSON;
use Data::Dumper;
use PbenchCDM qw(create_run_doc create_config_osrelease_doc create_config_cpuinfo_doc create_config_netdevs_doc create_config_ethtool_doc create_config_base_doc get_uuid create_bench_iter_doc create_config_doc);
use PbenchBase qw(get_json_file put_json_file get_benchmark_names get_pbench_run_dir get_pbench_install_dir get_pbench_config_dir get_pbench_bench_config_dir get_benchmark_results_dir get_params remove_params get_hostname);
use PbenchAnsible qw(ssh_hosts ping_hosts copy_files_to_hosts copy_files_from_hosts remove_files_from_hosts remove_dir_from_hosts create_dir_hosts sync_dir_from_hosts verify_success stockpile_hosts);

# defaults
my $num_samples = 1; 

# the only required [positional] argument is the benchmark name; verify it now
if (scalar @ARGV == 0) {
	print "You must supply at least a benchmark name:\n";
	get_benchmark_names(get_pbench_bench_config_dir);
	exit;
}
my $benchmark = shift(@ARGV);
if ($benchmark eq "list") {
	get_benchmark_names(get_pbench_bench_config_dir);
	exit;
}
# the rest of the parameters are --arg=val, most of which we just pass to other scripts,
# but we need to know a few of them now
my $user_name;
my $user_email;
my $user_desc;
my %params = get_params(@ARGV);
if ($params{"samples"}) {
	$num_samples = $params{"samples"};
}
if ((!$ENV{"USER_NAME"}) and (!$params{"user-name"})) {
	print "\n\n***** Please export USER_NAME=\"<your first and last name>\" (or --user-name=) so it is included in the run data *****\n\n";
	sleep(1);
} else {
	$user_name = $params{"user-name"};
}
if ((!$ENV{"USER_EMAIL"}) and (!$params{"user-email"})) {
	print "\n\n***** Please export USER_EMAIL=\"<your email address\" (or --user-email=) so it is included in the run data *****\n\n";
	sleep(1);
} else {
	$user_email = $params{"user-email"};
}
if (!$params{"desc"}) {
	$user_desc = "";
	print "\n\n***** Please use --desc=key1:value2,key2:value2...keyN:valueN to describe your test configuration, environment, and/or purpose so it is included in the run data *****\n\n";
	sleep(1);
} else {
	$user_desc = $params{"desc"};
}
remove_params(\@ARGV, qw(samples desc user-name user-email)); # we don't want these params passed on to other utils
my %run_doc = create_run_doc($benchmark, join(" ", @ARGV), $params{"clients"}, $params{"servers"},
				$user_desc, $user_name, $user_email,
				"", #todo: include tool hostnames
				""); #todo: include tool names

my $base_bench_dir = get_benchmark_results_dir($benchmark, $user_desc);
mkdir($base_bench_dir);
my $es_dir = $base_bench_dir . "/es";
mkdir($es_dir);
for my $es_subdir (qw(run bench config metrics)) {
	mkdir($es_dir . "/" . $es_subdir);
}

# use stockpile to collect configuration information
my @config_hosts = split(/,/, $params{"clients"});
print "Collecting confguration information with stockpile\n";
stockpile_hosts(\@config_hosts, $base_bench_dir, "stockpile_output_path=". $base_bench_dir . "/stockpile.json");
	
# pass the rest of the args to pbench-gen-iterations and store the iterations in an array
print "Generating all benchmark iterations\n";
my $gen_iterations_cmd = "pbench-gen-iterations " . $benchmark . " " . join(" ", @ARGV);
my @iterations = split(/\n/, `$gen_iterations_cmd`);
if ($? != 0) {
	printf "Calling pbench-gen-iterations failed.  Exiting\n";
	printf "From pbench-gen-iterations: %s\n", @iterations;
	exit 1;
}

# now run the iterations
printf "iteration count: %d\n", scalar @iterations;
mkdir($base_bench_dir);
open(my $fh, ">" . $base_bench_dir . "/iteration-list.txt");
my $iteration_id = 0;
for my $iteration_params (@iterations) {
	my %iter_doc = create_bench_iter_doc(\%run_doc, $iteration_params,); 
	print "iteration params: $iteration_params\n";
	put_json_file(\%iter_doc, $es_dir . "/bench/iteration-" . $iter_doc{"doc_id"} . ".json");
	printf $fh "%d %s\n", $iteration_id, $iteration_params;
	printf "iteration_ID: %d iteration_params: %s\n", $iteration_id, $iteration_params;
	for (my $sample_id=0; $sample_id<$num_samples; $sample_id++) {
		printf "sample_ID: %d\n", $sample_id;
		my $iteration_dir = $base_bench_dir . "/iteration" . $iteration_id;
		mkdir($iteration_dir);
		my $iteration_sample_dir = $iteration_dir . "/sample" . $sample_id;
		mkdir($iteration_sample_dir);
		my $benchmark_cmd = "pbench-run-benchmark-sample " . $es_dir . "/bench/iteration-" . $iter_doc{"doc_id"} . ".json " . $iteration_sample_dir . " " . $base_bench_dir;
		my $benchmark_sample_output = `$benchmark_cmd`;
		my $exit_code = $?;
		print "output:\n$benchmark_sample_output";
		if ($exit_code != 0) {
			printf "Stopping because of iteration-sample exit code: %d\n", $exit_code;
			exit 1;
		}
	}
	$iteration_id++;
}
close $fh;
put_json_file(\%run_doc, $es_dir . "/run/run-" . $run_doc{'doc_id'} . ".json");

# convert the stockpile data with scribe, then create CDM docs in ./es/config
system('scl enable rh-python36 \'python3 -m venv /var/lib/pbench-agent/tmp/scribe && cd ' . $base_bench_dir . ' && scribe -t stockpile -ip ./stockpile.json >scribe.json\'');
open(my $scribe_fh, "<" . $base_bench_dir . "/scribe.json") || die "Could not open " . $base_bench_dir . "/scribe.json";
my $json_text = "";
# The scribe output is not correct json format. Instead of 1 json document, there are actually multiple documents, but no seperator between them or organized in an array
while (<$scribe_fh>) {
	$json_text .= $_;
	if (/^\}/) { # assume this is the end of a json doc
		my %config_doc = create_config_doc(\%run_doc, from_json($json_text));
		if ($config_doc{'module'}) {
			put_json_file(\%config_doc, $es_dir . "/config/" . $config_doc{'module'} . "-" . $config_doc{"doc_id"} . ".json");
		} else {
			printf "Error: config doc is missng \"module\" field:\n";
			print Dumper \%config_doc;
		}
		$json_text = "";
	}
}
close($scribe_fh);
