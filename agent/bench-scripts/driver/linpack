#!/bin/bash
# -*- mode: shell-script; indent-tabs-mode: t; sh-basic-offset: 8; sh-indentation: 8; tab-width: 8 -*-
#
# "linpack" driver script
#
# Responsible for transforming pbench-linpack command line inputs into the
# the linpack invocation requirements.
#
# The linpack binary expects an input file with 7 lines in it:
#
#     Line 1: Header (discarded)
#     Line 2: Sub-Header (emitted as-is to stdout)
#     Line 3: Positive integer number of tests to run
#     line 4: Number of equations to solve (problem size)
#     line 5: Leading dimension of array
#     line 6: Number of trials to run
#     line 7: Data alignment value (in Kbytes)
#
# For lines 4-7, if there are N tests to run, each line should have N values
# describing the parameters for those tests. For example:
#
#     Line 1: Header
#     Line 2: Sub-Header
#     Line 3: 3
#     line 4: 10000 20000 30000
#     line 5: 10016 20016 30016
#     line 6:     2     2     2
#     line 7:     4     4     4
#
# This script offers input parameters for lines 1, 2, 4 - 7, with default values
# and then calculates the number of tests to be run from those inputs to fill in
# line 3 of the LINPACK input file.
#
# Additionally, it offers input parameters to control the use of OpenMP during
# the LINPACK run, along with the OMP_NUM_THREADS and KMP_AFFINITY environment
# variables used by OpenMP, and if any NUMA controls should be applied (via
# `numactl`).  These parameters are provided in the default "Sub-Header".
#
# The script generates three files:
#
#    ${output_dir}/linpack.input  -  Constructed seven line LINPACK input file
#    ${output_dir}/linpack.meta   -  All input parameters provided as key=val
#    ${output_dir}/linpack.out    -  The output generated by the LINPACK binary
#
# The script exits with 0 on success, 1 for any operational failures, and 2 for
# an invocation errors.
#

script_name="$(basename ${0})"

linpack_input_file_name="linpack.input"
linpack_metadata_file_name="linpack.meta"
linpack_output_file_name="linpack.out"

linpack_binary=""

# Input file defaults, only lines 4-7 (headers defined below).
header=""
subheader=""

# Line 4 default
problem_sizes=20000
# Line 5 default
leading_dimensions=20016
# Line 6 default
run_trials=1
# Line 7 default
alignment_values=4

# Environment input defaults
use_omp="y"
threads_arg=""
kmp_affinity_args="nowarnings,compact,1,0,granularity=fine"
numactl_args=""

# Output directory required.
output_dir=""

function usage() {
	printf -- "TBD -- how to use the pbench linpack driver ...\n"
}

# Process options and arguments
opts=$(getopt -q -o h --longoptions "binary:,header:,subheader:,problem-sizes:,leading-dimensions:,alignment-values:,run-trials:,threads:,use-omp:,kmp-affinity:,numactl-args:,output-dir:,help" -n "${script_name}" -- "${@}")
if [[ ${?} -ne 0 ]]; then
	printf -- "%s %s\n\n\tunrecognized option specified\n\n" "${script_name}" "${*}" >&2
	usage >&2
	exit 2
fi
eval set -- "${opts}"
while true; do
	arg="${1}"
	shift
	case "${arg}" in
	--binary)
		if [[ -n "${1}" ]]; then
			binary="${1}"
			shift
		fi
		;;
	--header)
		# Values for line 1 of the LINPACK input file
		if [[ -n "${1}" ]]; then
			header="${1}"
			shift
		fi
		;;
	--subheader)
		# Values for line 2 of the LINPACK input file
		if [[ -n "${1}" ]]; then
			subheader="${1}"
			shift
		fi
		;;
	--problem-sizes)
		# Values for line 4 of the LINPACK input file
		if [[ -n "${1}" ]]; then
			problem_sizes=${1//,/ }
			shift
		fi
		;;
	--leading-dimensions)
		# Values for line 5 of the LINPACK input file
		if [[ -n "${1}" ]]; then
			leading_dimensions=${1//,/ }
			shift
		fi
		;;
	--run-trials)
		# Values for line 6 of the LINPACK input file
		if [[ -n "${1}" ]]; then
			run_trials=${1//,/ }
			shift
		fi
		;;
	--alignment-values)
		# Values for line 7 of the LINPACK input file
		if [[ -n "${1}" ]]; then
			alignment_values=${1//,/ }
			shift
		fi
		;;
	--threads)
		if [[ -n "${1}" ]]; then
			threads_arg="${1}"
			shift
		fi
		;;
	--use-omp)
		if [[ -n "${1}" ]]; then
			use_omp="${1}"
			shift
		fi
		;;
	--kmp-affinity)
		if [[ -n "${1}" ]]; then
			kmp_affinity_args="${1}"
			shift
		fi
		;;
	--numactl-args)
		if [[ -n "${1}" ]]; then
			numactl_args="${1}"
			shift
		fi
		;;
	--output-dir)
		if [[ -n "${1}" ]]; then
			output_dir="${1}"
			shift
		fi
		;;
	-h|--help)
		usage
		exit 0
		;;
	--)
		break
		;;
	*)
		printf -- "[%s] WARNING: unrecognized parameter encountred, '%s'\n" "${script_name}" "${arg}" >&2
		break
		;;
	esac
done

if [[ -z "${output_dir}" || ! -d "${output_dir}" ]]; then
	printf -- "[%s] ERROR: Specified --output-dir '${output_dir}' is not a directory\n" "${script_name}" >&2
	exit 2
fi
if [[ -z "${binary}" ]]; then
	printf -- "[%s] ERROR: You must specify --binary\n" "${script_name}" >&2
	exit 2
fi
if [[ ! -x "${binary}" ]]; then
	printf -- "[%s] ERROR: The --binary must exist and be executable\n" "${script_name}" >&2
	exit 2
fi
if [[ "${use_omp}" != "y" && "${use_omp}" != "n" ]]; then
	printf -- "[%s] ERROR: --use-omp must either be 'y' or 'n'\n" "${script_name}" >&2
	exit 2
fi
ps_list=(${problem_sizes})
ls_list=(${leading_dimensions})
rt_list=(${run_trials})
av_list=(${alignment_values})
if [[ ${#ps_list[*]} -ne ${#ls_list[*]} || \
      ${#ls_list[*]} -ne ${#rt_list[*]} || \
      ${#rt_list[*]} -ne ${#av_list[*]} ]]; then
    printf -- "[%s] ERROR: You must have the same number of elements for --problem-sizes, --leading-dimensions, --run-trials, and --alignment-values\n" >&2
    exit 2
fi
number_of_tests=${#ps_list[*]}

linpack_input_file="${output_dir}/${linpack_input_file_name}"
linpack_metadata_file="${output_dir}/${linpack_metadata_file_name}"
linpack_output_file="${output_dir}/${linpack_output_file_name}"

# N.B. - Trailing whitespace is required.
numactl_cmd=${numactl_args:+"numactl ${numactl_args} "}

if [[ "${use_omp}" == "y" ]]; then
	threads_arg=${threads_arg:-$(grep -c processor /proc/cpuinfo)}

	# N.B. - Trailing whitespace is required.
	omp_num_threads="OMP_NUM_THREADS=${threads_arg} "
	# N.B. - Trailing whitespace is required.
	kmp_affinity="KMP_AFFINITY=${kmp_affinity_args} "
else
	# When "use OpenMP" is false, we are not going to use the "threads_arg" or "kmp_affinity_args"
	threads_arg=""
	kmp_affinity_args=""

	# No environment variables to add to the command line.
	omp_num_threads=""
	kmp_affinity=""
fi
final_cmd="${omp_num_threads}${kmp_affinity}${numactl_cmd}${binary}"
final_cmd+=" ${linpack_input_file} |"
final_cmd+=" stdbuf --input=0 tee -i ${linpack_output_file}"

# Line 1, prividing a default header
header=${header:-"Pbench - LINPACK Benchmark data file (${linpack_input_file})"}
# Line 2, providing a default sub-header
subheader=${subheader:-"Pbench LINPACK Benchmark data -- ${final_cmd}"}

# Create the LINPACK input file.  Note the comment lines are redundant but
# provided in a spirit of consistency with the example input files provided by
# linpack RPM.
cat > ${linpack_input_file} <<-__EOF__
	${header}
	${subheader}
	${number_of_tests} # number of tests
	${problem_sizes} # problem sizes
	${leading_dimensions} # leading dimensions
	${run_trials} # times to run a test
	${alignment_values} # alingment values (in KBytes)
	__EOF__

# Now we can execute the final LINPACK command.
eval ${final_cmd}
exit_code=${?}

# Create the linpack.meta file containing all the metadata used for invoking
# LINPACK (does not include "header" or "subheader").  This serves as the marker
# file for its completion.
cat > ${linpack_metadata_file} <<-__EOF__
	binary=${binary}
	use_omp=${use_omp}
	threads=${threads_arg}
	kmp_affinity=${kmp_affinity_args}
	numactl_cmd=${numactl_cmd}
	problem_sizes=${problem_sizes}
	leading_dimensions=${leading_dimensions}
	alignment_values=${alignment_values}
	__EOF__

exit ${exit_code}
