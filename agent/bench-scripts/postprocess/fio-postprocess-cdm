#!/usr/bin/perl
## -*- mode: perl; indent-tabs-mode: t; perl-indent-level: 4 -*-
## vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=perl

use strict;
use warnings;
use File::Basename;
my $pbench_install_path;
my $pbench_lib_path;
BEGIN {
    $pbench_install_path = `getconf.py pbench_install_dir pbench-agent`;
    chomp $pbench_install_path;
    $pbench_lib_path = $pbench_install_path . "/lib";
}
use lib "$pbench_lib_path";
use JSON;
use Data::Dumper;
use PbenchCDM qw(create_metric_sample_doc create_bench_iter_sample_period_doc);
use PbenchBase qw(get_json_file put_json_file remove_element);

printf "\@ARGV: %s\n", join(" ", @ARGV);

if (scalar @ARGV < 4) {
    print "You must supply 4 arguments to fio-postprocess-cdm:\n";
    print "(1) The run directory\n";
    print "(2) The sample directory\n";
    print "(3) The tool group\n";
    print "(4) 0 or 1 indicating this is the last sample\n";
    exit 1;
}

my $script_name = basename($0);
my $rundir = shift(@ARGV);
my $base_bench_dir = shift(@ARGV);
my $tool_group = shift(@ARGV);
my $last_sample = shift(@ARGV);
my $json_ref = get_json_file("sample.json");
my %sample = %$json_ref; # This is the CDM doc for this benchmark-iteration-sample
my $sample_id = $sample{'sample'}{'id'}; # Needs to be included in all metric-sample docs
my $run_id = $sample{'run'}{'id'}; # Needs to be included in all metric-sample docs

# Create [at least one] benchmark period: a window of time during this benchmark, this one marked
# as "measurement", to indicate this period as the one the the UI/query tool computes a summary
# metric 
my %period = create_bench_iter_sample_period_doc(\%sample, "measurement");
# The primary metric needs to match exactly one metric-type that gets created from the benchmark data
$sample{'iteration'}{'primary_metric'} = "iops";
$sample{'iteration'}{'primary_period'} = "measurement";
put_json_file(\%sample, $base_bench_dir . "/es/bench/sample-" . $sample{'sample'}{'id'} . ".json");

# Under ./clients/<hostname>, process the fio result files
opendir(my $clients_dh, "clients") || die "$script_name: could not open directory clients: $!\n";
my @client_dirs = grep(!/^\./, (sort readdir($clients_dh)));
closedir $clients_dh;
my $earliest_timestamp;
my $latest_timestamp;
for my $client (@client_dirs) {
    # Until the CDM/Elastic UI/Web interface is ready, we need to 
    # call the legacy fio post-processing script to generate a
    # Pbench result.json for each sample.  In order to do that, we
    # need a single "fio-result.json", so we symilnk that from the
    # first client to the main directory, where that script expects
    # it to be
    if (not -e "fio-result.txt") {
        symlink("clients" . "/" . $client . "/" . "fio-result.json", "fio-result.txt");
    }
    mkdir("../../es/metrics");
    mkdir("../../es/metrics/" . $client);
    # First, try to process fio log files, and then if missing get the data from the
    # fio-result.json.  Don't use both for the same metric
    my @log_metric_types = qw(bw clat iops lat slat);
                              # All the possible metrics (except histogram logs)
                              # that can be timeseries data
    print "client: $client\n";
    opendir(my $client_dh, "clients/" . $client) ||
        die "$script_name: could not open client directory: $!\n";
    my @log_files = grep(/fio_([a-z]+)\.(\d+)\.log$/, (sort readdir($client_dh)));
    closedir $client_dh;
    for my $log_file (@log_files) {
        if ($log_file =~ /fio_([a-z]+)\.(\d+)\.log$/) {
            my $metric_type = $1;
            my $job_id = $2;
            # Process this timeseries data and remove this
            # metric_type from processing in fio_result.json
            if (grep(/^$metric_type$/, @log_metric_types)) {
                # This allows us to know to skip looking for this in the fio_result.json
                remove_element(\@log_metric_types, $metric_type);
                open(my $log_fh, "clients/$client/$log_file")
                    || die "$script_name: could not open file clients/$client/$log_file $!\n";
                while (<$log_fh>) {
                    my $last_timestamp_ms;
                    my $line = "$_";
                    chomp($line);
                    if ( $line =~  /(\d+),\s+(\d+),\s+(\d+),\s+(\d+)/ ) {
                        my $timestamp_ms = $1;
                        my $value = $2;
                        my $rwtype = $3; #ToDo: generate per-rwtype metrics
                        if ($last_timestamp_ms) {
                            my %metric_sample = create_metric_sample_doc(
                                \%period,
                                "throughput",   # The metric-class
                                $metric_type,   # The metric-type
                                $client,# The hostname
                                "fio",      # The source
                                "%source%-%type%-%hostname%", # The metric-instance name format
                                $value,     # The value of the metric
                                $timestamp_ms   # The timestamp
                                );

                            $metric_sample{'metric'}{'begin'} = $last_timestamp_ms;
                            put_json_file(\%metric_sample, "../../es/metrics/" .
                                $client .
                                "/metric-" .
                                $metric_sample{'metric'}{'id'} .
                                ".json");
                        }
                        if (! $earliest_timestamp or $earliest_timestamp > $timestamp_ms) {
                            $earliest_timestamp = $timestamp_ms;
                        }
                        if (! $latest_timestamp or $latest_timestamp < $timestamp_ms) {
                            $latest_timestamp = $timestamp_ms;
                        }
                        $last_timestamp_ms = $timestamp_ms;
                    }
                }
                close($log_fh);
            }
        }
    }
}
$period{'period'}{'begin'} = $earliest_timestamp;
$period{'period'}{'end'} = $latest_timestamp;
my $period_file = $base_bench_dir . "/es/bench/period-" . $period{'period'}{'id'} . ".json";
put_json_file(\%period, $period_file);
my $tools_cdm_pp_cmd = "pbench-postprocess-tools-cdm " . $period_file . " " .
                       $base_bench_dir . "/es  " . $rundir;
printf "tools_cdm_pp cmd\n%s\n\n", $tools_cdm_pp_cmd;
my $tools_cdm_pp_output = `$tools_cdm_pp_cmd`;
printf "tools_cdm_pp output\n%s\n\n", $tools_cdm_pp_output;

# Call the legacy post-process script, so we can build the static html reports later
system($pbench_install_path . "/bench-scripts/postprocess/fio-postprocess `/bin/pwd` fio default");
if (defined $last_sample and $last_sample eq "1") {
    system($pbench_install_path . "/bench-scripts/postprocess/process-iteration-samples `/bin/pwd`/.. iops 100 0 1 n n");
}
