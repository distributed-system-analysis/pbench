#!/bin/bash
_tdir=$(dirname $(readlink -f $0))

_testroot=/var/tmp/pbench-test-bench
mkdir -p $_testroot
if [[ ! -d $_testroot ]]; then
    echo "ERROR: failed to create test root directory, \"$_testroot\"" >&2
    exit 1
fi
rm -rf $_testroot/*
if [[ $? -gt 0 ]]; then
    echo "ERROR: failed to empty test root directory, \"$_testroot\"" >&2
    exit 1
fi
export _testout=$_testroot/output.txt
export _testlog=$_testroot/test-execution.log
_testdir=$_testroot/pbench

# Copy bench-scripts execution environment to _testroot
_testopt=$_testroot/opt/pbench-agent
res=0
mkdir -p $_testopt/bench-scripts/postprocess
let res=res+$?
cp $_tdir/postprocess/* $_testopt/bench-scripts/postprocess
let res=res+$?
export moongen_dir=$_testroot/MoonGen
mkdir -p $moongen_dir/build
let res=res+$?
cp $_tdir/../base $_testopt/
let res=res+$?
for script in $_tdir/pbench-* ; do
    cp $script $_testopt/bench-scripts/
    let res=res+$?
done

mkdir -p $_testopt/unittest-scripts/
let res=res+$?
cp -rH $_tdir/test-bin/* $_testopt/unittest-scripts/
let res=res+$?
mkdir -p $_testopt/bench-scripts/templates
let res=res+$?
cp $_tdir/templates/* $_testopt/bench-scripts/templates
let res=res+$?

# replace real postprocessing scripts with mocked ones
mv $_testopt/unittest-scripts/mock-postprocess/* $_testopt/bench-scripts/postprocess
# moongen needs Special Treatment
mv $_testopt/unittest-scripts/mock-MoonGen $moongen_dir/build/MoonGen
let res=res+$?

if [[ $res -ne 0 ]]; then
    echo "ERROR: failed to construct unittest execution directory hierarchy" \
         "under, \"$_testroot\"" >&2
    exit 1
fi

# Fixed timestamp output
export _PBENCH_BENCH_TESTS=1
# Allows us to intercept scp, ssh, rsync, etc.
export PATH=$_testopt/unittest-scripts:$PATH

res=0

function _run {
    tname=$1
    shift
    tscrpt=$1
    shift
    echo "$tname $tscrpt $@"
    echo "+++ Running $tname $tscrpt" >> $_testout
    benchmark_bin=$_testopt/unittest-scripts/bm pbench_run=$_testdir pbench_log=$_testdir/pbench.log $_testopt/bench-scripts/$tscrpt $@ >> $_testout 2>&1
    sts=$?
    echo "--- Finished $tname $tscrpt (status=$sts)" >> $_testout
    return $sts
}
function _save_tree {
    # Save state of the tree
    echo "+++ pbench tree state" >> $_testout
    find $_testdir | sort >> $_testout
    echo "--- pbench tree state" >> $_testout
}
function _dump_logs {
    # Dump the state of any generated script logs
    echo "+++ pbench.log file contents" >> $_testout
    grep -HvF "\-\-should-n0t-ex1st--" $_testdir/pbench.log >> $_testout 2>&1
    echo "--- pbench.log file contents" >> $_testout
    echo "+++ test-execution.log file contents" >> $_testout
    grep -HvF "\-\-should-n0t-ex1st--" $_testroot/test-execution.log | sort >> $_testout 2>&1
    echo "--- test-execution.log file contents" >> $_testout
    rm -f $_testroot/test-execution.log
    if [ ! -z "$1" ] ;then
        cat $_testdir/$1/metadata.log >> $_testout 2>&1
    fi
}
function _verify_output {
    local sts tname tscrpt expected_status
    sts=$1
    tname=$2
    tscrpt=$3
    expected_status=${4:-0}
    diff -cw $_tdir/gold/${tscrpt}/${tname}.txt $_testout
    if [[ $? -gt 0 ]]; then
        echo "FAIL - $tname"
        mv $_testout $_testroot/${tname}_output.txt
        sts=1
    else
        if [[ $sts -eq 0 ]]; then
            echo "PASS - $tname"
            rm $_testout
        else
	    if [[ $sts -eq $expected_status ]]; then
		echo "PASS - $tname failed with expected exit status: $sts"
		rm $_testout
		sts=0
	    else
		echo "FAIL - $tname: PASS output but execution returned non-zero exit status"
	    fi
        fi
    fi
    return $sts
}
function _setup_state {
    mkdir $_testdir
    if [[ $? -ne 0 ]]; then
        echo "ERROR: failed to create test pbench directory, \"$_testdir\"" >&2
        exit 1
    fi
    cp -a $_tdir/sample-tools/tools-default $_testdir/
    if [ ! -z "$1" ] ;then
        mkdir -p $_testdir/$1
        echo [pbench] > $_testdir/$1/metadata.log
    fi
}
function _reset_state {
    rm -rf $_testdir
    if [[ -d $_testdir ]]; then
        echo "ERROR: unable to remove pbench hierarchy" >&2
        exit 1
    fi
}

let errs=0

declare -A cmds=(
    [test-00]="pbench-uperf  --config=test-00  --test-types=rr,stream  --message-sizes=64  --instances=1  --protocols=tcp  --runtime=20  --samples=2"
    [test-01]="pbench-uperf  --config=test-01  --test-types=rr,stream  --message-sizes=64  --instances=1  --protocols=tcp  --runtime=20  --samples=2  --servers=s1,s2,s3  --clients=c1,c2,c3  --server-node=0,-1,2  --client-node=1,-1,3"
    [test-02]="pbench-dbench --threads=24,48  --client-nodes=0,1  --clients=127.0.0.1,127.0.0.1  --max-stddev=10"
    [test-03]="pbench-moongen --test-type=throughput --samples=3 --search-runtime=10 --validation-runtime=10 --max-drop-pct=0,1 --frame-sizes=64,1024"
    [test-04]="pbench-fio --config=test-04 --test-types=rw,randrw"
    [test-05]="pbench-fio --config=test-05 --test-type=throughput --samples=1 --clients=foo,bar"
    [test-06]="pbench-fio --config=test-06  --test-type=throughput --samples=1 --client-file=/tmp/foo"
    [test-07]="pbench-user-benchmark --help"
    [test-08]="pbench-user-benchmark --sysinfo=bad"
)

declare -A expected_status=(
    [test-08]=1
)

date="1900-01-01T00:00:00"
declare -A rundirs=(
    [test-00]="uperf_test-00_$date"
    [test-01]="uperf_test-01_$date"
    [test-04]="fio_test-04_$date"
    [test-05]="fio_test-05_$date"
    [test-06]="fio_test-06_$date"
    
)
declare -A pre=(
    [test-06]="echo foo bar baz | tr ' ' '\n' > /tmp/foo"
)

declare -A post=(
    [test-06]="rm -f /tmp/foo"
)


tests="$*"
if [ -z "$tests" ] ;then
    typeset -i len=${#cmds[@]}
    len=$len-1
    tests="$(seq -f "test-%02g" 0 $len)"
fi

for tst in $tests; do
    cmd=${cmds[$tst]}
    benchmark=${cmd%% *}
    tpre=${pre[$tst]}
    tpost=${post[$tst]}
    status=${expected_status[$tst]}
    _setup_state ${rundirs[$tst]}
    if [ ! -z "$tpre" ] ;then
        eval "$tpre"
    fi
    _run $tst $cmd
    res=$?
    if [ ! -z "$tpost" ] ;then
        eval "$tpost"
    fi
    _save_tree
    _dump_logs ${rundirs[$tst]}
    _verify_output $res $tst $benchmark $status
    res=$?
    let errs=$errs+$res
    _reset_state
done

if [[ $errs -gt 0 ]]; then
    sts=1
else
    sts=0
fi
exit $sts
