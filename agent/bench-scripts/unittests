#!/bin/bash
export LANG=C
export LC_ALL=C
_tdir=$(dirname $(readlink -f $0))

_testroot=/var/tmp/pbench-test-bench
mkdir -p $_testroot
if [[ ! -d $_testroot ]]; then
    echo "ERROR: failed to create test root directory, \"$_testroot\"" >&2
    exit 1
fi
rm -rf $_testroot/*
if [[ $? -gt 0 ]]; then
    echo "ERROR: failed to empty test root directory, \"$_testroot\"" >&2
    exit 1
fi
export _testout=$_testroot/output.txt
export _testlog=$_testroot/test-execution.log
_testdir=$_testroot/pbench

# Copy bench-scripts execution environment to _testroot
_testopt=$_testroot/opt/pbench-agent
export moongen_dir=$_testroot/MoonGen
res=0
mkdir -p $_testopt/bench-scripts/postprocess $_testopt/bench-scripts/templates $_testopt/unittest-scripts $moongen_dir/build
let res=res+$?
cp $_tdir/../base $_testopt/
let res=res+$?
for script in $_tdir/pbench-* ; do
    cp $script $_testopt/bench-scripts/
    let res=res+$?
done
cp $_tdir/postprocess/* $_testopt/bench-scripts/postprocess
let res=res+$?
cp $_tdir/templates/* $_testopt/bench-scripts/templates
let res=res+$?
cp -rH $_tdir/test-bin/* $_testopt/unittest-scripts/
let res=res+$?
# replace real post-processing scripts with mocked ones
mv $_testopt/unittest-scripts/mock-postprocess/* $_testopt/bench-scripts/postprocess
let res=res+$?
rmdir $_testopt/unittest-scripts/mock-postprocess
let res=res+$?
# moongen needs Special Treatment
mv $_testopt/unittest-scripts/mock-MoonGen $moongen_dir/build/MoonGen
let res=res+$?

if [[ $res -ne 0 ]]; then
    echo "ERROR: failed to construct unittest execution directory hierarchy" \
         "under, \"$_testroot\"" >&2
    exit 1
fi

function remove_path {
    # PATH ($2) => /bin:/opt/a dir/bin:/sbin
    WORK=:$2:
    # WORK => :/bin:/opt/a dir/bin:/sbin:
    REMOVE=$1
    WORK=${WORK/:$REMOVE:/:}
    # WORK => :/bin:/sbin:
    WORK=${WORK%:}
    WORK=${WORK#:}
    #PATH=$WORK
    # PATH => /bin:/sbin
    echo $WORK
}
PATH=$(remove_path /opt/pbench-agent/bench-scripts $PATH)
PATH=$(remove_path /opt/pbench-agent/util-scripts $PATH)
# Allows us to intercept scp, ssh, rsync, etc.
export PATH=$_testopt/unittest-scripts:$PATH

# Fixed timestamp output
export _PBENCH_BENCH_TESTS=1

res=0

function _run {
    tname=$1
    shift
    tscrpt=$1
    shift
    echo "$tname $tscrpt $@"
    echo "+++ Running $tname $tscrpt" >> $_testout
    #echo PWD: $(pwd) _TDIR: $_tdir >> $_testout
    _TEST_ALTERNATE_BENCH_LIBRARY=$_tdir/postprocess \
    _TEST_ALTERNATE_TOOLS_LIBRARY=$_tdir/../tool-scripts/postprocess \
                                 PBENCH_UNITTEST_BENCHMARK=$tscrpt PBENCH_UNITTEST_TEST=$tname \
                                 benchmark_bin=$_testopt/unittest-scripts/bm pbench_run=$_testdir pbench_log=$_testdir/pbench.log \
                                 $_testopt/bench-scripts/$tscrpt $@  >> $_testout 2>&1
    sts=$?
    echo "--- Finished $tname $tscrpt (status=$sts)" >> $_testout
    return $sts
}

function _save_tree {
    # Save state of the tree
    echo "+++ pbench tree state" >> $_testout
    find $_testdir | sort >> $_testout
    echo "--- pbench tree state" >> $_testout
}

function _dump_logs {
    # Dump the state of any generated script logs
    echo "+++ pbench.log file contents" >> $_testout
    grep -HvF "\-\-should-n0t-ex1st--" $_testdir/pbench.log >> $_testout 2>&1
    echo "--- pbench.log file contents" >> $_testout
    echo "+++ test-execution.log file contents" >> $_testout
    grep -sHvF "\-\-should-n0t-ex1st--" $_testroot/test-execution.log | sort >> $_testout 2>&1
    echo "--- test-execution.log file contents" >> $_testout
    rm -f $_testroot/test-execution.log
    if [ ! -z "$1" ] ;then
        cat $_testdir/$1/metadata.log >> $_testout 2>&1
    fi
}

function _verify_output {
    local sts tname tscrpt expected_status
    sts=$1
    tname=$2
    tscrpt=$3
    expected_status=${4:-0}
    # fix up stupidities in python exception output: lib64->lib, line numbers->XXX
    # fix up Ubuntu stupidities:
    # backtick to single quote
    # UTF-8 left single quote to ASCII apostrophe
    # UTF-8 right single quote to ASCII apostrophe
    sed 's/lib64/lib/g
         s/, line [1-9][0-9]*, in/, line XXX, in/g' $_testout |
         tr '\140' '\047' |
         sed 's/\xe2\x80\x98/\x27/' |
         sed 's/\xe2\x80\x99/\x27/' > $_testout.1
    diff -cw $_tdir/gold/${tscrpt}/${tname}.txt $_testout.1
    if [[ $? -gt 0 ]]; then
        echo "FAIL - $tname"
        rm $_testout
        mv $_testout.1 $_testroot/${tname}_output.txt
        sts=1
    else
        if [[ $sts -eq 0 ]]; then
            echo "PASS - $tname"
            rm $_testout $_testout.1
            # mv $_testout $_testout.1 /tmp/pbench
        else
            if [[ $sts -eq $expected_status ]]; then
                echo "PASS - $tname exited with expected status: $sts"
                rm $_testout $_testout.1
                sts=0
            else
                echo "FAIL - $tname: PASS output but execution returned non-zero exit status"
                rm $_testout
                mv $_testout.1 $_testroot/${tname}_output.txt
            fi
        fi
    fi
    return $sts
}

function _setup_state {
    mkdir -p $_testdir/samples
    if [[ $? -ne 0 ]]; then
        echo "ERROR: failed to create test pbench directory, \"$_testdir\"" >&2
        exit 1
    fi
    cp -a $_tdir/sample-tools/tools-default $_testdir/
    if [ ! -z "$1" ] ;then
        mkdir -p $_testdir/$1
        echo [pbench] > $_testdir/$1/metadata.log
    fi
}

function _reset_state {
    rm -rf $_testdir
    if [[ -d $_testdir ]]; then
        echo "ERROR: unable to remove pbench hierarchy" >&2
        exit 1
    fi
}

let errs=0

declare -A cmds=(
    [test-00]="pbench-uperf --config=test-00 --test-types=rr,stream --message-sizes=64 --instances=1 --protocols=tcp --runtime=20 --samples=2"
    [test-01]="pbench-uperf --config=test-01 --test-types=rr,stream --message-sizes=64 --instances=1 --protocols=tcp --runtime=20 --samples=2 --servers=s1,s2,s3 --clients=c1,c2,c3 --server-node=0,-1,2 --client-node=1,-1,3"
    [test-02]="pbench-dbench --threads=24,48 --client-nodes=0,1 --clients=127.0.0.1,127.0.0.1 --max-stddev=10"
    [test-03]="pbench-moongen --test-type=throughput --samples=3 --search-runtime=10 --validation-runtime=10 --max-drop-pct=0,1 --frame-sizes=64,1024"
    [test-04]="pbench-fio --config=test-04 --test-types=rw,randrw"
    [test-05]="pbench-fio --config=test-05 --test-type=throughput --samples=1 --clients=foo,bar"
    [test-06]="pbench-fio --config=test-06 --test-type=throughput --samples=1 --client-file=/tmp/foo"
    [test-07]="pbench-user-benchmark --help"
    [test-08]="pbench-user-benchmark --sysinfo=bad"
    [test-09]="pbench-user-benchmark -- user-benchmark-script no-file"
    [test-10]="pbench-user-benchmark -- user-benchmark-script no-duration"
    [test-11]="pbench-user-benchmark -- user-benchmark-script with-duration"
    [test-12]="pbench-user-benchmark -- user-benchmark-script bad-format"
    [test-13]="pbench-moongen --sysinfo=bad"
    [test-14]="pbench-moongen --help"
    [test-15]="pbench-uperf --sysinfo=bad"
    [test-16]="pbench-uperf --help"
    [test-17]="pbench-fio --sysinfo=bad"
    [test-18]="pbench-fio --help"
    [test-19]="pbench-fio --pre-iteration-script=foo"
    [test-20]="pbench-fio --targets=/dev/foo,/dev/bar --config=test-06 --test-type=throughput --samples=1 --client-file=/tmp/foo"
    [test-21]="pbench-trafficgen --help"
    [test-22]="pbench-trafficgen --config=test-22 --traffic-generator=trex-txrx-profile --max-loss-pct=0.0 --samples=1 --validation-runtime=30 --rate=5000000 --num-flows=1000 --frame-size=74 --traffic-direction=bidirectional,unidirectional,revunidirectional --flow-mods=src-ip,dst-ip,src-port,dst-port,protocol --one-shot --postprocess-only=y --run-dir=$_testdir"
    [test-23]="pbench-user-benchmark --config=test-23 --use-tool-triggers -- tool-trigger-example"
    [test-24]="pbench-user-benchmark --config=test-24                     -- user-benchmark-script no-file"
    [test-25]="pbench-user-benchmark --config=test-25 --no-stderr-capture -- user-benchmark-script no-file"
)

declare -A expected_status=(
    [test-08]=1
    [test-13]=1
    [test-15]=1
    [test-17]=1
    [test-19]=1
    [test-20]=1
    [test-21]=1
)

date="1900.01.01T00.00.00"
declare -A rundirs=(
    [test-00]="uperf_test-00_$date"
    [test-01]="uperf_test-01_$date"
    [test-04]="fio_test-04_$date"
    [test-05]="fio_test-05_$date"
    [test-06]="fio_test-06_$date"
    [test-22]="trafficgen_test-22_$date"
)
declare -A pre=(
    [test-04]="cp $_tdir/samples/test-04.tar.xz $_testdir/samples; mkdir -p $_testopt/config; cp $_tdir/samples/pbench-agent.cfg $_testopt/config; export CONFIG=$_testopt/config/pbench-agent.cfg"
    [test-05]="cp $_tdir/samples/test-05.tar.xz $_testdir/samples; mkdir -p $_testopt/config; cp $_tdir/samples/pbench-agent.cfg $_testopt/config; export CONFIG=$_testopt/config/pbench-agent.cfg"
    [test-06]="cp $_tdir/samples/test-06.tar.xz $_testdir/samples; mkdir -p $_testopt/config; cp $_tdir/samples/pbench-agent.cfg $_testopt/config; export CONFIG=$_testopt/config/pbench-agent.cfg; echo foo bar baz | tr ' ' '\n' > /tmp/foo"
    [test-17]="mkdir -p $_testopt/config;cp $_tdir/samples/pbench-agent.cfg $_testopt/config; export CONFIG=$_testopt/config/pbench-agent.cfg"
    [test-18]="mkdir -p $_testopt/config;cp $_tdir/samples/pbench-agent.cfg $_testopt/config; export CONFIG=$_testopt/config/pbench-agent.cfg"
    [test-22]="tar xf $_tdir/samples/test-22.tar.xz -C $_testdir/"
    [test-23]="cp $_tdir/sample-tools/tool-triggers $_testdir/"
)

declare -A post=(
    [test-06]="rm -f /tmp/foo"
    [test-09]="cat $_testdir/pbench-user-benchmark__1900.01.01T00.00.00/user-benchmark-summary.json >> $_testout"
    [test-10]="cat $_testdir/pbench-user-benchmark__1900.01.01T00.00.00/user-benchmark-summary.json >> $_testout"
    [test-11]="cat $_testdir/pbench-user-benchmark__1900.01.01T00.00.00/user-benchmark-summary.json >> $_testout"
    [test-12]="cat $_testdir/pbench-user-benchmark__1900.01.01T00.00.00/user-benchmark-summary.json >> $_testout"
    [test-22]="cat $_testdir/result.json >> $_testout"
    [test-23]="cat $_testdir/pbench-user-benchmark_test-23_1900.01.01T00.00.00/user-benchmark.cmd >> $_testout; rm $_testdir/tool-triggers"
    [test-24]="cat $_testdir/pbench-user-benchmark_test-24_1900.01.01T00.00.00/user-benchmark.cmd >> $_testout"
    [test-25]="cat $_testdir/pbench-user-benchmark_test-25_1900.01.01T00.00.00/user-benchmark.cmd >> $_testout"
)

tests="$*"
if [ -z "$tests" ] ;then
    typeset -i len=${#cmds[@]}
    len=$len-1
    tests=$(echo ${!cmds[*]} | tr ' ' '\n' | sort)
fi

for tst in $tests; do
    cmd=${cmds[$tst]}
    benchmark=${cmd%% *}
    tpre=${pre[$tst]}
    tpost=${post[$tst]}
    status=${expected_status[$tst]}
    _setup_state ${rundirs[$tst]}
    if [ ! -z "$tpre" ] ;then
        eval "$tpre"
    fi
    _run $tst $cmd
    res=$?
    if [ ! -z "$tpost" ] ;then
        eval "$tpost"
    fi
    _save_tree
    _dump_logs ${rundirs[$tst]}
    _verify_output $res $tst $benchmark $status
    res=$?
    let errs=$errs+$res
    _reset_state
done

# Final clean up, if there are no failures, we'll be able to remove the
# hierarchy entirely.
rm -rf $_testroot/opt $moongen_dir
rmdir $_testroot > /dev/null 2>&1

if [[ $errs -gt 0 ]]; then
    sts=1
else
    sts=0
fi
exit $sts
