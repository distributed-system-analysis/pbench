#!/bin/bash
export LANG=C
export LC_ALL=C
export _tdir=$(dirname $(readlink -f ${0}))

_testroot=/var/tmp/pbench-test-bench
mkdir -p ${_testroot}
if [[ ! -d ${_testroot} ]]; then
    echo "ERROR: failed to create test root directory, \"${_testroot}\"" >&2
    exit 1
fi
rm -rf ${_testroot}/*
if [[ ${?} -gt 0 ]]; then
    echo "ERROR: failed to empty test root directory, \"${_testroot}\"" >&2
    exit 1
fi
export _testtmp=${_testroot}/tmp
export _testout=${_testroot}/output.txt
export _testlog=${_testroot}/test-execution.log
# This directory location is equivalent to the $pbench_run (or
# /var/lib/pbench-agent).
export _testdir=${_testroot}/pbench-agent

# Copy bench-scripts execution environment to _testroot
export _testopt=${_testroot}/opt/pbench-agent
res=0
mkdir -p ${_testopt}/bench-scripts/postprocess ${_testopt}/bench-scripts/templates ${_testopt}/util-scripts ${_testopt}/lib ${_testopt}/unittest-scripts ${_testopt}/common/lib
let res=res+${?}
cp ${_tdir}/../base ${_testopt}/
let res=res+${?}
cp -rH ${_tdir}/../lib/* ${_testopt}/lib/
let res=res+${?}
for script in ${_tdir}/pbench-* ; do
    cp $script ${_testopt}/bench-scripts/
    let res=res+${?}
done
cp ${_tdir}/postprocess/* ${_testopt}/bench-scripts/postprocess
let res=res+${?}
cp ${_tdir}/templates/* ${_testopt}/bench-scripts/templates
let res=res+${?}
cp -a $_tdir/../util-scripts/{getconf.py,require-rpm,pbench-*} $_testopt/util-scripts/
let res=res+$?
cp -rH ${_tdir}/test-bin/* ${_testopt}/unittest-scripts/
let res=res+${?}
# replace real post-processing scripts with mocked ones
mv ${_testopt}/unittest-scripts/mock-postprocess/* ${_testopt}/bench-scripts/postprocess
let res=res+${?}
rmdir ${_testopt}/unittest-scripts/mock-postprocess
let res=res+${?}

if [[ ${res} -ne 0 ]]; then
    echo "ERROR: failed to construct unittest execution directory hierarchy" \
         "under, \"${_testroot}\"" >&2
    exit 1
fi

function remove_path {
    # PATH (${2}) => /bin:/opt/a dir/bin:/sbin
    WORK=:${2}:
    # WORK => :/bin:/opt/a dir/bin:/sbin:
    REMOVE=${1}
    WORK=${WORK/:${REMOVE}:/:}
    # WORK => :/bin:/sbin:
    WORK=${WORK%:}
    WORK=${WORK#:}
    #PATH=${WORK}
    # PATH => /bin:/sbin
    echo ${WORK}
}
PATH=$(remove_path /opt/pbench-agent/bench-scripts ${PATH})
PATH=$(remove_path /opt/pbench-agent/util-scripts ${PATH})
# Allows us to intercept scp, ssh, rsync, etc.
export PATH=${_testopt}/unittest-scripts:${_testopt}/util-scripts:${_testopt}/bench-scripts:${PATH}

# Fixed timestamp output
export _PBENCH_UNIT_TESTS=1

res=0

function _run {
    local tname="${1}"
    shift
    local tscrpt="${1}"
    shift
    local opts_file="${1}"
    local opts
    if [[ -f "${opts_file}" ]]; then
        opts=" $(cat ${opts_file})"
    else
        opts=""
    fi

    echo "${tname} ${tscrpt}${opts}"
    echo "+++ Running ${tname} ${tscrpt}" >> $_testout

    _tst_benchmark=${tscrpt%% *} \
    _PBENCH_AGENT_CONFIG=${_testopt}/config/pbench-agent.cfg \
    pbench_install_dir=${_testopt} \
    pbench_bspp_dir=${_testopt}/bench-scripts/postprocess \
    pbench_lib_dir=${_testopt}/lib \
    pbench_run=${_testdir} \
    pbench_log=${_testdir}/pbench.log \
    benchmark_bin=${_testopt}/unittest-scripts/bm \
            eval ${tscrpt} --config=${tname} ${opts} >> ${_testout} 2>&1
    sts=${?}

    echo "--- Finished ${tname} ${tscrpt} (status=${sts})" >> ${_testout}
    return ${sts}
}

function _save_tree {
    # Save state of the tree
    echo "+++ pbench tree state" >> ${_testout}
    find ${_testdir} 2> /dev/null | sort >> ${_testout}
    echo "--- pbench tree state" >> ${_testout}
}

function _dump_file {
    if [[ ! -f "${_testdir}/${1}/${2}" ]]; then
        return
    fi
    echo "+++ ${1}/${2} file contents" >> ${_testout}
    cat ${_testdir}/${1}/${2} >> ${_testout} 2>&1
    echo "--- ${1}/${2} file contents" >> ${_testout}
}

function _dump_logs {
    # Dump the state of any generated script logs
    if [[ -s "${_testdir}/pbench.log" ]]; then
        echo "+++ pbench.log file contents" >> ${_testout}
        cat ${_testdir}/pbench.log >> ${_testout} 2>&1
        echo "--- pbench.log file contents" >> ${_testout}
    fi
    if [[ -s "${_testroot}/test-execution.log" ]]; then
        echo "+++ test-execution.log file contents" >> ${_testout}
        sort ${_testroot}/test-execution.log >> ${_testout} 2>&1
        echo "--- test-execution.log file contents" >> ${_testout}
        rm -f ${_testroot}/test-execution.log
    fi
    _dump_file ${1} metadata.log
    _dump_file ${1} user-benchmark-summary.json
    (
    if cd ${_testdir}/${1} > /dev/null 2>&1 ;then
        for f in $(find . -name user-benchmark.cmd 2> /dev/null | sort); do
            _dump_file ${1} ${f}
        done
        for f in $(find . -name results.html 2> /dev/null | sort); do
            _dump_file ${1} ${f}
        done
    fi
    )
}

function _verify_output {
    local sts tname tscrpt expected_status
    sts=${1}
    tname=${2}
    tscrpt=${3}
    expected_status=${4:-0}
    # fix up Ubuntu stupidities:
    # backtick to single quote
    # UTF-8 left single quote to ASCII apostrophe
    # UTF-8 right single quote to ASCII apostrophe
    sed 's/\xe2\x80\x98/\x27/g
         s/\xe2\x80\x99/\x27/g' ${_testout} |
         tr '\140' '\047' > ${_testout}.1
    if [[ ! -e ${_tdir}/tests/${tscrpt}/${tname}.txt ]]; then
        mkdir -p ${_tdir}/tests/${tscrpt} > /dev/null 2>&1
        touch ${_tdir}/tests/${tscrpt}/${tname}.txt > /dev/null 2>&1
    fi
    diff -c ${_tdir}/tests/${tscrpt}/${tname}.txt ${_testout}.1
    if [[ ${?} -gt 0 ]]; then
        echo "FAIL - ${tname}"
        rm ${_testout}
        mv ${_testout}.1 ${_testroot}/${tname}_output.txt
        sts=1
    else
        if [[ ${sts} -eq 0 ]]; then
            echo "PASS - ${tname}"
            rm ${_testout} ${_testout}.1
        else
            if [[ ${sts} -eq ${expected_status} ]]; then
                echo "PASS - ${tname} exited with expected status: ${sts}"
                rm ${_testout} ${_testout}.1
                sts=0
            else
                echo "FAIL - ${tname}: PASS output but execution returned non-zero exit status"
                rm ${_testout}
                mv ${_testout}.1 ${_testroot}/${tname}_output.txt
            fi
        fi
    fi
    return ${sts}
}

function _setup_state {
    mkdir -p ${_testopt}/config
    if [[ ${?} -ne 0 ]]; then
        echo "ERROR: failed to create test pbench config directory, \"${_testopt}/config\"" >&2
        exit 1
    fi
    cp ${_tdir}/tests/Defaults/pbench-agent.cfg ${_testopt}/config/
    if [[ ${?} -ne 0 ]]; then
        echo "ERROR: failed to create pbench-agent config file, \"${_testopt}/config/pbench-agent.cfg\"" >&2
        exit 1
    fi
    mkdir -p ${_testdir}
    if [[ ${?} -ne 0 ]]; then
        echo "ERROR: failed to create test pbench directory, \"${_testdir}\"" >&2
        exit 1
    fi
    cp -a ${_tdir}/tests/Defaults/tools-default ${_tdir}/tests/Defaults/tool-triggers  ${_testdir}/
    mkdir ${_testtmp}
    if [[ ${?} -gt 0 ]]; then
        echo "ERROR: failed to create tmp directory, \"${_testtmp}\"" >&2
        exit 1
    fi
}

function _reset_state {
    rm -rf ${_testdir}
    if [[ -d ${_testdir} ]]; then
        echo "ERROR: unable to remove pbench hierarchy, ${_testdir}" >&2
        exit 1
    fi
    rm -rf ${_testtmp}
    if [[ -d ${_testtmp} ]]; then
        echo "ERROR: unable to remove tmp directory, ${_testtmp}" >&2
        exit 1
    fi
}

test_args="${*}"
tests=""
> ${_testroot}/tests-unsorted.lis
if [[ -z "${test_args}" ]]; then
    # find them on disk: [pbench-<benchmark>]/[<test-##>].txt test-<name>/<test-##>.txt
    for dir in $(ls -1 ${_tdir}/tests); do
        if [[ "${dir}" == "Defaults" ]]; then
            continue
        fi
        for _tst in $(ls -1 ${_tdir}/tests/${dir}/*.txt); do
            tst=$(basename "${_tst}")
            printf -- "%s %s\n" "${tst%%.*}" "${dir}" >> ${_testroot}/tests-unsorted.lis
        done
    done
    sort ${_testroot}/tests-unsorted.lis > ${_testroot}/tests.lis
    rm ${_testroot}/tests-unsorted.lis
else
    # For each given test name, find them on disk.
    # NOTE: we run them in the order given.
    for _tst_arg in ${test_args}; do
        if [[ -d ${_tdir}/tests/${_tst_arg} ]]; then
            if [[ "${_tst_arg}" == "Defaults" ]]; then
                # Ignore somebody trying to run the "Defaults" data directory.
                continue
            fi
            # All all the tests in that benchmark directory
            for _tst in $(ls -1 ${_tdir}/tests/${_tst_arg}/*.txt); do
                tst=$(basename "${_tst}")
                printf -- "%s %s\n" "${tst%%.*}" "${_tst_arg}" >> ${_testroot}/tests-unsorted.lis
            done
        else
            # Find that test among the benchmarks
            for dir in $(ls -1 ${_tdir}/tests); do
                if [[ "${dir}" == "Defaults" ]]; then
                    continue
                fi
                if [[ -f ${_tdir}/tests/${dir}/${_tst_arg}.txt ]]; then
                    printf -- "%s %s\n" "${_tst_arg}" "${dir}" >> ${_testroot}/tests-unsorted.lis
                fi
            done
        fi
    done
    mv ${_testroot}/tests-unsorted.lis ${_testroot}/tests.lis
fi

export date="1900.01.01T00.00.00"
let errs=0

while read tst benchmark; do
    _tst="${benchmark}/${tst}"
    bm_postfix="${benchmark#*-}"

    if [[ -f "${_tdir}/tests/${_tst}.sts" ]]; then
        status="$(cat ${_tdir}/tests/${_tst}.sts)"
    else
        status=""
    fi

    if [[ ${benchmark} == "pbench-user-benchmark" ]]; then
        _rundir="${benchmark}_${tst}_${date}"
    elif [[ ${benchmark%%-*} == "pbench" ]]; then
        _rundir="${bm_postfix}_${tst}_${date}"
    else
        _rundir=""
    fi

    _setup_state ${_rundir}

    if [[ -x "${_tdir}/tests/${_tst}.pre" ]]; then
        ${_tdir}/tests/${_tst}.pre
    fi

    _run ${tst} ${benchmark} ${_tdir}/tests/${_tst}.opts
    res=${?}

    if [[ -x "${_tdir}/tests/${_tst}.post" ]]; then
        ${_tdir}/tests/${_tst}.post
    fi

    _save_tree
    _dump_logs ${_rundir}
    _verify_output ${res} ${tst} ${benchmark} ${status}
    res=${?}
    let errs=${errs}+${res}
    _reset_state
done < ${_testroot}/tests.lis

# Final clean up, if there are no failures, we'll be able to remove the
# hierarchy entirely.
rm -rf ${_testroot}/opt ${_testroot}/tests.lis
rmdir ${_testroot} > /dev/null 2>&1

if [[ ${errs} -gt 0 ]]; then
    sts=1
else
    sts=0
fi
exit ${sts}
