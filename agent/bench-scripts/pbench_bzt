#!/usr/bin/env python


"""
This script generates a bzt taurus yml file and executes a jmeter performance test based on it.
"""

import argparse
import subprocess
import os
import sys

try:
    import yaml
except ImportError:
    raise ImportError('PyYAML module not found. Please install with: "sudo pip install PyYAML"')


class BztConfWriter:
    def __init__(self, args):
        self.args = args
        self.bzt_conf = dict()
        self.bzt_conf['execution'] = []
        self.bzt_conf['scenarios'] = {}
        self.bzt_conf['reporting'] = []
        self.bzt_conf['modules'] = {}

    def create_scenario_file(self):
        # Add executions and scenarios
        if self.args.scenario == "simple":
            count = 1
            with open(self.args.url_file) as f:
                for line in f:
                    scenario_nbr = self.args.scenario + str(count)
                    self.bzt_conf['execution'].append({'concurrency': self.args.concurrency,
                                                       'hold-for': self.args.hold_for,
                                                       'ramp-up': self.args.ramp_up,
                                                       'scenario': scenario_nbr})

                    self.bzt_conf['scenarios'][scenario_nbr] = {'requests': [self.args.prefix + line.strip()]}
                    count += 1

            self.bzt_conf['modules']['blazemeter'] = {'browser-open': False, 'test': self.args.test_name}
            self.bzt_conf['modules']['console'] = {'disable': True}
            self.bzt_conf['reporting'].append({'module': 'final_stats', 'dump-csv': self.args.stats_file})

            self.write_yaml_file(self.args.out_yml_file)

        elif self.args.scenario == "key-value-put":
            pass

        elif self.args.scenario == "key-value-get":
            pass

    def write_yaml_file(self, f):
        with open(f, 'w') as ymlfile:
            ymlfile.write("---\n")
            ymlfile.write(yaml.dump(self.bzt_conf, default_flow_style=False))


def which(cmd):
    def is_executable(path):
        return os.path.isfile(path) and os.access(path, os.X_OK)

    path, name = os.path.split(cmd)
    if path:
        if is_executable(cmd):
            return cmd
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            path = path.strip('"')
            executable = os.path.join(path, cmd)
            if is_executable(executable):
                return executable
    return None

def parser():
    parser_obj = argparse.ArgumentParser(description="This script generates a taurus yml cfg and, based on \
                                         that file, executes a bzt jmeter performance test.\
                                         E.g.: pbench_bzt.py -u jmeter_urls/4_http_urls")

    parser_obj.add_argument('-u', '--url_file', action="store", dest="url_file", type=str, required=True)
    parser_obj.add_argument('-c', '--concurrency', action="store", dest="concurrency", type=str, default=100)
    parser_obj.add_argument('-r', '--ramp-up', action="store", dest="ramp_up", type=str, default='10s')
    parser_obj.add_argument('-d', '--hold_for', action="store", dest="hold_for", type=str, default='1m')
    parser_obj.add_argument('-s', '--scenario', action="store", dest="scenario", type=str, default='simple')
    parser_obj.add_argument('-o', '--out_yml_file', action="store", dest="out_yml_file",
                            type=str, default='/tmp/bzt.yml')
    parser_obj.add_argument('-n', '--test_name', action="store", dest="test_name", type=str, default='OSE')
    parser_obj.add_argument('-p', '--prefix', action="store", dest="prefix", type=str, default='http://')
    parser_obj.add_argument('-f', '--stats_file', action="store", dest="stats_file",
                            type=str, default='/tmp/taurus.csv')

    return parser_obj.parse_args()


if __name__ == '__main__':
    opt_args = parser()
    program = 'bzt'

    bzt = BztConfWriter(opt_args)
    bzt.create_scenario_file()

    executable = which(program)
    if executable is not None:
        try:
            subprocess.check_call([executable, opt_args.out_yml_file])
        except subprocess.CalledProcessError:
            print("%s has returned in error: %s" % (program, subprocess.CalledProcessError.returncode))
    else:
        sys.exit("Either %s is not installed, or the current user does not have permission to execute it.\n"
                 "http://gettaurus.org/docs/Installation/" % program)
