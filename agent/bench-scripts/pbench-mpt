#!/bin/bash

app_path=`dirname $0`

script_path=`dirname $0`
script_name=`basename $0`
pbench_bin="`cd ${script_path}/..; /bin/pwd`"

# source the base script
. "$pbench_bin"/base

benchmark_rpm="msg-perf-tool"
benchmark="mpt"
ver=0.1.1

#Defaults
export benchmark_run_dir=""
broker_url=amqp://localhost:5672/test.performance.queue

# TODO: find the appropriate balance here. Ideally, messaging-performance
# tests should be able to determine the sustainable performance. Too short
# runs may not be able to hit performance bottlenecks on the broker. Too long
# runs may exhaust resources, not be feasible, etc.
duration=10
message_sizes=32,256

# TODO: possibly a bit too conservative ...
parallel_instances=1,5

# TODO: this should be determined automatically
throttle=0

install_only=n

function mpt_usage() {
  printf "The following options are available:\n"
  printf "\n"
  printf -- "\t-h --help\n"
  printf "\t\tdisplay this help message\n"
  printf -- "\t--install\n"
  printf "\t\tinstall only\n"
  printf -- "\t-b str --broker-url=str    (default is $broker_url)\n"
  printf "\t\tURL to access the broker (ie: amqp://hostname:5672/queue.name or stomp://hostname:5672/queue.name)\n"
  printf -- "\t-d int --duration=int    (default is $duration)\n"
  printf "\t\tduration of the performance test in minutes\n"
  printf -- "\t-s int[,int] --message-sizes=int[,int] (default is $message_sizes)\n"
  printf "\t\tmessage sizes in bytes (default is $message_sizes)\n"
  printf -- "\t-p int[,int] --parallel-instances=int[,int] (default is $parallel_instances)\n"
  printf "\t\tnumber of concurrent instances of the sender and receiver (default is $parallel_instances)\n"
  printf -- "\t-T int --throttle=int (default is $throttle)\n"
  printf "\t\tmaximum number of mesages (per second) allowed per sender connection (default is $throttle, 0 means unlimited)\n"
}

function mpt_process_options() {
  ARGS=$(getopt -o hib:d:s:p:T: --longoptions "help,install,broker:,duration:,message-sizes:,parallel-instances:,throttle:" -n "$0" -- "$@");
  eval set -- "$ARGS";
  while true; do
    case "$1" in
      -i|--install)
        shift
        export install_only="y"
      ;;
      -b|--broker)
        shift
        export broker_url="$1"
        shift
      ;;
      -d|--duration)
        shift
        export duration="$1"
        shift
      ;;
      -s|--message-sizes)
        shift
        export message_sizes="$1"
        shift
      ;;
      -p|--parallel-instances)
        shift
        export parallel_instances="$1"
        shift
      ;;
      -t|--throttle)
        shift
        export throttle="$1"
        shift
      ;;
      -h|--help)
        shift
        mpt_usage
        exit 0
      ;;
      --)
        shift
        break
      ;;
    esac
  done

  benchmark_run_dir="${pbench_run}/${benchmark}_${config}_${date_suffix}"
}

function mpt_check_options() {
  if [ ${install_only} == "y" ] ; then
    return
  fi

  if [[ -z "${broker_url}" ]] ; then
    echo -e "Broker is a required option (-b)\n"

    mpt_usage
    exit 1
  fi

  if [[ -z "${duration}" ]] ; then
    echo -e "Either the test duration or the message count should be informed (-d or -c)\n"
    mpt_usage
    exit 1
  fi

  if [[ -z "${parallel_instances}" ]] ; then
    echo -e "Parallel instances is a required option (-p)\n"
    mpt_usage
    exit 1
  fi

  echo "Broker URL: ${broker_url}"
}

function mpt_stop_test() {
  echo "Stopping the test"

  killall -INT mpt-receiver
  killall -INT mpt-sender

  killall -TERM mpt-receiver || echo ""
  killall -TERM mpt-sender || echo ""

  exit
}

function mpt_run_by_duration() {
  local message_size=$1
  local instance_count=$2
  local log_dir=$3


  echo "Lauching the receiver"
  export pid_receiver=`mpt-receiver -b ${broker_url} --log-level=STAT --duration=${duration} -p ${instance_count} --logdir=${log_dir} -s ${message_size} --daemon`

  echo "Lauching the sender"
  export pid_sender=`mpt-sender -b ${broker_url} -t ${throttle} --log-level=STAT --duration ${duration} -p ${instance_count} --logdir=${log_dir} -s ${message_size} --daemon`

  # Sleeps for a little longer than the test duration so that it gives some time
  # for the program to finish and flush data

  echo "Sleeping for ${duration}m15s"
  sleep 15s "${duration}m"
}

function mpt_run_test() {
  # Explanation: we trap the exit/kill/termination of the script, so that if the
  # test is aborted, we terminate the daeamons
  trap mpt_stop_test SIGINT SIGTERM

  echo "Saving mpt test results to ${benchmark_run_dir}"

  test_start_time=$(date '+%Y-%m-%d %H:%M:%S')
  echo "Test start time: ${test_start_time}"

  # TODO: multiple test iterations may require coordination with the broker
  # (ie: do we want to ensure the broker is cold by stopping it after every
  # test iteration? )
  local count=1
  for parallel_instance in `echo $parallel_instances | sed -e s/,/" "/g`; do
    for message_size in `echo $message_sizes | sed -e s/,/" "/g`; do
      it_start_time=$(date '+%Y-%m-%d %H:%M:%S')
      echo "Iteration (p${parallel_instance} ${message_size}KiB) start time: ${it_start_time}"

      iteration="${count}-p${parallel_instance}-${message_size}KiB"
      iteration_dir=$benchmark_run_dir/$iteration
      mkdir -p ${iteration_dir}
      mpt_run_by_duration ${message_size} ${parallel_instance} ${iteration_dir}

      it_end_time=$(date '+%Y-%m-%d %H:%M:%S')
      echo "Iteration (p${parallel_instance} ${message_size}KiB) end time: ${it_end_time}"
    done
  done

  test_end_time=$(date '+%Y-%m-%d %H:%M:%S')
  echo "Test end time: ${test_end_time}"
}


# Ensure the right version of the benchmark is installed
function mpt_install() {
  # TODO: since msg-perf-tool is installed via COPR, check what is the
  # recommended approach

  check_enable_copr orpiske litestomp
  check_enable_copr orpiske msg-perf-tool

	if check_install_rpm $benchmark_rpm $ver; then
		debug_log "[$script_name]$benchmark_rpm $ver is installed"
	else
		debug_log "[$script_name]$benchmark_rpm $ver installation failed, exiting"
		exit 1
	fi

  # TODO:support clients? remote testing?
}

mpt_process_options "$@"
mpt_check_options

echo "Installing the packages"
mpt_install

if [ ${install_only} == "y" ] ; then
  exit 0
fi

echo "Running the test"
mpt_run_test
