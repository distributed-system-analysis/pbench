#!/bin/bash
# -*- mode: shell-script; indent-tabs-mode: t; sh-basic-offset: 8; sh-indentation: 8; sh-indent-for-case-alt: + -*-

script_path=`dirname $0`
script_name=`basename $0`
pbench_bin="`cd ${script_path}/..; /bin/pwd`"

# source the base script
. "$pbench_bin"/base

# Perftool scripts must provide the following functions
# 1) Install the tool
# 2) Start data collection
# 3) Stop data collection
# 4) post-process the data

# Defaults
tool=$script_name
group=default
dir="/tmp"
mode=""
interval="10"
iteration="1"
options=""
inventory=$(ls /root/inv.*)

# Process options and arguments
opts=$(getopt -q -o idp --longoptions "inventory:,dir:,group:,iteration:,interval:,options:,start,stop,install,postprocess" -n "getopt.sh" -- "$@");
if [ $? -ne 0 ]; then
	printf "\n"
	printf "$script_name: you specified an invalid option\n\n"
	printf "The following options are available: \n\n"
	printf -- "\t--install,			install this perf tool\n"
	printf "\n"
	printf -- "\t--start|stop|postprocess	start/stop/post-process the data collection\n"
	printf -- "\t--iteration=int 		the iteration (required)\n"
	printf -- "\t--group=str		the perftool group (required)\n"
	printf -- "\t--dir=str			directory to store data collection (required)\n"
	printf -- "\t--interval=int		number of seconds between each data collection\n"
	printf -- "\t--options=str		options passed directly to the tool\n"
        printf -- "\t--inventory=str            path to the inventory file"
	exit 1
fi
eval set -- "$opts";
while true; do
	case "$1" in
		--install)
		mode="install"
		shift;
		;;
		--start)
		mode="start"
		shift;
		;;
		--stop)
		mode="stop"
		shift;
		;;
		--postprocess)
		mode="postprocess"
		shift;
		;;
                --inventory)
                shift;
                if [ -n "$1" ]; then
                        inventory="$1"
                        shift
                fi
                ;;
		-d|--dir)
		shift;
		if [ -n "$1" ]; then
			dir="$1"
			shift
		fi
		;;
		-g|--group)
		shift;
		if [ -n "$1" ]; then
			group="$1"
			shift
		fi
		;;
		-i|--iteration)
		shift;
		if [ -n "$1" ]; then
			iteration="$1"
			shift
		fi
		;;
		--interval)
		shift;
		if [ -n "$1" ]; then
			interval="$1"
			shift
		fi
		;;
		-o|--options)
		shift;
		if [ -n "$1" ]; then
			options="$1"
			shift
		fi
		;;
		--)
		shift;
		break;
		;;
	esac
done
tool_dir="$dir/tools-$group"
tool_output_dir=$tool_dir/$tool # all tools keep data in their tool specific dir
tool_pid_file=$pbench_tmp/$group.$iteration.$tool.pid
tool_stderr_file=$tool_output_dir/$tool-stderr.txt
tool_log=$tool_output_dir/tool.log
## create directory to save the keys from openshift master, hosts
mkdir -p /run/pbench/keys
## parse openshift inventory file
cat "$inventory" | awk -F " " '{ print $1 }' | sed -n '/^\[masters\]/,/^$/p' | awk '{if (NR!=1) {print}}' | sed '/^$/d' > /run/pbench/inv_hosts
case "$mode" in
	install)
	which go &>/dev/null
	if [[ $(echo $?) != 0 ]]; then
		yum -y install go &>/dev/null
		mkdir $pbench_install_dir/.go	
		echo "GOPATH=$pbench_install_dir/.go" >> ~/.bashrc
		echo "export GOPATH" >> ~/.bashrc
		echo "PATH=\$PATH:\$GOPATH/bin # Add GOPATH/bin to PATH for scripting" >> ~/.bashrc
		source ~/.bashrc
	fi
	go get github.com/prometheus/prom2json
	go install github.com/prometheus/prom2json
	;;
	start)
	mkdir -p $tool_output_dir/json
	while read -u 9 master; do
		tool_cmd="$script_path/datalog/$tool-datalog $master $interval $tool_log"
		metrics_data=$tool_output_dir/$master-stdout.txt
		debug_log "$script_name: running $tool_cmd"
		$tool_cmd >"$metrics_data" 2>"$tool_stderr_file" & echo $! >>$tool_pid_file
	done 9</run/pbench/inv_hosts
	wait
	;;
	stop)
	while read -u 10 pid; do
		debug_log "stopping $script_name"
		kill $pid
	done 10<"$tool_pid_file"
	/bin/rm "$tool_pid_file"
	;;
	postprocess)
	if [ -z "$options" ]; then
		debug_log "postprocessing $script_name"
		while read -u 11 master;do
			$script_path/postprocess/$script_name-postprocess $tool_output_dir/$master-stdout.txt $tool_output_dir/json/$master.json
		done 11</run/pbench/inv_hosts
	else
		debug_log "Non-default options $options: skipping postprocessing for $script_name"
	fi
	/bin/rm /run/pbench/inv_hosts
	;;
esac
