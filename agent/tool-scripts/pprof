#!/usr/bin/env bash

script_path=`dirname $0`
script_name=`basename $0`
pbench_bin="`cd ${script_path}/..; /bin/pwd`"

# source the base script
. "$pbench_bin"/base

# Perftool scripts must provide the following functions
# 1) Install the tool
# 2) Start data collection
# 3) Stop data collection
# 4) post-process the data

# Defaults
tool="pprof"
tool_bin=${GOROOT:-/usr}/bin/go
tool_package="golang"
group="default"
mode="none"
iteration="1"
interval=60

opts=$(getopt -o d --longoptions "dir:,group:,iteration:,osecomponent:,interval:,inventory:,start,stop,install,postprocess" -n "getopt.sh" -- "$@");

eval set -- "$opts"; 
while true ; do 
    case "$1" in 
    --install)
        mode="install"
        shift;
    ;;
    --start)
        mode="start"
        shift;
    ;;
    --stop)
        mode="stop"
        shift;
    ;;
    --postprocess)
        mode="postprocess"
        shift;
    ;;
    -d|--dir)
        shift;
        if [ -n "$1" ]; then
            dir="$1"
            shift
        fi
    ;;
    -g|--group)
        shift;
        if [ -n "$1" ]; then
            group="$1"
            shift
        fi
    ;;
    -i|--iteration)
        shift;
        if [ -n "$1" ]; then
            iteration="$1"
            shift
        fi
    ;;
    --osecomponent)
        shift; 
        if [ -n "$1" ]; then 
            osecomponent="$1"
            shift;
        fi
    ;;
    --interval)
        shift;
        if [ -n "$1" ]; then 
            interval="$1"
            shift;
        fi
    ;; 
    --inventory)
        shift;
        if [ -n "$1" ]; then
            inventory="$1"
            shift
        fi
    ;;
    --)
        shift;
        break;
    ;;
    *)
        echo "what's this? [$1]"
        shift;
        break;
    ;; 
esac
done 

## check if the inventory variable is set correctly
if [[ ! -s "$inventory" ]] || [[ ! -f "$inventory" ]]; then
    echo "ERROR: Please check if the inventory file exists, is not empty and the inventory variable is not set to a directory"
    exit 1
fi
declare -a hosts=($(cat $inventory | sed -n '/^\[pprof\]/,/^$/p' | awk 'length {if (NR!=1) {print}}'))
declare -a masters=($(cat $inventory | sed -n '/^\[masters\]/,/^$/p' | awk 'length {if (NR!=1) {print}}'))

tool_cmd="$tool_bin $record_opts"
tool_dir="$dir/tools-$group"
if [[ ! -d $tool_dir ]]; then
    echo "ERROR: Please check to be sure \"--dir=$dir\" and \"--group=$group\" are correct since the directory \"$tool_dir\" does not exist."
    exit 1
fi
tool_output_dir=$tool_dir/$tool # all tools keep data in their tool specific dir
export PPROF_TMPDIR=$tool_output_dir

_pprof_heap() {
    datestamp=$1
    server=$2
    target=$3
    suffix=$4
    oc get --raw /debug/pprof/heap --server ${server} > ${pbench_tmp}/${target}${suffix}_heap && go tool ${tool} -text -seconds=${interval} -output ${PPROF_TMPDIR}/${target}/${datestamp}${suffix}_heap.txt ${pbench_tmp}/${target}${suffix}_heap
}

_pprof_profile() {
    datestamp=$1
    server=$2
    target=$3
    suffix=$4
    oc get --raw /debug/pprof/profile?seconds=${interval} --server ${server} > ${pbench_tmp}/${target}${suffix}_profile && go tool ${tool} -text -seconds=${interval} -output ${PPROF_TMPDIR}/${target}/${datestamp}${suffix}_profile.txt ${pbench_tmp}/${target}${suffix}_profile
}

get_masters() {
    declare -A master_pids
    datestamp=$(date +%Y%m%d%H%M%S)
    for master in "${masters[@]}"; do
        _pprof_profile ${datestamp} https://${master}:8443 ${master} "_api" &
        master_pids[${master}_api]=$!
        _pprof_heap    ${datestamp} https://${master}:8443 ${master} "_api" &
        master_pids[${master}_api_heap]=$!
        _pprof_profile ${datestamp} https://${master}:8444 ${master} "_controller" &
        master_pids[${master}_controller]=$!
        _pprof_heap    ${datestamp} https://${master}:8444 ${master} "_controller" &
        master_pids[${master}_controller_heap]=$!
    done
    for pid in ${master_pids[*]}; do
        wait ${pid}
    done
}

get_hosts() {
    declare -A node_pids
    datestamp=$(date +%Y%m%d%H%M%S)
    for host in "${hosts[@]}"; do
        _pprof_profile ${datestamp} https://${host}:10250 ${host} "" &
        node_pids[${host}]=$!
        _pprof_heap    ${datestamp} https://${host}:10250 ${host} "" &
        node_pids[${host}_heap]=$!
    done
    for pid in ${node_pids[*]}; do
        wait ${pid}
    done
}

loop() {
    # Loop infinitely executing the given "operation" once every
    # interval.
    operation=$1
    current_epoch=$(date +%s.%N)
    target_epoch=$current_epoch
    while true; do
        # Calculate the absolute time of the interval
        target_epoch=$(echo ${target_epoch}+${interval} | bc -l)

        $operation

        # Now that the command has completed for the interval,
        # recalculate the remaining time in the interval to sleep
        # in case the command above runs short.
        current_epoch=$(date +%s.%N)
        sleep_seconds=$(echo "if (${target_epoch} > ${current_epoch}) ${target_epoch}-${current_epoch} else 0" | bc -l)
        sleep ${sleep_seconds}
    done
}

collect_data() {
    # Fork one process to fetch all the data from masters (APIs and
    # Controllers).
    loop get_masters &
    # The main process will fetch from all the nodes.
    loop get_hosts
    # NOTE: this will never exit, and is expected to be killed by the
    # "stop" operation below.
} 

case "$mode" in 
    install)
        check_install_rpm $tool_package 
    ;; 
    start)
        for master in "${masters[@]}"; do
            mkdir -p ${tool_output_dir}/${master}
        done
        for host in "${hosts[@]}"; do
            mkdir -p ${tool_output_dir}/${host}
        done
        collect_data
    ;; 
    stop)
        # killing pprof processes at end on of iteration 
        for pprof_process in $(ps aux | grep [p]bench-tool-$tool | awk '{print $2}'); do kill -9 $pprof_process; done
        rm ${pbench_tmp}/*_profile && rm ${pbench_tmp}/*_heap
    ;; 
    postprocess)
        printf "This script does not do any postprocessing.\n"
        printf "Data already collected.\n" 
        find ${tool_output_dir} -ls
    ;; 
esac 
