#!/usr/bin/env bash

script_path=`dirname $0`
script_name=`basename $0`
pbench_bin="`cd ${script_path}/..; /bin/pwd`"

# source the base script
. "$pbench_bin"/base

# Perftool scripts must provide the following functions
# 1) Install the tool
# 2) Start data collection
# 3) Stop data collection
# 4) post-process the data

# Defaults
tool=pprof
tool_bin=${GOROOT:-/usr}/bin/go
tool_package=golang
group=default
mode=""
iteration="1"
options="none"
interval=60

opts=$(getopt -o d --longoptions "dir:,group:,iteration:,osecomponent:,interval:,inventory:,start,stop,install,postprocess" -n "getopt.sh" -- "$@");

eval set -- "$opts"; 
while true ; do 
    case "$1" in 
    --install)
        mode="install"
        shift;
    ;;
    --start)
        mode="start"
        shift;
    ;;
    --stop)
        mode="stop"
        shift;
    ;;
    --postprocess)
        mode="postprocess"
        shift;
    ;;
    -d|--dir)
        shift;
        if [ -n "$1" ]; then
            dir="$1"
            shift
        fi
    ;;
    -g|--group)
        shift;
        if [ -n "$1" ]; then
                group="$1"
                shift
        fi
      ;;
     -i|--iteration)
        shift;
        if [ -n "$1" ]; then
           iteration="$1"
           shift
        fi
      ;;
    --osecomponent)
        shift; 
        if [ -n "$1" ]; then 
            osecomponent="$1"
            shift;
        fi
    ;;
    --interval)
        shift;
        if [ -n "$1" ]; then 
            interval="$1"
            shift;
        fi
    ;; 
    --inventory)
        shift;
        if [ -n "$1" ]; then
            inventory="$1"
            shift
        fi
    ;;
    --)
        shift;
        break;
    ;;
    *)
        echo "what's this? [$1]"
        shift;
        break;
    ;; 
esac
done 

## check if the inventory variable is set correctly
if [[ ! -s "$inventory" ]] || [[ ! -f "$inventory" ]]; then
	echo "Please check if the inventory file exists, is not empty and the inventory variable is not set to a directory"
	exit 1
fi

tool_cmd="$tool_bin $record_opts"
tool_dir="$dir/tools-$group"
tool_output_dir=$tool_dir/$tool # all tools keep data in their tool specific dir
export PPROF_TMPDIR=$tool_output_dir
declare -a hosts=($(cat $inventory | sed -n '/^\[pprof\]/,/^$/p' | awk 'length {if (NR!=1) {print}}'))
declare -a masters=($(cat $inventory | sed -n '/^\[masters\]/,/^$/p' | awk 'length {if (NR!=1) {print}}'))

collect_data() {
    get_masters &
    get_hosts
} 

get_masters() {
    declare -A master_pids
    while true; do
        for master in "${masters[@]}"; do
            oc get --raw /debug/pprof/profile?seconds=${interval} --server https://${master}:8443 > ${pbench_tmp}/${master}_api_profile && ${tool_bin} tool ${tool} -text -seconds=${interval} -output ${PPROF_TMPDIR}/${master}/$(date +%Y-%m-%d:%H:%M:%S)_api_profile.txt ${pbench_tmp}/${master}_api_profile &
            master_pids[${master}_api]=$!
            oc get --raw /debug/pprof/heap --server https://${master}:8443 > ${pbench_tmp}/${master}_api_heap && ${tool_bin} tool ${tool} -text -seconds=${interval} -output ${PPROF_TMPDIR}/${master}/$(date +%Y-%m-%d:%H:%M:%S)_api_heap.txt ${pbench_tmp}/${master}_api_heap &
            master_pids[${master}_api_heap]=$!
            oc get --raw /debug/pprof/profile?seconds=${interval} --server https://${master}:8444 > ${pbench_tmp}/${master}_controller_profile && ${tool_bin} tool ${tool} -text -seconds=${interval} -output ${PPROF_TMPDIR}/${master}/$(date +%Y-%m-%d:%H:%M:%S)_controller_profile.txt ${pbench_tmp}/${master}_controller_profile &
            master_pids[${master}_controller]=$!
            oc get --raw /debug/pprof/heap --server https://${master}:8444 > ${pbench_tmp}/${master}_controller_heap && ${tool_bin} tool ${tool} -text -seconds=${interval} -output ${PPROF_TMPDIR}/${master}/$(date +%Y-%m-%d:%H:%M:%S)_controller_heap.txt ${pbench_tmp}/${master}_controller_heap &
            master_pids[${master}_controller_heap]=$!
        done
	for pid in ${master_pids[*]}; do
            wait ${pid}
        done
    done
}

get_hosts() {
    declare -A node_pids
    while true; do
        for host in "${hosts[@]}"; do
            oc get --raw /debug/pprof/profile?seconds=${interval} --server https://${host}:10250 > ${pbench_tmp}/${host}_profile && ${tool_bin} tool ${tool} -text -seconds=${interval} -output ${PPROF_TMPDIR}/${host}/$(date +%Y-%m-%d:%H:%M:%S)_profile.txt ${pbench_tmp}/${host}_profile &
            node_pids[${host}]=$!
            oc get --raw /debug/pprof/heap --server https://${host}:10250 > ${pbench_tmp}/${host}_heap && ${tool_bin} tool ${tool} -text -seconds=${interval} -output ${PPROF_TMPDIR}/${host}/$(date +%Y-%m-%d:%H:%M:%S)_heap.txt ${pbench_tmp}/${host}_heap &
            node_pids[${host}_heap]=$!
        done
	for pid in ${node_pids[*]}; do
            wait ${pid}
        done
    done
}

case "$mode" in 
    install)
        check_install_rpm $tool_package 
    ;; 
    start)
    	for master in "${masters[@]}"; do
    	    mkdir -p ${tool_output_dir}/${master}
    	done
    	for host in "${hosts[@]}"; do
    	    mkdir -p ${tool_output_dir}/${host}
    	done
        collect_data
    ;; 
    stop)
        # killing pprof processes at end on of itteration 
        for pprof_process in $(ps aux | grep pbench-tool-$tool | grep -v grep | awk '{print $2}'); do kill -9 $pprof_process; done
        rm /tmp/*_profile && rm /tmp/*_heap
    ;; 
    postprocess)
        printf "This script does not do any postprocessing\n"
        printf "Data already collected\n" 
        ls -l ${tool_output_dir}
    ;; 
esac 
