#!/bin/bash
# -*- mode: shell-script; indent-tabs-mode: t; sh-basic-offset: 8; sh-indentation: 8; sh-indent-for-case-alt: + -*-

script_name="$(basename $0)"
script_path="$(dirname $(realpath $0))"
pbench_bin="$(dirname ${script_path})"

# source the base script
. "${pbench_bin}"/base

# Perftool scripts must provide the following functions
# 1) Install the tool
# 2) Start data collection
# 3) Stop data collection
# 4) post-process the data

# Defaults
tool=${script_name}
tool_bin=/usr/bin/${tool}
tool_package_name=${tool}
group=default
dir=""
mode=""
iteration="1"
options="none"
record_opts="record -a --freq=100"
report_opts="report --show-nr-samples -I"

function usage {
	printf "The following options are available for the ${script_name} tool: \n\n"
	printf -- "\t-h     --help,			this usage message\n"
	printf -- "\t       --install,			install this perf tool\n"
	printf -- "\t       --start|stop|postprocess	start/stop/post-process the data collection\n"
	printf -- "\t-i int --iteration=int 		the iteration (required)\n"
	printf -- "\t-g str --group=str			the perftool group (required)\n"
	printf -- "\t-d str --dir=str			directory to store data collection (required)\n"
	printf -- "\t       --callgraph			generate a call graph (--record-opts and --report-opts should not be used with this option)\n"
	printf -- "\t-r str --record-opts=str		options one would use to record perf data, for example: 'record -a'\n"
	printf -- "\t-p str --report-opts=str		options one would use to report perf data, for example: 'report'\n"
}

# Process options and arguments
opts=$(getopt -o d:hg:i:r:p: --longoptions "dir:,group:,iteration:,callgraph,record-opts:,report-opts:,start,stop,install,postprocess,help" -n "getopt.sh" -- "$@");
if [ $? -ne 0 ]; then
	printf "\n"
	printf "$script_name: you specified an invalid option\n\n"
	usage
	exit 1
fi
eval set -- "$opts";
while true; do
	case "$1" in
	--install)
		mode="install"
		shift;
		;;
	--start)
		mode="start"
		shift;
		;;
	--stop)
		mode="stop"
		shift;
		;;
	--postprocess)
		mode="postprocess"
		shift;
		;;
	-d|--dir)
		shift;
		if [ -n "$1" ]; then
			dir="$1"
			shift
		fi
		;;
	-g|--group)
		shift;
		if [ -n "$1" ]; then
			group="$1"
			shift
		fi
		;;
	-i|--iteration)
		shift;
		if [ -n "$1" ]; then
			iteration="$1"
			shift
		fi
		;;
	--callgraph)
		shift;
		if [ -n "$1" ]; then
			record_opts="record -a --freq=100 -g"
			report_opts="report -I -g"
		fi
		;;
	-r|--record-opts)
		shift;
		if [ -n "$1" ]; then
			record_opts="$1"
			shift
		fi
		;;
	-p|--report-opts)
		shift;
		if [ -n "$1" ]; then
			report_opts="$1"
			shift
		fi
		;;
	-h|--help)
		shift;
		usage
		exit 0
		;;
	--)
		shift;
		break;
		;;
	*)
		shift;
		printf "\n"
		printf "$script_name: you specified an invalid option or parameter, $1\n\n"
		usage
		exit 1
		;;
	esac
done

tool_cmd="$tool_bin $record_opts"
tool_dir="$dir/tools-$group"
tool_output_dir=$tool_dir/$tool # all tools keep data in their tool specific dir
tool_cmd_file="$tool_output_dir/$tool.cmd"
tool_pid_file=$pbench_tmp/$group.$iteration.$tool.pid
tool_output_file=$tool_output_dir/$tool.txt
case "$mode" in
	install)
		check_install_rpm $tool_package_name
        	;;
	start)
		if ! cat /proc/mounts | grep -q debugfs; then
			mount -t debugfs none /sys/kernel/debug
		fi
		mkdir $tool_output_dir
		if [ $? -ne 0 ]; then
			error_log "$script_name: start -- unable to create directory $tool_output_dir"
			exit 1
		fi
	        echo "$tool_cmd" > $tool_cmd_file
		# call the tool and background it...
		$tool_cmd --output=$tool_output_dir/perf.data > "$tool_output_dir/perf-stdout.txt" 2> "$tool_output_dir/perf-stderr.txt" & echo $! > "$tool_pid_file"
		wait
		exit_status=0
		;;
	stop)
		if [[ -s "$tool_pid_file" ]]; then
			pid=`cat "$tool_pid_file"`
			if [ ! -z "$pid" ]; then
				kill -SIGINT $pid
				# wait for perf to finish recording.
				# if you do not wait, 'perf report' will not be correct.
				# perf is not a child process, so we cannot use "wait".
				# this is an alternative.
				pidcmd=`ps -p $pid | tail -1 | awk '{print $4}'`
				while [ -d /proc/$pid ]; do
					debug_log "waiting for PID $pid ($pidcmd) to finish"
					sleep 0.5
				done
			fi
			/bin/rm "$tool_pid_file"
			if [ -f $tool_output_dir/perf.data ]; then
				exit_status=0
			else
				warn_log "$script_name: stop - missing ${tool_output_dir}/perf.data file!"
				exit_status=1
			fi
		else
			warn_log "[$script_name]: tool is not running, nothing to stop"
			exit_status=1
		fi
		;;
	postprocess)
		if [ -f ${tool_output_dir}/perf.data ]; then
			# Collect the archive of perf information so the perf data can be
			# processed off host.  We explicitly ignore any errors since we
			# have already stopped the tool.  Note we have to use push/popd
			# since the "perf archive" command always creates the tar ball in
			# the local directory.
			pushd ${tool_output_dir} > /dev/null 2>&1
			$tool_bin archive ./perf.data > ./perf-archive.log 2>&1
			popd > /dev/null 2>&1
			# Generate the initial report.
			$tool_bin $report_opts -i ${tool_output_dir}/perf.data --stdio > ${tool_output_dir}/perf-report.txt 2> ${tool_output_dir}/perf-report.err
			xz --threads=0 ${tool_output_dir}/perf.data
			# only postprocess the perf report if the default options are used
			if echo $record_opts | grep -E -q -- -g\|--callgraph; then
				debug_log "$script_name: not going to run perf postprocess script since this report contains a callgraph"
			else
				$script_path/postprocess/$script_name-postprocess ${tool_output_dir}
			fi
			xz --threads=0 ${tool_output_dir}/perf-report.txt
			# Provide a README file to help users work with perf data locally.
			cp ${script_path}/${script_name}.README ${tool_output_dir}/README
			exit_status=0
		else
			warn_log "$script_name: postprocess - missing ${tool_output_dir}/perf.data file!"
			exit_status=1
		fi
		;;
	*)
		error_log "$script_name: unexpected mode: $mode, no action taken"
		exit_status=1
		;;
esac
exit $exit_status
