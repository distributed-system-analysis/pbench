#!/bin/bash

# Example usage: pbench-register-tool --name=haproxy-ocp -- --interval=10 --counters-clear-all

script_path=`dirname $0`
script_name=`basename $0`
pbench_bin="`cd ${script_path}/..; /bin/pwd`"

# source the base script
. "$pbench_bin"/base

# Perftool scripts must provide the following functions
# 1) Install the tool
# 2) Start data collection
# 3) Stop data collection
# 4) post-process the data

# Defaults
tool=$script_name
group=default
dir=""
mode=""
counters_clear_all=""
interval="10"
iteration="1"
options="none"
origin_master="/etc/sysconfig/origin-master"
ose_openshift_master="/etc/sysconfig/atomic-openshift-master"
router_namespace=default

# Functions
usage() {
    local err=$1

    cat <<_USAGE_ 1>&2
$script_name: you specified an invalid option

The following options are available:

    --install                   install this perf tool
    --start|stop|postprocess    start/stop/postprocess the data collection
    --collect                   collect mode, get the actual HAProxy statistics
    --counters-clear-all        clear all HAProxy counters at tool start
    --iteration=int             the iteration (required)
    --group=str                 the perftool group (required)
    --dir=str                   directory to store data collection (required)
    --interval=int              number of seconds between each data collection
_USAGE_

    test "$err" && exit $err
}

haproxy_data_collect() {
    local routers="$(oc get pod --no-headers -n ${router_namespace} | awk '/^router-/ {print $1}')"

    while true ; do
        for router in $routers ; do
            cmd="echo 'show stat' | socat - UNIX-CONNECT:/var/lib/haproxy/run/haproxy.sock"

            date '+timestamp: %s.%N' >> $tool_output_dir/${router}.csv
            oc exec "${router}" -n ${router_namespace} -- /bin/sh -c "$cmd" >> $tool_output_dir/${router}.csv &
        done
        wait
        sleep $interval
    done
}

haproxy_counters_clear() {
    for router in $(oc get pod --no-headers -n ${router_namespace} | awk '/^router-/ {print $1}') ; do
        cmd="echo 'clear counters all' | socat - UNIX-CONNECT:/var/lib/haproxy/run/haproxy.sock"
        oc exec "${router}" -n ${router_namespace} -- /bin/sh -c "$cmd" >> $tool_output_dir/${router}.csv &
    done
    wait
}

haproxy_config_collect() {
    local tag=$1
    local haproxy_config=/var/lib/haproxy/conf/haproxy.config
    local config_dir=$tool_output_dir/config/$tag
    mkdir -p $config_dir
    for router in $(oc get pod --no-headers -n ${router_namespace} | awk '/^router-/ {print $1}') ; do
        oc exec "${router}" -n ${router_namespace} -- /bin/sh -c "haproxy -vv" >> $config_dir/${router}-haproxy-vv.txt &
        oc exec "${router}" -n ${router_namespace} -- /bin/sh -c "cat ${haproxy_config}" >> $config_dir/${router}-haproxy.config &
    done
    wait
}

router_logs_collect() {
    local tag=$1
    local log_dir=$tool_output_dir/logs/$tag
    mkdir -p $log_dir
    # watch for reloads
    oc get pods -n ${router_namespace} | grep '^router-' >> $log_dir/oc_get_pods-router.log &
    for router in $(oc get pod --no-headers -n ${router_namespace} | awk '/^router-/ {print $1}') ; do
        oc logs "${router}" -n ${router_namespace} >> $log_dir/${router}.log &
    done
    wait
}

# Process options and arguments
opts=$(getopt -q -o idp --longoptions "dir:,group:,iteration:,interval:,start,stop,install,postprocess,collect,counters-clear-all,postprocess-script:" -n "getopt.sh" -- "$@")

if [ $? -ne 0 ]; then
    usage 1
fi

eval set -- "$opts"
unset opts
while true; do
    case "$1" in
    --install)
        mode="install"
        shift
    ;;
    --start)
        mode="start"
        shift
    ;;
    --stop)
        mode="stop"
        shift
    ;;
    --postprocess)
        mode="postprocess"
        shift
    ;;
    --collect)
        mode="collect"
        shift
    ;;
    --counters-clear-all)
        counters_clear_all="Y"
        shift
    ;;
    -d|--dir)
        shift
        if [ -n "$1" ]; then
            dir="$1"
            shift
        fi
    ;;
    -g|--group)
        shift
        if [ -n "$1" ]; then
            group="$1"
            shift
        fi
    ;;
    -i|--iteration)
        shift
        if [ -n "$1" ]; then
            iteration="$1"
            shift
        fi
    ;;
    --interval)
        shift
        if [ -n "$1" ]; then
            interval="$1"
            shift
        fi
    ;;
    --)
        shift
        break
    ;;
    *)
        usage 1
    ;;
    esac
done

tool_dir="$dir/tools-$group"
tool_output_dir=$tool_dir/$tool     # all tools keep data in their tool specific dir
tool_cmd_file="$tool_output_dir/$tool.cmd"
tool_pid_file=$pbench_tmp/$group.$iteration.$tool.pid
tool_stdout_file=$tool_output_dir/$tool-stdout.txt
tool_stderr_file=$tool_output_dir/$tool-stderr.txt

case "$mode" in
    install)
        if ! oc --help >/dev/null 2>&1 ; then
            printf "${script_name} needs an OpenShift client to work\n"
            exit 1
        fi
    ;;
    start)
        mkdir -p $tool_output_dir
        pushd $tool_output_dir >/dev/null
        echo "${0} --dir=${dir} --interval=${interval} --collect" >$tool_cmd_file
        chmod +x $tool_cmd_file
        debug_log "$script_name: running $tool_cmd"
        test "${counters_clear_all}" = Y && haproxy_counters_clear
        $tool_cmd_file >"$tool_stdout_file" 2>"$tool_stderr_file" & echo $! >$tool_pid_file
        router_logs_collect $mode
        haproxy_config_collect $mode
        popd >/dev/null
        wait
    ;;
    stop)
        router_logs_collect $mode
        haproxy_config_collect $mode
        pid=`cat $tool_pid_file`
        debug_log "stopping $script_name"
        kill $pid && /bin/rm -f $tool_pid_file
    ;;
    postprocess)
        debug_log "postprocessing $script_name"
        pushd $tool_output_dir >/dev/null
        $script_path/postprocess/$script_name-postprocess "$tool_output_dir" || exit $?
        popd >/dev/null
    ;;
    collect)
        pushd $tool_output_dir >/dev/null
        debug_log "collecting $script_name stats"
        haproxy_data_collect
        popd >/dev/null
    ;;
esac
