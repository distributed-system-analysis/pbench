#!/bin/bash

script_path=`dirname $0`
script_name=`basename $0`
pbench_bin="`cd ${script_path}/..; /bin/pwd`"

# source the base script
. "$pbench_bin"/base

# Perftool scripts must provide the following functions
# 1) Install the tool
# 2) Start data collection
# 3) Stop data collection
# 4) post-process the data

# Defaults
tool=strace
tool_bin=/usr/bin/$tool
group=default
dir=""
mode=""
iteration="1"
options="none"

# Process options and arguments
opts=$(getopt -q -o idp --longoptions "dir:,group:,iteration:,pid:,pattern:,start,stop,install,postprocess" -n "getopt.sh" -- "$@");
if [ $? -ne 0 ]; then
	printf "\n"
	printf "$script_name: you specified an invalid option\n\n"
	printf "The following options are available: \n\n"
	printf -- "\t--install,			install this perf tool\n"
	printf "\n"
	printf -- "\t--start|stop|postprocess	start/stop/post-process the data collection\n"
	printf -- "\t--iteration=int 		the iteration (required)\n"
	printf -- "\t--group=str		the perftool group (required)\n"
	printf -- "\t--dir=str			directory to store data collection (required)\n"
	printf -- "\t--pid=int		        a process ID to strace\n"
	printf -- "\t--pattern			strace any PID which name matches this string\n"

	exit 1
fi
eval set -- "$opts";
while true; do
	case "$1" in
		--install)
		mode="install"
		shift;
		;;
		--start)
		mode="start"
		shift;
		;;
		--stop)
		mode="stop"
		shift;
		;;
		--postprocess)
		mode="postprocess"
		shift;
		;;
		-d|--dir)
		shift;
		if [ -n "$1" ]; then
			dir="$1"
			shift
		fi
		;;
		-g|--group)
		shift;
		if [ -n "$1" ]; then
			group="$1"
			shift
		fi
		;;
		-i|--iteration)
		shift;
		if [ -n "$1" ]; then
			iteration="$1"
			shift
		fi
		;;
		--pid)
		shift;
		if [ -n "$1" ]; then
			pid_to_strace="$1"
			shift
		fi
		;;
		--pattern)
		shift;
		if [ -n "$1" ]; then
			pattern="$1"
			shift
		fi
		;;
		--)
		shift;
		break;
		;;
		*)
		break;
	esac
done

tool_dir="$dir/tools-$group"
tool_output_dir=$tool_dir/$tool # all tools keep data in their tool specific dir
case "$mode" in
	install)
        ;;
	start)
	if [ ! -z "$pattern" ]; then
		pids_to_strace=`ps aux | pgrep $pattern`
	fi
	pids_to_strace="$pids_to_strace $pid_to_strace"
	mkdir -p $tool_output_dir
        echo "$script_name: running $tool_cmd"
	for pid_to_strace in $pids_to_strace; do
		tool_stdout_file=$tool_output_dir/$tool-$pid_to_strace-stdout.txt
		tool_stderr_file=$tool_output_dir/$tool-$pid_to_strace-stderr.txt
		tool_pid_file=$pbench_tmp/$group.$iteration.$tool-$pid_to_strace.pid
		tool_cmd_file="$tool_output_dir/$tool-$pid_to_strace.cmd"
		tool_cmd="$tool_bin -p $pid_to_strace -c -o $tool_stdout_file"
		echo "$tool_cmd" > "$tool_cmd_file"
		chmod +x $tool_cmd_file
		$tool_cmd_file 2>"$tool_stderr_file" & echo $! >"$tool_pid_file"
	done
        wait
        ;;
        stop)
	if [[ -s "$tool_pid_file" ]]; then
		for tool_pid_file in `/bin/ls $pbench_tmp | grep "$group.$iteration.$tool"`; do
        		tool_pid=`cat "$pbench_tmp/$tool_pid_file"`
        		kill $tool_pid && /bin/rm "$pbench_tmp/$tool_pid_file"
		done
	else
		warn_log "[$script_name]: tool is not running, nothing to kill"
	fi
	;;
	postprocess)
	;;
esac

