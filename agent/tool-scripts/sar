#!/bin/bash
# -*- mode: shell-script; indent-tabs-mode: t; sh-basic-offset: 8; sh-indentation: 8; sh-indent-for-case-alt: + -*-

# NOTE: this script is used for mpstat, iostat, sar, and pidstat.  All are links to the same file

script_path=`dirname $0`
script_name=`basename $0`
pbench_bin="`cd ${script_path}/..; /bin/pwd`"

# source the base script
. "$pbench_bin"/base

# Perftool scripts must provide the following functions
# 1) Install the tool
# 2) Start data collection
# 3) Stop data collection
# 4) post-process the data

# Defaults
tool=$script_name
tool_package_name="pbench-sysstat"
tool_package_ver="11.2.0"
tool_bin=/usr/local/bin/$tool
group=default
dir="/tmp"
mode=""
interval="10"
iteration="1"
options=""

# Process options and arguments
opts=$(getopt -q -o idp --longoptions "dir:,group:,iteration:,interval:,options:,threads,patterns:,start,stop,install,postprocess" -n "getopt.sh" -- "$@");
if [ $? -ne 0 ]; then
	printf "\n"
	printf "$script_name: you specified an invalid option\n\n"
	printf "The following options are available: \n\n"
	printf -- "\t--install,			install this perf tool\n"
	printf "\n"
	printf -- "\t--start|stop|postprocess	start/stop/post-process the data collection\n"
	printf -- "\t--iteration=int 		the iteration (required)\n"
	printf -- "\t--group=str		the perftool group (required)\n"
	printf -- "\t--dir=str			directory to store data collection (required)\n"
	printf -- "\t--interval=int		number of seconds between each data collection\n"
	printf -- "\t--options=str		options passed directly to the tool\n"
	if [ "$script_name" == "pidstat" ]; then
		printf -- "\t--patterns=str[,str]       only collect information on process names which match this pattern (complicated patterns with special charaters may not work)\n"
		printf -- "                             for kvm, use --patterns=qemu,vhost\n"
		printf -- "\t--threads                  collect per-thread statistics\n"
	fi
	exit 1
fi
eval set -- "$opts";
while true; do
	case "$1" in
		--install)
		mode="install"
		shift;
		;;
		--start)
		mode="start"
		shift;
		;;
		--stop)
		mode="stop"
		shift;
		;;
		--postprocess)
		mode="postprocess"
		shift;
		;;
		-d|--dir)
		shift;
		if [ -n "$1" ]; then
			dir="$1"
			shift
		fi
		;;
		-g|--group)
		shift;
		if [ -n "$1" ]; then
			group="$1"
			shift
		fi
		;;
		-i|--iteration)
		shift;
		if [ -n "$1" ]; then
			iteration="$1"
			shift
		fi
		;;
		--interval)
		shift;
		if [ -n "$1" ]; then
			interval="$1"
			shift
		fi
		;;
		-o|--options)
		shift;
		if [ -n "$1" ]; then
			options="$1"
			shift
		fi
		;;
		--threads)
		shift;
		if [ -n "$1" ]; then
			threads="-t"
		fi
		;;
		--patterns) # for pidstat only
		shift;
		if [ -n "$1" ]; then
			pattern="-C \"$(echo $1 | sed -e 's/,/|/g')\" "
			shift
		fi
		;;
		--)
		shift;
		break;
		;;
	esac
done

tool_dir="$dir/tools-$group"
tool_output_dir=$tool_dir/$tool # all tools keep data in their tool specific dir
tool_cmd_file="$tool_output_dir/$tool.cmd"
tool_pid_file=$pbench_tmp/$group.$iteration.$tool.pid
tool_stdout_file=$tool_output_dir/$tool-stdout.txt
tool_stderr_file=$tool_output_dir/$tool-stderr.txt
case "$script_name" in
	mpstat)
	default_options="-P ALL"
	tool_cmd="$tool_bin $options $default_options $interval"
	;;
	iostat)
	default_options="-N -t -y -x -m"
	tool_cmd="$tool_bin $options $default_options $interval"
	;;
	sar)
	default_options="-A"
	tool_data_file="$tool_output_dir/$tool.data"
	tool_cmd="$tool_bin $options $default_options -o $tool_data_file $interval"
	;;
	pidstat)
	default_options="-l -w -u -h -d -r $threads -p ALL $pattern"
	tool_cmd="$tool_bin $options $default_options $interval"
	;;
esac
case "$mode" in
	install)
	check_install_rpm $tool_package_name $tool_package_ver
        ;;
	start)
	mkdir -p $tool_output_dir
	# force LANG=C
	echo "LANG=C $tool_cmd" >$tool_cmd_file
	chmod +x $tool_cmd_file
	debug_log "$script_name: running $tool_cmd"
	$tool_cmd_file >"$tool_stdout_file" 2>"$tool_stderr_file" & echo $! >$tool_pid_file
	wait
	;;
	stop)
	if [[ -s "$tool_pid_file" ]]; then
		pid=`cat "$tool_pid_file"`
		debug_log "stopping $script_name"
		kill $pid && /bin/rm "$tool_pid_file"
	else
		warn_log "[$script_name]: tool is not running, nothing to kill"
	fi
	;;
	postprocess)
	if [ -z "$options" ] ;then
		debug_log "postprocessing $script_name"
		$script_path/postprocess/$script_name-postprocess $tool_output_dir
	else
		debug_log "Non-default options $options: skipping postprocessing for $script_name"
	fi
	;;
esac
