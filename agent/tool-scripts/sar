#!/bin/bash
# -*- mode: shell-script; indent-tabs-mode: t; sh-basic-offset: 8; sh-indentation: 8; sh-indent-for-case-alt: + -*-

# NOTE: this script is used for mpstat, iostat, sar, and pidstat.  All are
# links to the same file.

script_path=$(dirname $0)
script_name=$(basename $0)
pbench_bin="$(realpath -e ${script_path}/..)"

# source the base script
. "$pbench_bin"/base

# Pbench tool scripts must provide the following functions
# 1) Install the tool
# 2) Start data collection
# 3) Stop data collection
# 4) post-process the data

# Defaults
tool=$script_name
tool_package_name="pbench-sysstat"
tool_package_ver="12.0.3"
tool_bin=/usr/local/bin/$tool
dir=""
mode=""
iteration=""
group=default
interval="10"
options=""
threads=""
pattern=""

function usage {
	printf -- "The following options are available:\n\n"
	printf -- "\t--install 			install this perf tool\n"
	printf -- "\n"
	printf -- "\t--start|stop|postprocess	start/stop/post-process the data collection\n"
	printf -- "\t--iteration=int 		the iteration (required)\n"
	printf -- "\t--group=str		the perftool group (required)\n"
	printf -- "\t--dir=str			directory to store data collection (required)\n"
	printf -- "\t--interval=int		number of seconds between each data collection\n"
	printf -- "\t--options=str		options passed directly to the tool\n"
	if [ "$script_name" == "pidstat" ]; then
		printf -- "\t--patterns=str[,str]       only collect information on process names\n"
		printf -- "\t                           which match this pattern (complicated\n"
		printf -- "\t                           patterns with special charaters may not\n"
		printf -- "\t                           work) for kvm, use --patterns=qemu,vhost\n"
		printf -- "\t--threads                  collect per-thread statistics\n"
	fi
}

# Process options and arguments
opts=$(getopt -q -o dgio --longoptions "dir:,group:,iteration:,interval:,options:,threads,patterns:,start,stop,install,postprocess" -n "getopt.sh" -- "$@");
if [[ $? -ne 0 ]]; then
	printf "\n"
	printf "$script_name: you specified an invalid option\n\n"
	usage
	exit 1
fi
eval set -- "$opts";
while true; do
	case "$1" in
	--install)
		mode="install"
		shift;
		;;
	--start)
		mode="start"
		shift;
		;;
	--stop)
		mode="stop"
		shift
		;;
	--postprocess)
		mode="postprocess"
		shift
		;;
	-d|--dir)
		shift
		if [[ -n "$1" ]]; then
			dir="$1"
			shift
		fi
		;;
	-g|--group)
		shift
		if [[ -n "$1" ]]; then
			group="$1"
			shift
		fi
		;;
	-i|--iteration)
		shift
		if [[ -n "$1" ]]; then
			iteration="$1"
			shift
		fi
		;;
	--interval)
		shift
		if [[ -n "$1" ]]; then
			interval="$1"
			shift
		fi
		;;
	-o|--options)
		shift
		if [[ -n "$1" ]]; then
			options="$1"
			shift
		fi
		;;
	--threads)
		threads="-t"
		shift
		;;
	--patterns)
		# for pidstat only
		shift
		if [[ -n "$1" ]]; then
			pattern="-C \"$(echo $1 | sed -e 's/,/|/g')\" "
			shift
		fi
		;;
	--)
		shift
		break
		;;
	*)
		printf -- "$script_name: Error: Invalid command line options\n\n" >&2
		usage
		exit 1
	esac
done

if [[ -z $mode ]]; then
	printf -- "$script_name: Error: one of the following options is required, --install|--start|--stop|--postprocess\n\n" >&2
	usage
	exit 1
fi

if [[ "$mode" != "install" ]]; then
	if [[ -z $dir || ! -d "$dir" ]]; then
		printf -- "$script_name: Error: --dir argument is required with a valid directory\n\n" >&2
		usage
		exit 1
	fi
	if [[ -z $iteration ]]; then
		printf -- "$script_name: Error: --iteration argument is required\n\n" >&2
		usage
		exit 1
	fi
	tool_dir="$dir/tools-$group"
	tool_output_dir=$tool_dir/$tool # all tools keep data in their tool specific dir
	tool_pid_file=$pbench_tmp/$group.$iteration.$tool.pid
fi

case "$mode" in
install)
	check_install_rpm $tool_package_name $tool_package_ver
        ;;
start)
	case "$script_name" in
	mpstat)
		default_options="-P ALL"
		tool_cmd="$tool_bin $default_options $options $interval"
		;;
	iostat)
		default_options="-N -t -y -x -m"
		tool_cmd="$tool_bin $default_options $options $interval"
		;;
	sar)
		default_options="-A"
		tool_data_file="$tool_output_dir/$tool.data"
		tool_cmd="$tool_bin $default_options $options -o $tool_data_file $interval"
		;;
	pidstat)
		default_options="-H -l -w -u -h -d -r $threads -p ALL $pattern"
		# ulimit is for all the files that might be opened by pidstat-convert
		tool_cmd="$tool_bin $default_options $options $interval | (ulimit -n 102400; $script_path/postprocess/$script_name-convert $tool_output_dir)"
		;;
	*)
		error_log "[$script_name]: Error: unsupported tool!" >&2
		exit 1
		;;
	esac
	tool_cmd_file="$tool_output_dir/$tool.cmd"
	tool_stdout_file=$tool_output_dir/$tool-stdout.txt
	tool_stderr_file=$tool_output_dir/$tool-stderr.txt
	mkdir -p $tool_output_dir
	if [[ $? -ne 0 ]]; then
		error_log "[$script_name]: failed to create tool output directory, $tool_output_dir"
        	exit 1
	fi
	# force LANG=C
	echo "LANG=C $tool_cmd" >$tool_cmd_file
	chmod +x $tool_cmd_file
	debug_log "$script_name: running $tool_cmd"
	$tool_cmd_file >"$tool_stdout_file" 2>"$tool_stderr_file" & echo $! >$tool_pid_file
	wait
	;;
stop)
	if [[ -s "$tool_pid_file" ]]; then
		pid=$(cat "$tool_pid_file")
		debug_log "stopping $script_name"
		kill $pid
		if [[ $? -ne 0 ]]; then
			warn_log "[$script_name]: failed to send SIGTERM to pid $pid"
		else
			/bin/rm "$tool_pid_file"
		fi
	else
		warn_log "[$script_name]: tool is not running, nothing to kill"
	fi
	;;
postprocess)
	if [ -z "$options" ] ;then
		debug_log "postprocessing $script_name"
		$script_path/postprocess/$script_name-postprocess $tool_output_dir
	else
		debug_log "Non-default options $options: skipping post-processing for $script_name"
	fi
	;;
*)
	error_log "[$script_name]: Error: unsupported mode ($mode)!"
	exit 1
	;;
esac
