#!/usr/bin/env python2

import sys, os, json, math
import subprocess, logging
from time import time, sleep

prog = os.path.basename(sys.argv[0])
host = sys.argv[1]
interval = int(sys.argv[2])
tool_log = sys.argv[3]
port = int(sys.argv[4])
cert = sys.argv[5]
selfsigned = sys.argv[6]
key = sys.argv[7]

if (cert == "None") or (key == "None"):
    command = "prom2json http://%s:%d/metrics" % (host, port)
else:
    command = "prom2json%s --cert=%s --key=%s https://%s:%d/metrics" % (
            " --accept-invalid-cert" if selfsigned == "true" else "", cert,
            key, host, port)

_unit_test_iterations = os.environ.get('_PBENCH_UNIT_TEST')
if _unit_test_iterations is not None:
    # Mock "time.time" and "time.sleep" functions so that we ensure we only
    # execute as many iterations ("sleep" cycles) as specified by the unit
    # test environment variable. 
    _unit_test_iterations = int(_unit_test_iterations)
    _sleep_iterations = 0
    _ts = 1234567890
    def _time(*args, **kwargs):
        """Each call to mock'd _time() increments the internal clock by
           one second.
        """
        global _ts
        _ts += 1
        return _ts
    time = _time
    _orig_sleep = sleep
    def _sleep(length):
        """Each call to mock'd _sleep() increments the internal clock by
           the amount of time requested for the sleep, and checks to see
           if we have exceeded the number of times time.sleep() should be
           called before exiting the datalog. It calls the actual time.sleep
           for one second no matter how much time the actual sleep would
           have been.
        """
        global _ts
        global _sleep_iterations
        global _unit_test_iterations
        _sleep_iterations += 1
        if _sleep_iterations > _unit_test_iterations:
            sys.exit(0)
        global _orig_sleep
        _orig_sleep(1)
        _ts += int(length)
    sleep = _sleep

# Initial timestamp and next interval calcultion
time_stamp = time()
next_start = time_stamp + interval
intervals = 0
total_duration = 0
drifted = 0

while True:
    proc = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)
    prom2json_out, _ = proc.communicate()

    # Record how long prom2json took for use when we run beyond the
    # given interval.
    end_cmd_time_stamp = time()

    try:
        metrics_list = json.loads(prom2json_out)
    except Exception as e:
        logging.warn("[%s] json.loads(prom2json_out) failed with %r", prog, e)
    else:
        if type(metrics_list) is list:
            for item in metrics_list:
                del item['help']
                item["@timestamp"] = time_stamp
                print(json.dumps(item, sort_keys=True))
        else:
            logging.warn("[%s] json.loads(prom2json_out) did not return a"
                    " list", prog)

    # Record how long all the work took during this interval.
    endtime = time()

    intervals += 1
    duration = endtime - time_stamp
    total_duration += duration
    avg_duration = total_duration / intervals

    if endtime < next_start:
        # Sleep for the remainder of the interval
        sleep(next_start - endtime)
    elif endtime > next_start:
        drifted += 1
        logging.warn("[%s] interval exceeded now %d times: [interval: %d,"
                " start: %d, duration: %d, prom2json: %d]; please consider"
                " changing the interval to at least %d seconds",
                prog, drifted, interval, time_stamp, duration,
                end_cmd_time_stamp - time_stamp, int(math.ceil(avg_duration * 1.5)))
        # The current time, endtime, is now the end of this interval.
        next_start = endtime

    # The next interval is calculated from the end of the previous
    # interval.
    time_stamp = next_start
    next_start = time_stamp + interval
