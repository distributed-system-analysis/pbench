#!/bin/bash

script_path=`dirname $0`
script_name=`basename $0`
pbench_bin="`cd ${script_path}/..; /bin/pwd`"

# source the base script
. "$pbench_bin"/base

# Perftool scripts must provide the following functions
# 1) Install the tool
# 2) Start data collection
# 3) Stop data collection
# 4) post-process the data

# Defaults
tool=blktrace
tool_bin=/usr/bin/$tool
group=default
dir="/tmp"
mode=""
interval="10"
iteration="1"
options="none"

# Process options and arguments
opts=$(getopt -q -o p --longoptions "devices:,dir:,group:,iteration:,interval:,options:,start,stop,install,postprocess" -n "getopt.sh" -- "$@");
if [ $? -ne 0 ]; then
	printf "\n"
	printf "$script_name: you specified an invalid option\n\n"
	printf "The following options are available: \n\n"
	printf -- "\t--install                  install this perf tool\n"
	printf "\n"
	printf -- "\t--start|stop|postprocess   start/stop/post-process the data collection\n"
	printf -- "\t--iteration=int            the iteration (required)\n"
	printf -- "\t--group=str                the perftool group (required)\n"
	printf -- "\t--dir=str                  directory to store data collection (required)\n"
	printf -- "\t--devices=str              block devices to trace (required)\n"

	exit 1
fi
eval set -- "$opts";
while true; do
	case "$1" in
		--install)
		mode="install"
		shift;
		;;
		--start)
		mode="start"
		shift;
		;;
		--stop)
		mode="stop"
		shift;
		;;
		--postprocess)
		mode="postprocess"
		shift;
		;;
		-d|--dir)
		shift;
		if [ -n "$1" ]; then
			dir="$1"
			shift
		fi
		;;
		-g|--group)
		shift;
		if [ -n "$1" ]; then
			group="$1"
			shift
		fi
		;;
		-i|--iteration)
		shift;
		if [ -n "$1" ]; then
			iteration="$1"
			shift
		fi
		;;
		--interval)
		shift;
		if [ -n "$1" ]; then
			interval="$1"
			shift
		fi
		;;
		-d|--devices)
		shift;
		if [ -n "$1" ]; then
			devices="$1"
			shift
		fi
		;;
		--)
		shift;
		break;
		;;
	esac
done
devices=`echo $devices | sed -e s/","/" "/g`


tool_dir="$dir/tools-$group"
tool_output_dir=$tool_dir/$tool # all tools keep data in their tool specific dir
tool_cmd_file="$tool_output_dir/$tool.cmd"
tool_pid_file=$pbench_tmp/$group.$iteration.$tool.pid
tool_output_file=$tool_output_dir/$tool.txt
tool_cmd="blktrace $devices"
case "$mode" in
	install)
        ;;
	start)
	if ! cat /proc/mounts | grep -q debugfs; then
		mount -t debugfs none /sys/kernel/debug
	fi
	mkdir -p $tool_output_dir
	echo "$tool_cmd" >$tool_cmd_file
	debug_log "$script_name: running $tool_cmd"
	pushd $tool_output_dir >/dev/null
	$tool_cmd 2>&1 > "$tool_output_file" & echo $! >$tool_pid_file
	wait
	popd >/dev/null
	;;
	stop)
	pid=`cat "$tool_pid_file"`
	kill $pid
	;;
	postprocess)
	for dev in $devices; do
		devs="$devs `basename $dev`"
	done
	pushd $tool_output_dir
	blkparse $devs 2>&1 >blkparse.txt
	bzip2 blkparse.txt &
	for dev in $devs; do
		/bin/rm -f $dev.blktrace.*
	done
	wait
	popd >/dev/null
	;;
esac
