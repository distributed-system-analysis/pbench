#!/bin/bash

# This provides the ability to either:
# 1) run user-provided scripts to start/stop/postprocess a custom tool
# or
# 2) capture contents of a file at specified interval
# 
# If you use scripts, they must already be in installed
# if you opt to capture a file, please make sure the file is not enormous

script_path=`dirname $0`
script_name=`basename $0`
pbench_bin="`cd ${script_path}/..; /bin/pwd`"

# source the base script
. "$pbench_bin"/base

# Defaults
tool=$script_name
group=default
dir=""
mode=""
interval="10"
iteration="1"
options="none"

# Process options and arguments
opts=$(getopt -q -o idp --longoptions "dir:,group:,iteration:,interval:,start,stop,install,postprocess,tool-name:,file-to-capture:,start-script:,postprocess-script:" -n "getopt.sh" -- "$@");
if [ $? -ne 0 ]; then
	printf "\n"
	printf "$script_name: you specified an invalid option\n\n"
	printf "The following options are available: \n\n"
	printf -- "\t--install,			install this perf tool\n"
	printf "\n"
	printf -- "\t--tool-name		you must provide a unique name for this user tool\n"
	printf -- "\t--start|stop|postprocess	start/stop/postprocess the data collection\n"
	printf -- "\t--start-script		run this user-provided script when starting this tool\n"
	printf -- "\t--postproceess-script	run this user-provided script when postprocessing this tool\n"
	printf -- "\t--file-to-capture		capture the contents of this file at each interval\n"
	printf -- "\t				you can use this option, or the start/stop/postprocess-script, but not both at the same time\n"
	printf -- "\t--iteration=int 		the iteration (required)\n"
	printf -- "\t--group=str		the perftool group (required)\n"
	printf -- "\t--dir=str			directory to store data collection (required)\n"
	printf -- "\t--interval=int		number of seconds between each data collection\n"
	exit 1
fi
eval set -- "$opts";
while true; do
	case "$1" in
		--install)
		mode="install"
		shift;
		;;
		--start)
		mode="start"
		shift;
		;;
		--stop)
		mode="stop"
		shift;
		;;
		--postprocess)
		mode="postprocess"
		shift;
		;;
		-d|--dir)
		shift;
		if [ -n "$1" ]; then
			dir="$1"
			shift
		fi
		;;
		-g|--group)
		shift;
		if [ -n "$1" ]; then
			group="$1"
			shift
		fi
		;;
		-i|--iteration)
		shift;
		if [ -n "$1" ]; then
			iteration="$1"
			shift
		fi
		;;
		--interval)
		shift;
		if [ -n "$1" ]; then
			interval="$1"
			shift
		fi
		;;
		--tool-name)
		shift;
		if [ -n "$1" ]; then
			tool_name="$1"
			shift
		fi
		;;
		--file-to-capture)
		shift;
		if [ -n "$1" ]; then
			file_to_capture="$1"
			shift
		fi
		;;
		--start-script)
		shift;
		if [ -n "$1" ]; then
			start_script="$1"
			shift
		fi
		;;
		--postprocess-script)
		shift;
		if [ -n "$1" ]; then
			postprocess_script="$1"
			shift
		fi
		;;
		--)
		shift;
		break;
		;;
	esac
done

if [ -z "$tool_name" ]; then
	error_log "[$script_name] You must provide --tool-name"
	exit 1
fi

tool_dir="$dir/tools-$group"
tool_output_dir=$tool_dir/$tool-$tool_name # all tools keep data in their tool specific dir
tool_cmd_file="$tool_output_dir/$tool.cmd"
tool_pid_file=$pbench_tmp/$group.$iteration.$tool-$tool_name.pid
tool_stdout_file=$tool_output_dir/$tool-$tool_name-stdout.txt
tool_stderr_file=$tool_output_dir/$tool-$tool_name-stderr.txt
if [ ! -z "$file_to_capture" ]; then
	tool_cmd="$script_path/datalog/$tool-datalog $interval $file_to_capture $tool_stdout_file"
else
	tool_cmd="$start_script"
fi
case "$mode" in
	install)
        ;;
	start)
	mkdir -p $tool_output_dir
	pushd $tool_output_dir >/dev/null
	echo '#!/bin/bash' >$tool_cmd_file
	echo "trap '{ kill \${TOOL_PID}; }' SIGTERM" >>$tool_cmd_file
	echo "${tool_cmd} &" >>$tool_cmd_file
	echo 'TOOL_PID=$!' >>$tool_cmd_file
	echo 'wait' >>$tool_cmd_file
	echo 'wait' >>$tool_cmd_file
	chmod +x $tool_cmd_file
	debug_log "$script_name: running $tool_cmd"
	$tool_cmd_file >"$tool_stdout_file" 2>"$tool_stderr_file" & echo $! >$tool_pid_file
	popd >/dev/null
	wait
	;;
	stop)
	if [[ -s "$tool_pid_file" ]]; then
		pid=`cat $tool_pid_file`
		debug_log "stopping $script_name"
		kill $pid && /bin/rm -f $tool_pid_file
	else
		warn_log "[$script_name]: tool is not running, nothing to kill"
	fi
	;;
	postprocess)
	debug_log "postprocessing $script_name"
	pushd $tool_output_dir >/dev/null
	if [ -z "$file_to_capture" ]; then
		if [ -e "$postprocess_script" ]; then
			chmod +x $postprocess_script
			$postprocess_script 2>&1 >postprocess-output.txt
		fi
	fi
	popd >/dev/null
	;;
esac
