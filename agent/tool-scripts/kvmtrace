#!/bin/bash
# -*- mode: shell-script; indent-tabs-mode: t; sh-basic-offset: 8; sh-indentation: 8; sh-indent-for-case-alt: + -*-

script_path=`dirname $0`
script_name=`basename $0`
pbench_bin="`cd ${script_path}/..; /bin/pwd`"

# source the base script
. "$pbench_bin"/base

# Perftool scripts must provide the following functions
# 1) Install the tool
# 2) Start data collection
# 3) Stop data collection
# 4) post-process the data

# Defaults
tool=$script_name
tool_bin=/usr/bin/trace-cmd
group=default
dir="/tmp"
mode=""
interval="10"
iteration="1"
options="none"
sleep_cmd="sleep 1"

# Process options and arguments
opts=$(getopt -q -o idp --longoptions "start-delay:,timeout:,vm:,dir:,group:,iteration:,interval:,start,stop,install,postprocess" -n "getopt.sh" -- "$@");
if [ $? -ne 0 ]; then
	printf "\n"
	printf "$script_name: you specified an invalid option\n\n"
	printf "The following options are available: \n\n"
	printf -- "\t--install,			install this perf tool\n"
	printf "\n"
	printf -- "\t--start|stop|postprocess	start/stop/post-process the data collection\n"
	printf -- "\t--iteration=int 		the iteration (required)\n"
	printf -- "\t--group=str		the perftool group (required)\n"
	printf -- "\t--dir=str			directory to store data collection (required)\n"
	printf -- "\t--vm=str			the hostname of the vm running (to get kallsyms)\n"
	printf -- "\t--timeout=int		how long the trace will run (default is 1 second).  If 0 is used, the trace will not stop until stop-tools is called\n"
	printf -- "\t--interval=int		number of seconds between each data collection\n"
	printf -- "\t--start-delay=int		sleep this many seconds before starting the trace\n"

	exit 1
fi
eval set -- "$opts";
while true; do
	case "$1" in
		--install)
		mode="install"
		shift;
		;;
		--start)
		mode="start"
		shift;
		;;
		--stop)
		mode="stop"
		shift;
		;;
		--postprocess)
		mode="post-process"
		shift;
		;;
		-d|--dir)
		shift;
		if [ -n "$1" ]; then
			dir="$1"
			shift
		fi
		;;
		-g|--group)
		shift;
		if [ -n "$1" ]; then
			group="$1"
			shift
		fi
		;;
		-i|--iteration)
		shift;
		if [ -n "$1" ]; then
			iteration="$1"
			shift
		fi
		;;
		--interval)
		shift;
		if [ -n "$1" ]; then
			interval="$1"
			shift
		fi
		;;
		--start-delay)
		shift;
		if [ -n "$1" ]; then
			start_delay="$1"
			shift
		fi
		;;
		--timeout)
		shift;
		if [ -n "$1" ]; then
			timeout="$1"
			shift
		fi
		;;
		--vm)
		shift;
		if [ -n "$1" ]; then
			vm="$1"
			shift
		fi
		;;
		--)
		shift;
		break;
		;;
	esac
done

if [ ! -z "$timeout" ]; then
	if [ $timeout -eq 0 ]; then
		sleep_cmd=""
	else
		sleep_cmd="sleep $timeout"
	fi
fi

tool_dir="$dir/tools-$group"
tool_output_dir="$tool_dir/$tool"
tool_cmd_file="$tool_output_dir/$tool.cmd"
#tool_cmd="/usr/bin/trace-cmd record -b 20000 -e kvm >kvmtrace.txt 2>&1"
tool_cmd="$tool_bin record -a -e kvm $sleep_cmd"
tool_pid_file=$pbench_tmp/$group.$iteration.$tool.pid
case "$mode" in
	install)
	# ensure debugfs is mounted
	if cat /proc/mounts | grep -q debugfs; then
		echo "debugfs is already mounted"
	else
		mount -t debugfs none /sys/kernel/debug
	fi
	# no version is provided here because we rely on a 
	# distribution provided package and we take whatever we can get
	check_install_rpm trace-cmd
        ;;
	start)
	if ! cat /proc/mounts | grep -q debugfs; then
		mount -t debugfs none /sys/kernel/debug
	fi
	if [ ! -z "$start_delay" ]; then
		sleep $start_delay
	fi
	mkdir -p $tool_output_dir
	pushd $tool_output_dir >/dev/null
	echo "$tool_cmd" >$tool_cmd_file
	# call the tool and background it...
	$tool_cmd & echo $! >"$tool_pid_file"
	wait
	popd >/dev/null
	;;
	stop)
	pid=`cat $pbench_tmp/$group.$iteration.$tool.pid`
	if [ -z "$sleep_cmd" ]; then
		# kill the perf cmd
		kill -s SIGINT $pid
	else
		# kill the sleep process if it still exists
		sleep_pid=`ps --ppid $pid | pgrep sleep`
		if [ ! -z "$sleep_pid" ]; then
			kill $sleep_pid
		fi
	fi
	# wait for the trace-cmd pid to complete
	while [ -d /proc/$pid ]; do
		debug_log "waiting for PID $pid to die"
		sleep 0.5
	done
	;;
	post-process)
	pushd $tool_output_dir >/dev/null
	/usr/bin/trace-cmd report >kvmtrace-report.txt 2>&1
	grep rip kvmtrace-report.txt | awk -F"reason" '{print $2}' | sort | uniq -c | sort -rn >kvmtrace-exit-reasons.txt
	if [ -z "$vm" ]; then
		# if the vm hostname was not provided, try to find a running vm, and use its vm name as the host
		vm=`virsh list | grep running | head -1 | awk '{print $2}'`
	fi
	ssh $vm cat /proc/kallsyms >kallsyms-guest.txt
	$script_path/postprocess/kvmtrace-postprocess .
	bzip2 --fast kvmtrace-report.txt
	bzip2 --fast trace.dat
	popd >/dev/null
	;;
esac
