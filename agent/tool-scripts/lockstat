#!/bin/bash

script_path=`dirname $0`
script_name=`basename $0`
pbench_bin="`cd ${script_path}/..; /bin/pwd`"

# source the base script
. "$pbench_bin"/base

# Perftool scripts must provide the following functions
# 1) Install the tool
# 2) Start data collection
# 3) Stop data collection
# 4) post-process the data

# Defaults
tool=lockstat
tool_bin=/usr/local/bin/$tool
ver=10.2.1
tool_url="http://pagesperso-orange.fr/sebastien.godard/sysstat-$ver.tar.bz2"
group=default
dir=""
mode=""
interval="10"
iteration="1"
options="none"

# Process options and arguments
opts=$(getopt -q -o idp --longoptions "dir:,group:,iteration:,interval:,options:,start,stop,install,postprocess" -n "getopt.sh" -- "$@");
if [ $? -ne 0 ]; then
	printf "\n"
	printf "$script_name: you specified an invalid option\n\n"
	printf "The following options are available: \n\n"
	printf -- "\t--install,			install this perf tool\n"
	printf "\n"
	printf -- "\t--start|stop|postprocess	start/stop/post-process the data collection\n"
	printf -- "\t--iteration=int 		the iteration (required)\n"
	printf -- "\t--group=str		the perftool group (required)\n"
	printf -- "\t--dir=str			directory to store data collection (required)\n"
	printf -- "\t--interval=int		number of seconds between each data collection\n"
	printf -- "\t--options=int		options passed directly to the perf tool\n"

	exit 1
fi
eval set -- "$opts";
while true; do
	case "$1" in
		--install)
		mode="install"
		shift;
		;;
		--start)
		mode="start"
		shift;
		;;
		--stop)
		mode="stop"
		shift;
		;;
		--postprocess)
		mode="postprocess"
		shift;
		;;
		-d|--dir)
		shift;
		if [ -n "$1" ]; then
			dir="$1"
			shift
		fi
		;;
		-g|--group)
		shift;
		if [ -n "$1" ]; then
			group="$1"
			shift
		fi
		;;
		-i|--iteration)
		shift;
		if [ -n "$1" ]; then
			iteration="$1"
			shift
		fi
		;;
		--interval)
		shift;
		if [ -n "$1" ]; then
			interval="$1"
			shift
		fi
		;;
		-o|--options)
		shift;
		if [ -n "$1" ]; then
			options="$1"
			shift
		fi
		;;
		--)
		shift;
		break;
		;;
		*)
		break;
	esac
done

tool_dir="$dir/tools-$group"
tool_output_dir=$tool_dir/$tool # all tools keep data in their tool specific dir
tool_output_file=$tool_output_dir/$tool.txt
lockstat_saved_state_file= $pbench_tmp/pbench-saved-lockstat-state

case "$mode" in
	install)
	if [[ ! -f "/proc/lock_stat" ]]; then
		echo "please check if the kernel is built with CONFIG_LOCK_STAT=y in order to collect statistics on locks"
        	error_log "[$script_name]: The kernel is not built with CONFIG_LOCK_STAT=y"
		exit 1
        fi
	# Save the current state of lockstat
	lockstat_state=$(cat /proc/sys/kernel/lock_stat)
	echo $lockstat_state > $lockstat_saved_state_file

	# Enable collection of statistics
	echo 1 >/proc/sys/kernel/lock_stat
	;;
	start)
	mkdir -p $tool_output_dir
	echo "time: `date +%s.%N`" >> "$tool_output_file"
	cat /proc/lock_stat >> "$tool_output_file"
	;;
	stop)
	echo "time: `date +%s.%N`" >> "$tool_output_file"
	cat /proc/lock_stat >> "$tool_output_file"
	# Restore back to the saved state before the tool has been started
	cat $lockstat_saved_state_file > /proc/sys/kernel/lock_stat
	/bin/rm $lockstat_saved_state_file
	;;
	postprocess)
	;;
esac

