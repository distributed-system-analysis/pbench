#!/usr/bin/perl

# Author: Andrew Theurer
#
# usage: openvswitch-postprocess <dir>  dir = directory where openvswitch.txt can be found
#
# The purpose of this script is to
# -output the chart data in JSON format (openvswitch.js)
# -output html file (openvswitch.html) with embedded javascript, using d3.js libraries
#
# The input file that this scripts processes must be in the format which is generated by openvswitch-datalog

use strict;
use warnings;

# Check for an alternate tools library path for testing
my $_test_alt_tools_lib;
BEGIN {
        my $_pbench_tspp_dir = $ENV{'pbench_tspp_dir'};
        $_test_alt_tools_lib=$ENV{_TEST_ALTERNATE_TOOLS_LIBRARY};
        if (not defined $_test_alt_tools_lib or not -d $_test_alt_tools_lib) {
                $_test_alt_tools_lib = "$_pbench_tspp_dir";
        }
}
use lib "$_test_alt_tools_lib";
no lib ".";
use GenData qw(gen_data);

my $dir=$ARGV[0];
my $timestamp;
my $timestamp_ms;
my $line;
my $bridge;
my $port;
my %data;

open(TXT, "$dir/openvswitch-stdout.txt") || die "could not find $dir/openvswitch-stdout.txt\n";
while (my $line = <TXT>) {
	chomp $line;
## sample file data:
##
#timestamp: 1446064156.417796186
#bridge: ovsbr0
#OFPST_PORT reply (xid=0x2): 3 ports
#  port LOCAL: rx pkts=0, bytes=0, drop=0, errs=0, frame=0, over=0, crc=0
#           tx pkts=0, bytes=0, drop=0, errs=0, coll=0
#  port  1: rx pkts=1337489234, bytes=85601914448, drop=0, errs=3335854388, frame=0, over=0, crc=0
#           tx pkts=440837229, bytes=28214474128, drop=0, errs=0, coll=0
#  port  2: rx pkts=440837320, bytes=?, drop=?, errs=?, frame=?, over=?, crc=?
#           tx pkts=1337488889, bytes=?, drop=345, errs=?, coll=?
#
#bridge: ovsbr1
#OFPST_PORT reply (xid=0x2): 3 ports
#  port LOCAL: rx pkts=0, bytes=0, drop=0, errs=0, frame=0, over=0, crc=0
#           tx pkts=0, bytes=0, drop=0, errs=0, coll=0
#  port  1: rx pkts=440980223, bytes=28223625968, drop=0, errs=1322602600, frame=0, over=0, crc=0
#           tx pkts=1336507994, bytes=85539113792, drop=0, errs=0, coll=0
#  port  2: rx pkts=1336508011, bytes=?, drop=?, errs=?, frame=?, over=?, crc=?
#           tx pkts=440980223, bytes=?, drop=0, errs=?, coll=?
#
#	if ( $line =~ /^timestamp:\s(\d+\.\d+)/ ) {
#		$timestamp = $1;
#		$timestamp_ms = 1000 * $timestamp;
#		next;
#	}

	if ($line =~ /^timestamp: (\d+)\.\d+/ ) {
		$timestamp = $1;
		$timestamp_ms = $timestamp * 1000;
		$bridge = "";
		next;
	}

	if ($line =~ /^bridge: (\S+)/ ) {
		$bridge = $1;
		$port = "";
		next;
	}

	if ($line =~ /^\s+port\s+(\S+):(.*)/ ) {
		$port = $1;
		$line = $2;
	}

	if ($line =~ /\s*([r|t]x)(.*)/ ) {
		my $direction = $1;
		$line = $2;
		my @stats = split(/,/, $line);
		my $stat;
		foreach $stat (@stats) {
			$stat =~ s/^\s+//;
			$stat =~ s/\s/_/g;
			if ($stat =~ /(\S+)=(\S+)/) {
				my $s = $1;
				my $v = $2;
				if ($v !~ /\?/) {
					$data{$bridge}{$port}{$direction . "-" . $s}{$timestamp_ms} = $v;
				}
			}
		}
	}
}
close(TXT);

# generate the rates and an average for each stat
my %rate;
for $bridge (sort keys %data) {
	for $port (sort keys %{ $data{$bridge} }) {
		my $stat;
		for $stat (sort keys %{ $data{$bridge}{$port} }) {
			my $i = 0;
			my $last_timestamp_ms = 0;
			my $last_value;
			for $timestamp_ms (sort {$a<=>$b} keys %{ $data{$bridge}{$port}{$stat} } ) {
				my $value = $data{$bridge}{$port}{$stat}{$timestamp_ms};
				if ($last_timestamp_ms != 0) {
					my $duration = ($timestamp_ms - $last_timestamp_ms)/1000;
					my $value_diff = $value - $last_value;
					my $this_rate = $value_diff / $duration;
					$rate{"openvswitch"}{$bridge}{$port . "-" . $stat}{$timestamp_ms} = $this_rate;
					$i++;
				}
				$last_value = $value;
				$last_timestamp_ms = $timestamp_ms;
			}
		}
	}
}
my %graph_type;
my %graph_threshold;
gen_data(\%rate, \%graph_type, \%graph_threshold, $dir);
