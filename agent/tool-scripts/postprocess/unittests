#!/bin/bash
export LANG=C
export LC_ALL=C

_tdir=$(dirname $(readlink -f $0))
cd $_tdir

if [[ ! -z "$1" ]]; then
    if [[ ! -d ./samples/$1 ]]; then
        echo "Ignoring $1, ./samples/$1 does not exist as a directory" >&2
        testname=""
    else
        testname="$1"
    fi
fi

export _testroot=/var/tmp/pbench-test-tools-postprocess
mkdir -p ${_testroot}
if [ $? -ne 0 ]; then
    echo "ERROR - unable to create ${_testroot} directory" >&2
    exit 1
fi
rm -rf ${_testroot}/*

function remove_path {
    # PATH ($2) => /bin:/opt/a dir/bin:/sbin
    WORK=:$2:
    # WORK => :/bin:/opt/a dir/bin:/sbin:
    REMOVE=$1
    WORK=${WORK/:$REMOVE:/:}
    # WORK => :/bin:/sbin:
    WORK=${WORK%:}
    WORK=${WORK#:}
    #PATH=$WORK
    # PATH => /bin:/sbin
    echo $WORK
}
PATH=$(remove_path /opt/pbench-agent/bench-scripts $PATH)
export PATH=$(remove_path /opt/pbench-agent/util-scripts $PATH)

# the timestamps in the data are (or should be) in UTC
# make sure that we test in that environment, else the
# timestamps will show a constant offset.
export TZ=UTC

export _TEST_SKIP_CPU_MAP=1

function testit {
    echo "Testing $2-postprocess under sample $1 ..."

    mkdir ${_testroot}/$1
    cp samples/$1/$2-std*.txt ${_testroot}/$1/
    _TEST_ALTERNATE_TOOLS_LIBRARY=$(pwd) ./$2-postprocess ${_testroot}/$1 > ${_testroot}/$1/stdout 2> ${_testroot}/$1/stderr

    rm ${_testroot}/$1/$2-std*.txt

    diff -cr gold/$1/ ${_testroot}/$1
    sts=$?
    if [ $sts -eq 0 ]; then
        rm -rf ${_testroot}/$1
    fi
    return $sts
}

# Remove any file that is in the sample directory that
# is still the same in the test directory, removing any
# empty directories first.
function remove_sample_data {
    local i
    # First remove symlinks
    for i in $(cd samples/$1; find . -type l); do
        rm -rf ${_testroot}/$1/$i
    done
    # Remove all files that have not changed from the
    # original sample
    for i in $(cd samples/$1; find . -type f); do
        diff -cq samples/$1/$i ${_testroot}/$1/$i > /dev/null 2>&1 && rm -f ${_testroot}/$1/$i
    done
    let dir_cnt=-1
    while [[ $dir_cnt -gt 0 || $dir_cnt -lt 0 ]]; do
        let dir_cnt=0
        # In the loop, exit condition set should we
        # find no empty directories.
        for i in $(find ${_testroot}/$1 -type d -empty); do
            let dir_cnt=$dir_cnt+1
            rmdir $i
        done
    done
}

function testjstack {
    echo "Testing jstack under sample $1 ..."

    mkdir -p ${_testroot}/$1
    cp -r samples/$1 ${_testroot}/
    _TEST_ALTERNATE_TOOLS_LIBRARY=$(pwd) ./jstack-postprocess ${_testroot}/$1 > ${_testroot}/$1/stdout 2> ${_testroot}/$1/stderr

    remove_sample_data $1

    diff -cr gold/$1/ ${_testroot}/$1/
    sts=$?
    if [ $sts -eq 0 ]; then
        rm -rf ${_testroot}/$1
    fi
    return $sts
}

function testprocessiterationsamples {
    echo "Testing bench-scripts/postprocess/process-iteration-samples under sample $1 ..."

    mkdir ${_testroot}/$1
    cp -r samples/$1/* ${_testroot}/$1

    _TEST_ALTERNATE_TOOLS_LIBRARY=$(pwd) _TEST_ALTERNATE_BENCH_LIBRARY=$(pwd)/../../bench-scripts/postprocess \
        ../../bench-scripts/postprocess/process-iteration-samples ${_testroot}/$1 `cat ${_testroot}/$1/process-iteration-samples-args` > ${_testroot}/$1/stdout 2> ${_testroot}/$1/stderr

    remove_sample_data $1

    diff -cr gold/$1/ ${_testroot}/$1
    sts=$?
    if [ $sts -eq 0 ]; then
        rm -rf ${_testroot}/$1
    fi
    return $sts
}

function testgeneratebenchmarksummary {
    echo "Testing bench-scripts/postprocess/generate-benchmark-summary under sample $1 ..."

    mkdir ${_testroot}/$1
    cp -r samples/$1/* ${_testroot}/$1

    _TEST_ALTERNATE_TOOLS_LIBRARY=$(pwd) _TEST_ALTERNATE_BENCH_LIBRARY=$(pwd)/../../bench-scripts/postprocess \
        ../../bench-scripts/postprocess/generate-benchmark-summary $1 unused-orig-cmd ${_testroot}/$1 > ${_testroot}/$1/stdout 2> ${_testroot}/$1/stderr

    remove_sample_data $1

    diff -qr gold/$1/ ${_testroot}/$1
    sts=$?
    if [ $sts -eq 0 ]; then
        rm -rf ${_testroot}/$1
    fi
    return $sts
}

function testuperf {
    echo "Testing bench-scripts/postprocess/uperf-postprocess under sample $1 ..."

    mkdir ${_testroot}/$1
    cp -r samples/$1/* ${_testroot}/$1

    _TEST_ALTERNATE_TOOLS_LIBRARY=$(pwd) _TEST_ALTERNATE_BENCH_LIBRARY=$(pwd)/../../bench-scripts/postprocess \
        ../../bench-scripts/postprocess/uperf-postprocess ${_testroot}/$1 `cat ${_testroot}/$1/uperf-postprocess-args` > ${_testroot}/$1/stdout 2> ${_testroot}/$1/stderr

    # /usr/bin/perl -e 'use JSON; print $INC{"JSON.pm"} . "\n"; print $JSON::VERSION . "\n"'
    # ./perl-JSON-version
    remove_sample_data $1

    diff -cr gold/$1/ ${_testroot}/$1
    sts=$?
    if [ $sts -eq 0 ]; then
        rm -rf ${_testroot}/$1
    fi
    return $sts
}

function testpcp {
    echo "Testing pcp-postprocess under sample $1 ..."

    mkdir ${_testroot}/$1
    cp -r samples/$1/* ${_testroot}/$1

    PATH=$(pwd)/mock-bin:$PATH _TEST_ALTERNATE_TOOLS_LIBRARY=$(pwd) _TEST_ALTERNATE_BENCH_LIBRARY=$(pwd)/../../bench-scripts/postprocess \
        ./pcp-postprocess ${_testroot}/$1 > ${_testroot}/$1/stdout 2> ${_testroot}/$1/stderr

    remove_sample_data $1

    diff -cr gold/$1/ ${_testroot}/$1
    sts=$?
    if [ $sts -eq 0 ]; then
        rm -rf ${_testroot}/$1
    fi
    return $sts
}

function testfio {
    echo "Testing bench-scripts/postprocess/fio-postprocess under sample $1 ..."

    mkdir ${_testroot}/$1
    cp -r samples/$1/* ${_testroot}/$1

    _TEST_ALTERNATE_TOOLS_LIBRARY=$(pwd) _TEST_ALTERNATE_BENCH_LIBRARY=$(pwd)/../../bench-scripts/postprocess \
        ../../bench-scripts/postprocess/fio-postprocess ${_testroot}/$1/result/reference-result fio- default > ${_testroot}/$1/stdout 2> ${_testroot}/$1/stderr

    remove_sample_data $1

    diff -cr gold/$1/ ${_testroot}/$1
    sts=$?
    if [ $sts -eq 0 ]; then
        rm -rf ${_testroot}/$1
    fi
    return $sts
}

function testhaproxy_ocp {
    echo "Testing haproxy-ocp-postprocess under sample $1 ..."

    mkdir ${_testroot}/$1
    cp samples/$1/router*.csv ${_testroot}/$1/

    _TEST_ALTERNATE_TOOLS_LIBRARY=$(pwd) ./haproxy-ocp-postprocess ${_testroot}/$1 > ${_testroot}/$1/stdout 2> ${_testroot}/$1/stderr

    diff -cr gold/$1/ ${_testroot}/$1
    sts=$?
    if [ $sts -eq 0 ]; then
        rm -rf ${_testroot}/$1
    fi
    return $sts
}

function testjmap {
    echo "Testing jmap under sample $1 ..."

    mkdir -p ${_testroot}/$1
    cp -r samples/$1 ${_testroot}/

    _TEST_ALTERNATE_TOOLS_LIBRARY=$(pwd) ./jmap-postprocess ${_testroot}/$1 > ${_testroot}/$1/stdout 2> ${_testroot}/$1/stderr

    remove_sample_data $1

    diff -cr gold/$1/ ${_testroot}/$1/
    sts=$?
    if [ $sts -eq 0 ]; then
        rm -rf ${_testroot}/$1
    fi
    return $sts
}

function testprometheus-metrics {
    echo "Testing prometheus-metrics-postprocess under sample $1 ..."

    mkdir -p ${_testroot}/$1/json
    cp -r samples/$1/* ${_testroot}/$1

    _TEST_ALTERNATE_TOOLS_LIBRARY=$(pwd) ./prometheus-metrics-postprocess ${_testroot}/$1/metrics-stdout ${_testroot}/$1/json/metrics.json 2> ${_testroot}/$1/stderr

    diff -cr gold/$1/stderr ${_testroot}/$1/stderr && diff -cr gold/$1/json/ ${_testroot}/$1/json/
    sts=$?
    if [ $sts -eq 0 ]; then
        rm -rf ${_testroot}/$1
    fi
    return $sts
}

function testcmpr {
    echo "Testing bench-scripts/postprocess/compare-bench-results under sample $1 ..."

    rm -rf ${_testroot}/$1
    cp -a samples/$1 ${_testroot}/

    # Run the test
    fullcmd=$(realpath ../../bench-scripts/postprocess/compare-bench-results)
    (cd ${_testroot}/$1; $fullcmd comparison * > ${_testroot}/$1/stdout 2> ${_testroot}/$1/stderr)

    remove_sample_data $1

    diff -cr gold/$1/ ${_testroot}/$1
    sts=$?
    if [ $sts -eq 0 ]; then
        rm -rf ${_testroot}/$1
    fi
    return $sts
}

function testpidstat {
    echo "Testing pidstat-postprocess under sample ${1} ..."

    mkdir ${_testroot}/${1}

    # Generate pidstat converted data as tool would.
    cvt_path=$(dirname $(realpath ./pidstat-convert))
    cat samples/${1}/pidstat-stdout.txt | (cd ${_testroot}/${1}; _TEST_ALTERNATE_TOOLS_LIBRARY=${cvt_path} ${cvt_path}/pidstat-convert ${_testroot}/${1})

    _TEST_ALTERNATE_TOOLS_LIBRARY=$(pwd) ./pidstat-postprocess ${_testroot}/${1} > ${_testroot}/${1}/stdout 2> ${_testroot}/${1}/stderr

    rm -rf ${_testroot}/${1}/pids

    diff -cr gold/${1}/ ${_testroot}/${1}
    return $?
}

res=0

for i in $(ls -1 samples/) ; do
    if [[ ! -z "$testname" ]]; then
        if [[ "$testname" != "$i" ]]; then
            continue
        fi
    fi
    case $i in
        uperf-*)
            testuperf $i
            sts=$?
            ;;
        fio-*)
            testfio $i
            sts=$?
            ;;
        haproxy-ocp)
            testhaproxy_ocp $i
            sts=$?
            ;;
        jmap)
            testjmap $i
            sts=$?
            ;;            
        jstack)
            testjstack $i
            sts=$?
            ;;
        prometheus-metrics)
            testprometheus-metrics $i
            sts=$?
            ;;
        pcp-*)
            testpcp $i
            sts=$?
            ;;
        compare-bench-results-*)
            testcmpr $i
            sts=$?
            ;;
        process-iteration-samples-*)
            testprocessiterationsamples $i
            sts=$?
            ;;
        generate-benchmark-summary-*)
            testgeneratebenchmarksummary $i
            sts=$?
            ;;
        pidstat)
            testpidstat $i
            sts=$?
            ;;            
        pidstat-*)
            testpidstat $i
            sts=$?
            ;;            
        *)
            testit $i ${i%-[0-9]}
            sts=$?
    esac
    if [[ $sts -eq 0 ]]; then
        echo "PASS - $i"
    else
        echo "FAIL - $i"
    fi
    let res=$res+$sts
done

# Attempt to remove the test directory; if it fails we ignore the failure
# as it indicates failed test output left for review.
rmdir ${_testroot} > /dev/null 2>&1

exit $res
