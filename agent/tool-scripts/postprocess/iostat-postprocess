#!/usr/bin/perl

# Author: Andrew Theurer
#
# usage: iostat-postprocess <dir>  dir = directory where iostat.txt can be found
# iostat.txt must be generated from "iostat -t -y -x -m <interval>"
#
# The purpose of this script is to
# -output the chart data in JSON format (iostat.js)
# -output html file (iostat.html) with embedded javascript, using d3.js libraries
# The result should be several iostat graphs

use strict;
use warnings;

# Check for an alternate tools library path for testing
my $_test_alt_tools_lib;
BEGIN {
        my $_pbench_tspp_dir = $ENV{'pbench_tspp_dir'};
        $_test_alt_tools_lib=$ENV{_TEST_ALTERNATE_TOOLS_LIBRARY};
        if (not defined $_test_alt_tools_lib or not -d $_test_alt_tools_lib) {
                $_test_alt_tools_lib = "$_pbench_tspp_dir";
        }
}
use lib "$_test_alt_tools_lib";
no lib ".";
use GenData qw(gen_data);

my $dir=$ARGV[0];
my $dev;
my %iostat;
my $timestamp;
my $timestamp_ms;

# read the iostat.txt
open(IOSTAT_TXT, "$dir/iostat-stdout.txt") || die "could not find $dir/iostat-stdout.txt\n";
while (my $line = <IOSTAT_TXT>) {
	chomp $line;
	# Each sample should start with a time stamp (the -t in iostat).
	# When we find this, update our timestamp for the hash.
	if ( $line =~ /^\d\d\/\d\d\/\d\d(\d\d)?\s\d\d:\d\d:\d\d(\s[AP]M)?/ ) {
		$timestamp=`date --date="$line" +%s.%N`;
		# Javascript requires the timestamp to be in milliseconds
		$timestamp_ms = $timestamp * 1000;
	}
	#Device:         rrqm/s   wrqm/s     r/s     w/s    rMB/s    wMB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util
	#sda               0.00     0.00 22116.00    4.00    86.39     0.07     8.00    32.03    1.43    1.43    4.92   0.05 100.00
	#dm-0              0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00    0.00    0.00   0.00   0.00
	#dm-1              0.00     0.00    0.00    4.33     0.00     0.10    47.38     0.35    4.54    0.00    4.54  76.08  32.97
	#dm-2              0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00    0.00    0.00   0.00   0.00
	#dm-3              0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00    0.00    0.00   0.00   0.00
	#                         rrqm/s      wrqm/s       r/s          w/s          rMB/s        wMD/s        avgrqsz      avgqsz       await        r_await      w_await      svctm        util
	if ( $line =~ /(\S+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)(.*)/ ) {
		$dev = $1;
		my $rrqm=$2;
		my $wrqm=$3;
		my $riops=$4;
		my $wiops=$5;
		my $rtput=$6;
		my $wtput=$7;
		my $reqsize=$8;
		my $qsize=$9;
		my $rwait=$11;
		my $wwait=$12;
		# svctm skipped, bogus stat
		my $util=$14;
		# data is stored this way:
		# $sar{htmlpage}{graph}{series}{sample}

		# Each data series is for one device (sda).  One some graphs, read and write
		# series are included in to one graph (instead of having one read-ops chart
		# and another write-ops chart), so each series needs "-read" or
		# "-write" appended to keep them distinct.

		$iostat{disk}{Utilization}{$dev}{$timestamp_ms} = $util;
		$iostat{disk}{Throughput}{$dev . "-read"}{$timestamp_ms} = $rtput;
		$iostat{disk}{Throughput}{$dev . "-write"}{$timestamp_ms} = $wtput;
		$iostat{disk}{Request_Merges}{$dev . "-read"}{$timestamp_ms} = $rrqm;
		$iostat{disk}{Request_Merges}{$dev . "-write"}{$timestamp_ms} = $wrqm;
		$iostat{disk}{IOPS}{$dev . "-read"}{$timestamp_ms} = $riops;
		$iostat{disk}{IOPS}{$dev . "-write"}{$timestamp_ms} = $wiops;
		$iostat{disk}{Request_Size}{$dev}{$timestamp_ms} = $reqsize;
		$iostat{disk}{Queue_Size}{$dev}{$timestamp_ms} = $qsize;
		$iostat{disk}{Wait_Time}{$dev . "-read"}{$timestamp_ms} = $rwait;
		$iostat{disk}{Wait_Time}{$dev . "-write"}{$timestamp_ms} = $wwait;
	}
}
close(IOSTAT_TXT);

# define the graph types
# if you want something other than lineChart, put it here
my %graph_type;

# threshold for displying a series in a graph
my %graph_threshold;
$graph_threshold{disk}{Utilization} = 1;
$graph_threshold{disk}{Throughput} = 1;
$graph_threshold{disk}{IOPS} = 1;
$graph_threshold{disk}{Wait_Time} = 0.1;
$graph_threshold{disk}{Request_Size} = 0.1;
$graph_threshold{disk}{Request_Merges} = 0.1;
$graph_threshold{disk}{Queue_Size} = 0.01;

gen_data(\%iostat, \%graph_type, \%graph_threshold, $dir);
