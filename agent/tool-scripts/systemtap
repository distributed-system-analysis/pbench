#!/bin/bash

# NOTE: this script is used for mpstat, iostat, sar, and pidstat.  All are links to the same file

script_path=`dirname $0`
script_name=`basename $0`
pbench_bin="`cd ${script_path}/..; /bin/pwd`"

# source the base script
. "$pbench_bin"/base

# Perftool scripts must provide the following functions
# 1) Install the tool
# 2) Start data collection
# 3) Stop data collection
# 4) post-process the data

# Defaults
tool=$script_name
tool_bin=staprun
group=default
dir="/tmp"

# Process options and arguments
opts=$(getopt -q -o idp --longoptions "dir:,script:,group:,iteration:,options:,start,stop,install,postprocess" -n "getopt.sh" -- "$@");
if [ $? -ne 0 ]; then
	printf "\n"
	printf "$script_name: you specified an invalid option\n\n"
	printf "The following options are available: \n\n"
	printf -- "\t--install,			install this perf tool\n"
	printf "\n"
	printf -- "\t--start|stop|post-process	start/stop/post-process the data collection\n"
	printf -- "\t--iteration=int 		the iteration (required)\n"
	printf -- "\t--group=str		the perftool group (required)\n"
	printf -- "\t--dir=str			directory to store data collection (required)\n"
	printf -- "\t--script=str		the systemtap script\n"
	printf -- "\t--options=int		options passed directly to the perf tool\n"
	exit 1
fi
eval set -- "$opts";
while true; do
	case "$1" in
		--install)
		mode="install"
		shift;
		;;
		--start)
		mode="start"
		shift;
		;;
		--stop)
		mode="stop"
		shift;
		;;
		--postprocess)
		mode="postprocess"
		shift;
		;;
		-d|--dir)
		shift;
		if [ -n "$1" ]; then
			dir="$1"
			shift
		fi
		;;
		-g|--group)
		shift;
		if [ -n "$1" ]; then
			group="$1"
			shift
		fi
		;;
		-i|--iteration)
		shift;
		if [ -n "$1" ]; then
			iteration="$1"
			shift
		fi
		;;
		--script)
		shift;
		if [ -n "$1" ]; then
			script=`echo $1 | sed 's/^"\(.*\)"$/\1/'`
			shift
		else
			echo "you did not provide a script"
		fi
		;;
		-o|--options)
		shift;
		if [ -n "$1" ]; then
			options="$1"
			shift
		fi
		;;
		--)
		shift;
		break;
		;;
	esac
done
tool_dir="$dir/tools-$group"
tool_output_dir=$tool_dir/$tool # all tools keep data in their tool specific dir
tool_cmd_file="$tool_output_dir/$tool.cmd"
tool_pid_file=$pbench_tmp/$group.$iteration.$tool.pid
tool_stdout_file=$tool_output_dir/$tool-stdout.txt
tool_stderr_file=$tool_output_dir/$tool-stderr.txt
tool_cmd="$tool_bin $pbench_tmp/pbench_systemtap.ko"
case "$mode" in
	install)
	# the installation for systemtap includes compiling the kernel module from the stap script
	# this is done to avoid extra overhead when the workload is running
	check_install_rpm systemtap-client || exit 1
	check_install_rpm systemtap-devel || exit 1
	check_install_rpm kernel-devel `uname -r` || exit 1
	check_install_rpm kernel-debuginfo `uname -r` || exit 1
	pushd $pbench_tmp >/dev/null
	install_cmd="stap -v -m pbench_systemtap -p4 $script"
	printf "%s\n" $script
	debug_log "running $install_cmd"
	$install_cmd || exit 1
	popd >/dev/null
        ;;
	start)
	mkdir -p $tool_output_dir
	echo "$tool_cmd" >$tool_cmd_file
	debug_log "$script_name: running $tool_cmd"
	$tool_cmd >"$tool_stdout_file" 2>"$tool_stderr_file" & echo $! >$tool_pid_file
	wait
	;;
	stop)
	if [[ -s "$tool_pid_file" ]]; then
		pid=`cat "$tool_pid_file"`
		debug_log "stopping $script_name"
		kill $pid && /bin/rm "$tool_pid_file"
	else
		warn_log "[$script_name]: tool is not running, nothing to kill"
	fi
	;;
	postprocess)
	debug_log "postprocessing $script_name"
	$script_path/postprocess/$script_name-postprocess $tool_output_dir
	;;
esac



