#!/bin/bash
# -*- mode: shell-script; indent-tabs-mode: t; sh-basic-offset: 8; sh-indentation: 8; sh-indent-for-case-alt: + -*-
# The following script collect heap used stats for jvm and containerized jvm

script_path=`dirname $0`
script_name=`basename $0`
pbench_bin="`cd ${script_path}/..; /bin/pwd`"

# source the base script
. "$pbench_bin"/base

# Perftool scripts must provide the following functions
# 1) Install the tool
# 2) Start data collection
# 3) Stop data collection
# 4) post-process the data

# Defaults
tool=jmap
tool_bin=/usr/bin/$tool
group=default
dir=""
mode=""
iteration="1"
options="none"
interval=5

function usage() {
	echo "
	USAGE:
	$script_name: you specified an invalid option
	The following options are available:
	--install,			          install this perf tool
	--start|stop|postprocess	start/stop/post-process the data collection
	--iteration=int 		      the iteration (required)
	--group=str		            the perftool group (not-required)
	--dir=str			            directory to store data collection (required)
	--pid=int		              a process ID to profile
	--pattern			            collect jvm stats for any PID which name matches this string
	--interval 							    interval sleep time (5sec or higher).
	"
}

function run_jmap() {
	# get java pids running on host.
	jvm_pids=$(pgrep java)

	for jvm_pid in $jvm_pids; do
		# TODO: extend the heap stats to collect min,max and non-heap
		# check if containerized.
		if [[ $(grep -c 'user.slice' /proc/$jvm_pid/cgroup) -eq "0" ]]; then
			jpid=$(grep hsperfdata /proc/$jvm_pid/task/$jvm_pid/maps |awk -F "hsperfdata" '{print $2}' | sed "s/[^0-9]//g")
			heap_used=$(nsenter --target $jvm_pid --mount --uts --ipc --net --pid $tool_bin -histo $jpid |grep Total |awk '{print $3/1024/1024}')
		else
			heap_used=$($tool_bin -histo $jvm_pid |grep Total |awk '{print $3/1024/1024}')
		fi
		# map pid to process name.
		if [[ $(ls -A /proc/$jvm_pid/cmdline) ]]; then
			jvm_pid=`echo "$jvm_pid-$(cat /proc/$jvm_pid/cmdline)"`
		fi
		echo "$(date "+%s"),$jvm_pid,$heap_used" >> "$tool_stdout_file"
	done
}


# Process options and arguments
opts=$(getopt -q -o idp --longoptions "dir:,group:,iteration:,pid:,pattern:,start,stop,install,postprocess" -n "getopt.sh" -- "$@");
if [ $? -ne 0 ]; then
	printf "\n"
	printf "$script_name: you specified an invalid option\n\n"
	printf "The following options are available: \n\n"
	printf -- "\t--install,			install this perf tool\n"
	printf "\n"
	printf -- "\t--start|stop|postprocess	start/stop/post-process the data collection\n"
	printf -- "\t--iteration=int 		the iteration (required)\n"
	printf -- "\t--group=str		the perftool group (required)\n"
	printf -- "\t--dir=str			directory to store data collection (required)\n"
	printf -- "\t--interval=int		number of seconds between each data collection (5sec default)\n"
	printf -- "\t--options=str		options passed directly to the tool\n"
	printf -- "\t--pattern			  collect jvm stats for any PID which name matches this string\n"
fi

eval set -- "$opts";
while true; do
	case "$1" in
		--install)
		mode="install"
		shift;
		;;
		--start)
		mode="start"
		shift;
		;;
		--stop)
		mode="stop"
		shift;
		;;
		--postprocess)
		mode="postprocess"
		shift;
		;;
		-d|--dir)
		shift;
		if [ -n "$1" ]; then
			dir="$1"
			shift
		fi
		;;
		-g|--group)
		shift;
		if [ -n "$1" ]; then
			group="$1"
			shift
		fi
		;;
		-i|--iteration)
		shift;
		if [ -n "$1" ]; then
			iteration="$1"
			shift
		fi
		;;
		--pid)
		shift;
		if [ -n "$1" ]; then
			jvm_pid="$1"
			shift
		fi
		;;
		--pattern)
		shift;
		if [ -n "$1" ]; then
			pattern="$1"
			shift
		fi
		;;
		-s|--interval)
		shift;
		if [ -n "$1" ]; then
			interval="$1"
			shift
		fi
		;;
		--)
		shift;
		break;
		;;
		*)
		break;
	esac
done

tool_dir="$dir/tools-$group"
tool_output_dir=$tool_dir/$tool # all tools keep data in their tool specific dir
case "$mode" in
	install)
	if [ ! -e $tool_bin ]; then
		error_log "$tool_bin not installed, required java and nsenter, exiting"
		exit 1
	fi
	;;
	start)
	mkdir -p $tool_output_dir
	echo "$script_name: running $tool_cmd"
	tool_stdout_file=$tool_output_dir/$tool-stdout.txt
	tool_stderr_file=$tool_output_dir/$tool-stderr.txt
	tool_cmd_file="$tool_output_dir/$tool.cmd"
	while true; do
		run_jmap
		sleep $interval
	done
	;;
	stop)
	if [[ -s "$tool_pid_file" ]]; then
		for tool_pid_file in `/bin/ls $pbench_tmp | grep "$group.$iteration.$tool"`; do
			tool_pid=`cat "$pbench_tmp/$tool_pid_file"`
			kill $tool_pid && /bin/rm "$pbench_tmp/$tool_pid_file"
		done
	else
		warn_log "[$script_name]: tool is not running, nothing to kill"
	fi
	;;
	postprocess)
	debug_log "postprocessing $script_name"
	$script_path/postprocess/$script_name-postprocess $tool_output_dir
	;;
esac
