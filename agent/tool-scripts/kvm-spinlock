#!/bin/bash

script_path=`dirname $0`
script_name=`basename $0`
pbench_bin="`cd ${script_path}/..; /bin/pwd`"

# source the base script
. "$pbench_bin"/base

# Perftool scripts must provide the following functions
# 1) Install the tool
# 2) Start data collection
# 3) Stop data collection
# 4) post-process the data

# Defaults
tool=$script_name
group=default
dir=""
mode=""
interval="10"
iteration="1"
options="none"
if [ "$script_name" == "sysfs" ]; then
	pattern='*'
	maxdepth=4
	path=""
fi

# Process options and arguments
opts=$(getopt -q -o idp --longoptions "path:,maxdepth:,pattern:,vm:,dir:,group:,iteration:,interval:,start,stop,install,postprocess" -n "getopt.sh" -- "$@");
if [ $? -ne 0 ]; then
	printf "\n"
	printf "$script_name: you specified an invalid option\n\n"
	printf "The following options are available: \n\n"
	printf -- "\t--install,			install this perf tool\n"
	printf "\n"
	printf -- "\t--start|stop|postprocess	start/stop/postprocess the data collection\n"
	printf -- "\t--iteration=int 		the iteration (required)\n"
	printf -- "\t--group=str		the perftool group (required)\n"
	printf -- "\t--dir=str			directory to store data collection (required)\n"
	printf -- "\t--interval=int		number of seconds between each data collection\n"
	if [ "$script_name" == "sysfs" ]; then
		printf -- "\t--pattern=str		a pattern passed to -name option of find command to filter files\n"
		printf -- "\t--path=str			a path (beyond the /sysfs prefix) passed to -name option of find command to filter files\n"
		printf -- "\t--maxdepth=int		a maxdepth passed to -name option of find command to filter files\n"
	fi
	if [ "$script_name" == "virsh-migrate" ]; then
		printf -- "\t--vm=str			the name of the VM being migrated\n"
	fi
	exit 1
fi
eval set -- "$opts";
while true; do
	case "$1" in
		--install)
		mode="install"
		shift;
		;;
		--start)
		mode="start"
		shift;
		;;
		--stop)
		mode="stop"
		shift;
		;;
		--postprocess)
		mode="postprocess"
		shift;
		;;
		-d|--dir)
		shift;
		if [ -n "$1" ]; then
			dir="$1"
			shift
		fi
		;;
		-g|--group)
		shift;
		if [ -n "$1" ]; then
			group="$1"
			shift
		fi
		;;
		-i|--iteration)
		shift;
		if [ -n "$1" ]; then
			iteration="$1"
			shift
		fi
		;;
		--interval)
		shift;
		if [ -n "$1" ]; then
			interval="$1"
			shift
		fi
		;;
		--path)
		shift;
		if [ -n "$1" ]; then
			path="$1"
			shift
		fi
		;;
		--maxdepth)
		shift;
		if [ -n "$1" ]; then
			maxdepth="$1"
			shift
		fi
		;;
		--pattern)
		shift;
		if [ -n "$1" ]; then
			pattern="$1"
			shift
		fi
		;;
		--vm)
		shift;
		if [ -n "$1" ]; then
			vm="$1"
			shift
		fi
		;;
		--)
		shift;
		break;
		;;
	esac
done

tool_dir="$dir/tools-$group"
tool_output_dir="$tool_dir/$tool" # all tools keep data in their tool specific dir
tool_cmd_file="$tool_output_dir/$tool.cmd"
tool_pid_file="$pbench_tmp/$group.$iteration.$tool.pid"
tool_stdout_file="$tool_output_dir/$tool-stdout.txt"
tool_stderr_file="$tool_output_dir/$tool-stderr.txt"
case "$tool" in
	virsh-migrate|qemu-migrate)
	tool_cmd="$script_path/datalog/$tool-datalog $interval $tool_stdout_file $vm"
	;;
	sysfs)
	tool_cmd="$script_path/datalog/$tool-datalog $interval $tool_stdout_file \"$path\" \"$maxdepth\" \"$pattern\""
	;;
	dm-cache|turbostat|openvswitch|proc-sched_debug|proc-vmstat|proc-interrupts|cpuacct|numastat|kvmstat|kvm-spinlock|vmstat)
	tool_cmd="$script_path/datalog/$tool-datalog $interval $tool_stdout_file"
	;;
	numastat)
	tool_cmd="$script_path/datalog/$tool-datalog $interval $tool_stdout_file $pattern"
	;;
	turbostat)
esac
case "$mode" in
	install)
	case "$tool" in
		turbostat)
		release=$(awk '{x=$7; split(x, a, "."); print a[1];}' /etc/redhat-release)
		case $release in
    			6)
        		pkg=cpupowerutils
        		;;
    			*)
        		pkg=kernel-tools
        		;;
		esac
		check_install_rpm $pkg
		;;
		dm-cache)
		kmod=dm_cache
		if ! grep -q $kmod /proc/modules ; then
            		echo "$kmod not loaded, exiting"
            	exit 1
		fi
        ;;
	esac
        ;;
	start)
	mkdir -p "$tool_output_dir"
	echo "$tool_cmd" >"$tool_cmd_file"
	chmod +x "$tool_cmd_file"
	debug_log "$script_name: running $tool_cmd"
	"$tool_cmd_file" 2>"$tool_stderr_file" & echo $! >"$tool_pid_file"
	wait
	;;
	stop)
	pid=`cat $tool_pid_file`
	debug_log "stopping $script_name"
	kill $pid && /bin/rm -f "$tool_pid_file"
	;;
	postprocess)
	debug_log "postprocessing $script_name"
	$script_path/postprocess/$script_name-postprocess "$tool_output_dir"
	;;
esac
