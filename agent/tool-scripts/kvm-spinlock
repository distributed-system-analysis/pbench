#!/bin/bash

script_path=`dirname $0`
script_name=`basename $0`
pbench_bin="`cd ${script_path}/..; /bin/pwd`"

# source the base script
. "$pbench_bin"/base

# Perftool scripts must provide the following functions
# 1) Install the tool
# 2) Start data collection
# 3) Stop data collection
# 4) post-process the data

# Defaults
tool=$script_name
group=default
dir=""
mode=""
interval="10"
iteration="1"
options="none"
if [ "$script_name" == "sysfs" ]; then
	pattern='*'
	maxdepth=4
	path=""
fi

# Process options and arguments
opts=$(getopt -q -o idp --longoptions "start-delay:,timeout:,devices:,path:,maxdepth:,pattern:,vm:,dir:,group:,iteration:,interval:,start,stop,install,postprocess" -n "getopt.sh" -- "$@");
if [ $? -ne 0 ]; then
	printf "\n"
	printf "$script_name: you specified an invalid option\n\n"
	printf "The following options are available: \n\n"
	printf -- "\t--install,			install this perf tool\n"
	printf "\n"
	printf -- "\t--start|stop|postprocess	start/stop/postprocess the data collection\n"
	printf -- "\t--iteration=int 		the iteration (required)\n"
	printf -- "\t--group=str		the perftool group (required)\n"
	printf -- "\t--dir=str			directory to store data collection (required)\n"
	printf -- "\t--interval=int		number of seconds between each data collection\n"
	if [ "$script_name" == "sysfs" ]; then
		printf -- "\t--pattern=str		a pattern passed to -name option of find command to filter files\n"
		printf -- "\t--path=str			a path (beyond the /sysfs prefix) passed to -name option of find command to filter files\n"
		printf -- "\t--maxdepth=int		a maxdepth passed to -name option of find command to filter files\n"
	fi
	if [ "$script_name" == "virsh-migrate" ]; then
		printf -- "\t--vm=str			the name of the VM being migrated\n"
	fi
	if [ "$script_name" == "blktrace" ]; then
		printf -- "\t--devices=str,[str]	the list of block devices to trace\n"
	fi
	if [ "$script_name" == "kvmtrace" ]; then
		printf -- "\t--vm=str			the hostname of the vm running (to get kallsyms)\n"
		printf -- "\t--timeout=int		how long the trace will run (default is 1 second).  If 0 is used, the trace will not stop until stop-tools is called\n"
		printf -- "\t--start-delay=int		sleep this many seconds before starting the trace\n"
	fi
	exit 1
fi
eval set -- "$opts";
while true; do
	case "$1" in
		--install)
		mode="install"
		shift;
		;;
		--start)
		mode="start"
		shift;
		;;
		--stop)
		mode="stop"
		shift;
		;;
		--postprocess)
		mode="postprocess"
		shift;
		;;
		-d|--dir)
		shift;
		if [ -n "$1" ]; then
			dir="$1"
			shift
		fi
		;;
		-g|--group)
		shift;
		if [ -n "$1" ]; then
			group="$1"
			shift
		fi
		;;
		-i|--iteration)
		shift;
		if [ -n "$1" ]; then
			iteration="$1"
			shift
		fi
		;;
		--interval)
		shift;
		if [ -n "$1" ]; then
			interval="$1"
			shift
		fi
		;;
		--path)
		shift;
		if [ -n "$1" ]; then
			path="$1"
			shift
		fi
		;;
		--maxdepth)
		shift;
		if [ -n "$1" ]; then
			maxdepth="$1"
			shift
		fi
		;;
		--pattern)
		shift;
		if [ -n "$1" ]; then
			pattern="$1"
			shift
		fi
		;;
		--vm)
		shift;
		if [ -n "$1" ]; then
			vm="$1"
			shift
		fi
		;;
		--devices)
		shift;
		if [ -n "$1" ]; then
			devices=`echo $1 | sed -e s/","/" "/g`
			shift
		fi
		;;
		--start-delay)
		shift;
		if [ -n "$1" ]; then
			start_delay="$1"
			shift
		fi
		;;
		--timeout)
		shift;
		if [ -n "$1" ]; then
			timeout="$1"
			shift
		fi
		;;
		--)
		shift;
		break;
		;;
	esac
done

tool_dir="$dir/tools-$group"
tool_output_dir="$tool_dir/$tool" # all tools keep data in their tool specific dir
tool_cmd_file="$tool_output_dir/$tool.cmd"
tool_pid_file="$pbench_tmp/$group.$iteration.$tool.pid"
tool_stdout_file="$tool_output_dir/$tool-stdout.txt"
tool_stderr_file="$tool_output_dir/$tool-stderr.txt"
case "$tool" in
	virsh-migrate|qemu-migrate)
	tool_cmd="$script_path/datalog/$tool-datalog $interval $tool_stdout_file $vm"
	;;
	sysfs)
	tool_cmd="$script_path/datalog/$tool-datalog $interval $tool_stdout_file \"$path\" \"$maxdepth\" \"$pattern\""
	;;
	dm-cache|turbostat|openvswitch|proc-sched_debug|proc-vmstat|proc-interrupts|cpuacct|numastat|kvmstat|kvm-spinlock|vmstat)
	tool_cmd="$script_path/datalog/$tool-datalog $interval $tool_stdout_file"
	;;
	numastat)
	tool_cmd="$script_path/datalog/$tool-datalog $interval $tool_stdout_file $pattern"
	;;
	blktrace)
	tool_cmd="blktrace $devices >$tool_stdout_file"
	;;
	kvmtrace)
	tool_bin=/usr/bin/trace-cmd
	group=default
	sleep_cmd="sleep 1"
	if [ ! -z "$timeout" ]; then
		if [ $timeout -eq 0 ]; then
			sleep_cmd=""
		else
			sleep_cmd="sleep $timeout"
		fi
	fi
	tool_cmd="$tool_bin record -a -e kvm $sleep_cmd"
	;;
esac
case "$mode" in
	install)
	case "$tool" in
		kvmtrace)
		# ensure debugfs is mounted
		if cat /proc/mounts | grep -q debugfs; then
			echo "debugfs is already mounted"
		else
			mount -t debugfs none /sys/kernel/debug
		fi
		# no version is provided here because we rely on a 
		# distribution provided package and we take whatever we can get
		check_install_rpm trace-cmd
		;;
		turbostat)
		release=$(awk '{x=$7; split(x, a, "."); print a[1];}' /etc/redhat-release)
		case $release in
    			6)
        		pkg=cpupowerutils
        		;;
    			*)
        		pkg=kernel-tools
        		;;
		esac
		check_install_rpm $pkg
		;;
		dm-cache)
		kmod=dm_cache
		if ! grep -q $kmod /proc/modules ; then
            		echo "$kmod not loaded, exiting"
            	exit 1
		fi
        	;;
	esac
        ;;
	start)
	if [ "$tool" == "kvmtrace" ]; then
		if [ ! -z "$start_delay" ]; then
			sleep $start_delay
		fi
	fi
	mkdir -p "$tool_output_dir"
	pushd "$tool_output_dir" >/dev/null
	echo "$tool_cmd" >"$tool_cmd_file"
	chmod +x "$tool_cmd_file"
	debug_log "$script_name: running $tool_cmd"
	"$tool_cmd_file" 2>"$tool_stderr_file" & echo $! >"$tool_pid_file"
	wait
	popd >/dev/null
	;;
	stop)
	debug_log "stopping $script_name"
	pid=`cat $tool_pid_file`
	if [ "$tool" == "kvmtrace" ]; then
		if [ -z "$sleep_cmd" ]; then
			# kill the perf cmd
			kill -s SIGINT $pid
		else
			# kill the sleep process if it still exists
			sleep_pid=`ps --ppid $pid | pgrep sleep`
			if [ ! -z "$sleep_pid" ]; then
				kill $sleep_pid
			fi
		fi
		# wait for the trace-cmd pid to complete
		while [ -d /proc/$pid ]; do
			debug_log "waiting for PID $pid to die"
			sleep 0.5
		done
	else
		kill $pid && /bin/rm -f "$tool_pid_file"
	fi
	;;
	postprocess)
	pushd $tool_output_dir >/dev/null
	case $tool in
		blktrace)
		for dev in $devices; do
			devs="$devs `basename $dev`"
		done
		pushd $tool_output_dir >/dev/null
		blkparse $devs >blkparse-stdout.txt 2>blkparse-stderr.txt
		bzip2 blkparse-stdout.txt &
		for dev in $devs; do
			bzip2 $dev.blktrace.* &
		done
		wait
		popd >/dev/null
		;;
		kvmtrace)
		/usr/bin/trace-cmd report >kvmtrace-report-stdout.txt 2>kvmtrace-report-stderr.txt
		grep rip kvmtrace-report-stdout.txt | awk -F"reason" '{print $2}' | sort | uniq -c | sort -rn >kvmtrace-exit-reasons.txt
		if [ -z "$vm" ]; then
			# if the vm hostname was not provided, try to find a running vm, and use its vm name as the host
			vm=`virsh list | grep running | head -1 | awk '{print $2}'`
		fi
		ssh $vm cat /proc/kallsyms >kallsyms-guest.txt
		$script_path/postprocess/kvmtrace-postprocess .
		bzip2 --fast kvmtrace-report-stdout.txt &
		bzip2 --fast trace.dat &
		bzip2 --fast kallsyms-guest.txt &
		wait
		;;
		*)
		debug_log "postprocessing $script_name"
		$script_path/postprocess/$script_name-postprocess "$tool_output_dir"
		;;
	esac
	popd >/dev/null
	;;
esac
