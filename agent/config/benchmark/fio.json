// Benchmark configuration data for fio
//
// There are potentially 3 sections for a benchmark: controller, client, and server
// Every benchmark must have a cotroller and client section, and some benchmarks
// need a server section.
{
  // This section defines how the controller works: benchmark options, packages to install, 
  "controller" : {
    // This script is run before any client/server execution.  This may be used to 
    // prepare certain files on the controller for the benchmark.
    "pre-script" : "",
    // This script is run after data is copied from clients [and servers if applicable].
    // This script must translate the result data into metrics consumable by ES.
    "post-script" : "/opt/pbench-agent/bench-scripts/postprocess/fio-postprocess-cdm",
    // The following deals specially with command-line parameters of this benchmark.
    // A parameter is a benchmark option, typically written as "--arg-=value" format.  This
    // section specifies various defaults (there can be different defaults for different
    // use-cases), mandatory parameters, of which the pbench execution and post-processing
    // expects, and finally a "specs" section which validates the user's parameters for
    // correctness.
    "parameters" : { 
      "defaults": {
        // When calling pbench-run-benchmark, if one uses "--defaults=<name>", a matching
        // name will cause their respective parameters listed here to be used.
        // If not "--defaults=<name> is used, the entry "default" will be used
        "default" : [ "--rw=read,randread", "--filename=/tmp/fio-tst", "--filesize=256M",
          "--runtime=30s", "--jobfile=fio.job", "--bs=16k"
          ],
        // This one is completely made-up and may bear no relevance to actual ceph use-case
        "ceph-osp" : [ "--rw=read,randr,write,randw", "--bs=1m", "--ioengine=sync",
          "--numjobs=1", "--runtime=30s", "--jobfile=fio.job"
          ],
        // The "mandatory" entry will alwyas be included and cannot be overrided by the user.
        // These are considered mandatory because the post-processing relies on the data
        // these options produce.
        "mandatory" : [ "--time_based=1", "--write_hist_log=fio", "--log_hist_msec=10000",
          "--write_bw_log=fio", "--write_iops_log=fio", "--write_lat_log=fio",
          "--log_avg_msec=1000", "--log_unix_epoch=1", "--output-format=json",
          "--output=fio-result.json"
          ]
      },
      // The following infomation is to aid pbench in parsing benchmark-specific paramters.
      // Paramaters are grouped together by similar *value* types and tranforms.
      "specs" : {
        // For example, a group of parameters named "size_KMG" describes values which are sizes,
        // like 4k or 16M.  This is a common value type used in fio for several parameters.
        // Since the input value can use different units, the value is converted (transformed)
        // to a common unit.
        "size_KMG" : {
          // A description of the types of values in "--arg=value"
          "description" : "bytes in k/K (1024), m/M (1024^2) or g/G (1024^3): 4k 16M 1g",
          // All of the valid strings for "arg" in "--arg=value"
          "arguments" : [ "bs", "filesize", "io_size", "mem" ],
          // This is the perl regex tested against the value in "--arg=value" which must pass
       	  "value_regex" : "[0-9]+[kbmgKBMG]",
          // Once value_regex passes, it can be optionally be tranformed with perl s// regex
       	  "value_transforms" : [ "s/([0-9]+)[gG]/($1*1024).\"M\"/e",
            "s/([0-9]+)[mM]/($1*1024).\"K\"/e"
            ]
          },
        "size_KMG_range" : {
          "description" : "a range of size_KMG: 4k-8k 16k-2m 24m-1G",
       	  "arguments" : [ "bsrange", "bssplit" ],
       	  "value_regex" : "[0-9]+[kbmgKBMG]\\-[0-9]+[kbmgKBMG]",
       	  "value_transforms" : [ "s/([0-9]+)[gG]/($1*1024).\"M\"/eg",
            "s/([0-9]+)[mM]/($1*1024).\"K\"/eg"
            ]
          },
        "generic_string" : {
          "description" : "all types of strings",
          "arguments" : [ 
            "output-format", "output", "buffer_pattern", "cgroup", "clocksource",
            "continue_on_error", "cpus_allowed_policy", "cpus_allowed", "directory",
            "exec_postrun", "exec_prerun", "filename", "ignore_error", "ioscheduler",
            "jobfile"
            ],
          "value_regex" : ".+"
          // no "value_transform" here because there's no reason to alter this value
          },
        "rw_types" : {
          "description" : "all possible testtypes",
          "arguments" : [ "rw" ],
          "value_regex" : "|^(|rand)(read|write|trim)$|^readwrite$|^randrw$|^trimwrite$"
          },
        "ioengine_types" : {
          "description" : "all possible ioengine types",
          "arguments" : [ "ioengine" ],
          "value_regex" : "^(|p|pv|v)sync$|^pvsync2$|^posixaio$|^mmap$|^(|net)splice$|^sg$|^null$|^net$|^cpuio$|^rdma$|^e4defrag$|^falloc$|^filecreate$|^external$|^libaio$"
          },
        "log_types" : {
       	  "description" : "all possible log types",
	  "arguments" : [ "write_bw_log", "write_hist_log", "write_iolog", "write_iops_log",
            "write_lat_log"
            ],
          "value_regex" : "^fio$"
          },
        "io_submit_modes" : {
          "description" : "How IO submissions and completions are done",
          "arguments" : [ "io_submit_mode" ],
          "value_regex" : "^inline$|^offload$"
          },
        "time_smh" : {
          "description" : "time in seconds, minutes, or hours: 10s 2m 1h",
          "arguments" : [ "runtime", "steadystate_duration", "steadystate_ramp_time",
            "steadystate"
            ],
          "value_regex" : "^[0-9]+[smh]$"
          // todo: use value_transform to convert all values to seconds (for consistency in search for ES)
          },
        "boolean" : {
          "description" : "1 for true and 0 for false",
          "arguments" : [ "allow_file_create", "allow_mounted_write", "allrandrepeat",
            "atomic", "block_error_percentiles", "buffered", "cgroup_nodelete",
            "clat_percentiles", "create_fsync", "create_only", "create_on_open",
            "create_serialize", "direct", "disable_bw_measurement", "disable_clat",
            "disable_lat", "disable_slat", "disk_util", "do_verify", "end_fsync",
            "error_dump", "experimental_verify", "file_append", "fill_device",
            "fsync_on_close", "gtod_reduce", "invalidate", "lat_percentiles", "log_max_value",
            "log_offset", "log_store_compressed", "log_unix_epoch", "overwrite", "per_job_logs",
            "pre_read", "randrepeat", "rate_ignore_thinktime", "replay_no_stall",
            "scramble_buffers", "serialize_overlap", "stats", "sync", "trim_verify_zero",
            "unified_rw_reporting", "unique_filename", "unlink_each_loop", "unlink",
            "verify_dump", "erify_fatal", "verify_state_load", "verify_state_save",
            "time_based"
            ],
          "value_regex" : "[0,1]"
          },
        "positive_integer" : {
          "description" : "a whole number greater than 0",
          "arguments" : [ "ba", "buffer_compress_chunk", "buffer_compress_percentage",
            "bwavgtime", "cgroup_weight", "cpumask", "dedupe_percentage", "fdatasync", "flow_id",
            "flow_sleep", "flow", "flow_watermark", "fsync", "gia", "gtod_cpu", "hugepage-size",
            "iodepth_batch_complete_max", "iodepth_batch_complete_min", "iodepth_batch",
            "iodepth_low", "iodepth", "iopsavgtime", "kb_base", "log_avg_msec", "log_compression",
            "log_hist_coarseness", "log_hist_msec", "loops", "nice", "nrfiles", "numjobs",
            "offset_align", "openfiles", "percentage_random", "prioclass", "prio", "rate_cycle",
            "rate_iops_min", "rate_iops", "rate_min", "rate", "replay_align", "replay_scale",
            "replay_time_scale", "rwmixread", "rwmixwrite", "significant_figures",
            "thinktime_blocks", "thinktime_spin", "thinktime", "trim_backlog_batch",
            "trim_percentage", "uid", "unit_base", "verify_async", "verify_backlog_batch",
            "verify_interval", "verify_offset", "write_barrier"
            ],
          "value_regex" : "[1-9][0-9]*"
          }
        } // end of specs
      } // end of parameters
    }, // end of controller 
    // If the benchmark uses --clients parameter (all of them should), then this "client" section
    // must be filled out.
  "client" : { 
    // Any package listed here must be present, or an install is attempted
    "packages" : [ "pbench-fio-3.3-1" ],
    // A local path or URL to a script to run on client before test but after copy-to files,
    // The benchmark parameters are passed to this, and this script must exit "0" to continue.
    // If a URL is provided, the client will attempt to retrive it via curl.
    "pre-script" : " ",
    // Similar ro the pre-script, this will execute after the test.
    "post-script" : " ",
    // A list of files to copy to the client (under $pbench_bench) before the test
    "copy-to" : [ "/opt/pbench-agent/bench-scripts/templates/fio.job" ],
    // The benchmark binary to execute on the client
    "bin" : "fio",
    // When the benchmark binary is executed on the client, all of the parameters
    // included in the benchmark-iteration are passed along.  In order to make changes
    // to those parameters, Apply a regex to the paramaters before executing.
    "param_regex" : [ "s/--clients=.+//", // Remove entire --clients=hostanmes param
      "s/\\s--jobfile=(\\S+)(.*)/$2$1/" // Strip --jobfile and put filename at end
      ]
  }
    // There can be a "server" section, just like a "client" section, but fio
    // does not use this.  Other benchmarks like uperf will use it.  The server
    // section follows the same format and function as the "clients" section, but
    // applies to the hostnames provides with --servers= parameter.
}
