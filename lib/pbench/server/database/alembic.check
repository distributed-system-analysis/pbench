#!/bin/bash -e

pb_root=${PWD}  # This script is run from the Pbench root; remember where that is

PB_CONTAINER_REG=${PB_CONTAINER_REG:-$(<${HOME}/.config/pbench/ci_registry.name)}

echo "Starting PostgreSQL container" >&2
${pb_root}/jenkins/podman run --name postgresql-alembic \
    --detach \
    --rm \
    --network host \
    --workdir /opt/app-root/src \
    --env 'PATH=/opt/app-root/src/bin:/opt/app-root/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' \
    --env 'TERM=xterm' \
    --env 'container=oci' \
    --env 'STI_SCRIPTS_URL=image:///usr/libexec/s2i' \
    --env 'PGUSER=postgres' \
    --env 'PLATFORM=el8' \
    --env 'APP_DATA=/opt/app-root' \
    --env 'CONTAINER_SCRIPTS_PATH=/usr/share/container-scripts/postgresql' \
    --env 'ENABLED_COLLECTIONS' \
    --env 'POSTGRESQL_VERSION=13' \
    --env 'APP_ROOT=/opt/app-root' \
    --env 'STI_SCRIPTS_PATH=/usr/libexec/s2i' \
    --env 'HOME=/var/lib/pgsql' \
    --env 'POSTGRESQL_USER=pbench' \
    --env 'POSTGRESQL_PASSWORD=pbench' \
    --env 'POSTGRESQL_DATABASE=pbench' \
    ${PB_CONTAINER_REG}/postgresql-13:latest container-entrypoint run-postgresql

trap "echo 'Stopping PostgreSQL container' >&2 ; ${pb_root}/jenkins/podman stop postgresql-alembic" INT ABRT QUIT EXIT

# If the timeout is reached, the `timeout` command will exit with an error (124)
# which will cause the script to exit immediately and trigger the `trap` above.
timeout 60s bash -c 'until nc -z localhost 5432; do
    echo "Waiting for PostgreSQL" >&2
    sleep 1
done'

cd ${pb_root}/lib/pbench/server/database

# First we run all our migrations to bring the blank database up to speed.
alembic upgrade head

# Then we check to see if we have any model changes not captured in existing
# migrations.
alembic check
