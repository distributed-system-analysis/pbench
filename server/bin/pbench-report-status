#!/usr/bin/env python3
# -*- mode: python -*-

import sys, os

from argparse import ArgumentParser

# Correct the first path to be the "lib" directory to make the
# pbench-base.sh script simple, allowing the imports from the
# pbench library to work cleanly.
first_path = sys.path[0]
assert first_path.endswith('/bin')
lib_path = os.path.join(os.path.dirname(first_path), 'lib')
sys.path[0] = lib_path

from pbench import report_status, PbenchConfig, BadConfig, get_es, \
        get_pbench_logger, PbenchTemplates


_prog = os.path.basename(sys.argv[0])
_dir = os.path.dirname(os.path.abspath(sys.argv[0]))

if __name__ == '__main__':
    parser = ArgumentParser(
        """Usage: {} --name <name> --timestamp <ts> --type status|error"""
        """ <file-to-index>""".format(_prog))
    parser.add_argument(
        "-C", "--config", dest="cfg_name",
        help="Specify config file")
    parser.set_defaults(cfg_name = os.environ.get("CONFIG"))
    parser.add_argument(
        "-n", "--name", dest="name", required=True,
        help="Specify name of program reporting its status")
    parser.add_argument(
        "-t", "--timestamp", dest="timestamp", required=True,
        help="The timestamp that should be associated with the file to index,"
            " takes the form run-<yyyy>-<mm>-<dd>T<HH>:<MM>:<SS>-<TZ>")
    parser.add_argument(
        "-T", "--type", dest="doctype", required=True,
        help="The type of report document to index, one of status|error")
    parser.add_argument(
        "file_to_index", nargs=1,
        help="The file containing the report to index")
    parsed = parser.parse_args()

    try:
        config = PbenchConfig(parsed.cfg_name)
    except BadConfig as e:
        print("{}: {}".format(_prog, e), file=sys.stderr)
        sys.exit(1)

    logger = get_pbench_logger(_prog, config)
    try:
        es = get_es(config, logger)
        idx_prefix = config.get('Indexing', 'index_prefix')
    except Exception:
        # If we don't have an Elasticsearch configuration just pass None
        es = None
        idx_prefix = None
    else:
        templates = PbenchTemplates(_dir, idx_prefix, logger)
        templates.update_templates(es, 'server-reports')
    status = report_status(es, logger, config.LOGSDIR, idx_prefix,
            parsed.name, parsed.timestamp, parsed.doctype,
            parsed.file_to_index[0])
    sys.exit(status)
