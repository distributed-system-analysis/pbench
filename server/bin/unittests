#!/bin/bash

unset CONFIG

export LANG=C
export LC_ALL=C

export _tdir=$(dirname $(readlink -f $0))
export _gitdir=$(dirname $(dirname $_tdir))
export _tlib=${_tdir}/../lib
export _testbase=/var/tmp/pbench-test-server

function remove_path {
    # PATH ($2) => /bin:/opt/a dir/bin:/sbin
    WORK=:$2:
    # WORK => :/bin:/opt/a dir/bin:/sbin:
    REMOVE=$1
    WORK=${WORK/:$REMOVE:/:}
    # WORK => :/bin:/sbin:
    WORK=${WORK%:}
    WORK=${WORK#:}
    #PATH=$WORK
    # PATH => /bin:/sbin
    echo $WORK
}
PATH=$(remove_path /opt/pbench-server/bin $PATH)
PATH=$(remove_path /opt/pbench-agent/bench-scripts $PATH)
export PATH=$(remove_path /opt/pbench-agent/util-scripts $PATH)

# Fixed timestamp output
export _PBENCH_SERVER_TEST=1
export TZ="UTC"

function _run {
    tname=$1
    shift
    echo "+++ Running $tname" >> $_testout
    $tname $@ >> $_testout 2>&1
    echo "--- Finished $tname (status=$?)" >> $_testout
}

function _run_activate {
    # Testing the server activate script, which is used for every other
    # unit test as well is just a matter of emitting the resulting
    # crontab along side the rest of the environment state provided by
    # the unit test framework.
    echo "+++ Verifying server activation" >> $_testout
    sed -i 's;'${_gitdir}'/server/;/home/user/repo/pbench/server/;' $_testactout
    cat $_testactout >> $_testout
    echo "++++ ${_testopt}/lib/crontab/crontab" >> $_testout
    cat ${_testopt}/lib/crontab/crontab >> $_testout
    rc=$?
    echo "---- ${_testopt}/lib/crontab/crontab" >> $_testout
    echo "++++ ${_testopt_sat}/lib/crontab/crontab" >> $_testout
    cat ${_testopt_sat}/lib/crontab/crontab >> $_testout
    rc=$?
    echo "---- ${_testopt_sat}/lib/crontab/crontab" >> $_testout
    if [ -s $_testactlog ]; then
        echo "++++ $(basename $_testactlog) file contents" >> $_testout
        cat $_testactlog >> $_testout 2>&1
        echo "---- $(basename $_testactlog) file contents" >> $_testout
    fi
    echo "--- Finished verifying server activation (status=$rc)" >> $_testout
}

function _run_allscripts {
    # These three pull in new tar balls from move-results and remote
    # satellite pbench servers feeding them into the dispatch loop.
    _run pbench-server-prep-shim-001
    _run pbench-server-prep-shim-002
    # NOTE WELL: the "satellite-one" argument refers a configuration
    # section in the unit test's pbench-server.cfg file - keep them
    # synchronized.
    _run pbench-sync-satellite satellite-one
    # These next five are related and would flow in this order
    _run pbench-dispatch
    _run pbench-unpack-tarballs
    _run pbench-move-unpacked
    _run pbench-copy-sosreports
    _run pbench-index
    # These four are independent, running periodically to accomplish
    # their specific tasks.
    _run pbench-clean-up-dangling-results-links
    _run pbench-edit-prefixes
    _run pbench-backup-tarballs
    _run pbench-verify-backup-tarballs
    # Invoke pbench-satellite-cleanup in the context of the satellite
    PATH=${_testopt_sat}/unittest-scripts:${_testopt_sat}/bin:${_orig_PATH} CONFIG=${SATCONFIG} _run pbench-satellite-cleanup
}

function _local_find {
    # We create our own local find command so that we don't emit the size
    # information for directories.  This is due to the fact that on different
    # file systems empty directories, or directories with small numbers of
    # files, can be handled differently.  E.g. on Ext4 directories have a
    # minimum size of 4096, while on XFS only after a certain size do they
    # grow to multiples of 4096 [1].  We only care about the sizes of files and
    # links in our tests.
    #
    # [1] https://superuser.com/questions/585844/why-directories-size-are-different-in-ls-l-output-on-xfs-file-system
    find ${1} ! -name $(basename ${1}) -type d -printf '%M          - %P\n' , \( ! -type d ! -type l -printf '%M %10s %P\n' \) , -type l -printf '%M %10s %P -> %l\n' | sort -k 3
}

function _save_tree {
    # Save state of the tree
    if [ -d ${_testhtml} ] ;then
        echo "+++ var/www/html tree state (${_testhtml})" >> $_testout
        _local_find ${_testhtml} >> $_testout
        echo "--- var/www/html tree state" >> $_testout
        echo "+++ results host info (${_testhtml}/pbench-results-host-info.versioned)" >> $_testout
        grep -HvF "\-\-should-n0t-ex1st--" ${_testhtml}/pbench-results-host-info.versioned/pbench-results-host-info.URL00?.* >> $_testout 2>&1
        echo "--- results host info" >> $_testout
    fi
    if [ -d ${_testhtml_sat} ] ;then
        echo "+++ var/www/html-satellite tree state (${_testhtml_sat})" >> $_testout
        _local_find ${_testhtml_sat} >> $_testout
        echo "--- var/www/html-satellite tree state" >> $_testout
        echo "+++ results host info (${_testhtml_sat}/pbench-results-host-info.versioned)" >> $_testout
        grep -HvF "\-\-should-n0t-ex1st--" ${_testhtml_sat}/pbench-results-host-info.versioned/pbench-results-host-info.URL00?.* >> $_testout 2>&1
        echo "--- results host info" >> $_testout
    fi
    echo "+++ pbench tree state (${_testdir})" >> $_testout
    if [ -d ${_testdir} ] ;then
        _local_find ${_testdir} | sed 's;tmp/pbench-\([-a-zA-Z]*\)\.[0-9][0-9]*$;tmp/pbench-\1.NNNN;' >> $_testout
    fi
    echo "--- pbench tree state" >> $_testout
    if [ -d ${_testdir_local} ] ;then
        echo "+++ pbench-local tree state (${_testdir_local})" >> $_testout
        _local_find ${_testdir_local} | sed 's;tmp/pbench-\([-a-zA-Z]*\)\.[0-9][0-9]*$;tmp/pbench-\1.NNNN;' >> $_testout
        echo "--- pbench-local tree state" >> $_testout
    fi
    if [ -d ${_testdir_sat} ] ;then
        echo "+++ pbench-satellite tree state (${_testdir_sat})" >> $_testout
        _local_find ${_testdir_sat} | sed 's;tmp/pbench-\([-a-zA-Z]*\)\.[0-9][0-9]*$;tmp/pbench-\1.NNNN;' >> $_testout
        echo "--- pbench-satellite tree state" >> $_testout
    fi
    if [ -d ${_testdir_sat_local} ] ;then
        echo "+++ pbench-satellite-local tree state (${_testdir_sat_local})" >> $_testout
        _local_find ${_testdir_sat_local} | sed 's;tmp/pbench-\([-a-zA-Z]*\)\.[0-9][0-9]*$;tmp/pbench-\1.NNNN;' >> $_testout
        echo "--- pbench-satellite-local tree state" >> $_testout
    fi
}

function _audit_server {
    echo "+++ Running unit test audit" >> $_testout
    pbench-audit-server >> $_testout 2>&1
    echo "--- Finished unit test audit (status=$?)" >> $_testout
}

function _dump_logs {
    # Dump the state of any generated script logs
    echo "+++ pbench log file contents" >> $_testout
    for dir in ${_testdir} ${_testdir_local} ${_testdir_sat} ${_testdir_sat_local} ;do
        if [ -d ${dir}/logs ] ;then
            echo "++++ $(basename ${dir})/logs" >> $_testout
            find ${dir}/logs -type f -printf "%P\n" | sort | \
                while read fname; do
                    echo "+++++ ${fname}" >> $_testout
                    cat ${dir}/logs/${fname} >> $_testout 2>&1
                    echo "----- ${fname}" >> $_testout
                done
            echo "---- $(basename ${dir})/logs" >> $_testout
        fi
    done
    echo "--- pbench log file contents" >> $_testout

    if [ -s $_testlog ]; then
        echo "+++ $(basename $_testlog) file contents" >> $_testout
        sed 's;tmp/pbench-\([-a-zA-Z0-9]*\)\.[0-9][0-9]*/;tmp/pbench-\1.NNNN/;' $_testlog >> $_testout 2>&1
        echo "--- $(basename $_testlog) file contents" >> $_testout
    fi

    if [ -s $_testcurlpayload ]; then
        echo "+++ $(basename $_testcurlpayload) file contents" >> $_testout
        sed 's;tmp/pbench-\([-a-zA-Z]*\)\.[0-9][0-9]*/;tmp/pbench-\1.NNNN/;' $_testcurlpayload >> $_testout 2>&1
        echo "--- $(basename $_testcurlpayload) file contents" >> $_testout
    fi

    if [ -s $_testloggerpayload ]; then
        echo "+++ $(basename $_testloggerpayload) file contents" >> $_testout
        sed 's;tmp/pbench-\([-a-zA-Z]*\)\.[0-9][0-9]*/;tmp/pbench-\1.NNNN/;' $_testloggerpayload >> $_testout 2>&1
        echo "--- $(basename $_testloggerpayload) file contents" >> $_testout
    fi
}

function _verify_output {
    res=$1
    tname=$2
    diff -c $_tdir/gold/${tname}.txt $_testout
    if [[ $? -gt 0 ]]; then
        echo "FAIL" > $_testres
        res=1
    else
        echo "PASS" > $_testres
        rm $_testout
    fi
    return $res
}

function _setup_state {
    res=0
    mkdir -p $_testopt/unittest-scripts/
    let res=res+$?
    mkdir -p $_testopt_sat/unittest-scripts/
    let res=res+$?
    cp -a $_tdir/test-bin/* $_testopt/unittest-scripts/
    let res=res+$?
    cp $_tdir/test-bin/* $_testopt_sat/unittest-scripts/
    let res=res+$?
    mkdir -p $_testopt/bin
    let res=res+$?
    mkdir -p $_testopt_sat/bin
    let res=res+$?
    cp -a $_tdir/{index-pbench,job_pool.sh,unittests,pbench*} $_testopt/bin
    let res=res+$?
    cp -a $_tdir/{index-pbench,job_pool.sh,unittests,pbench*} $_testopt_sat/bin
    let res=res+$?
    cp -a $_tdir/../lib $_testopt
    let res=res+$?
    cp -a $_tdir/../lib $_testopt_sat
    let res=res+$?
    mkdir -p $_testhtml
    let res=res+$?
    mkdir -p $_testhtml_sat
    let res=res+$?
    if [ $res -ne 0 ]; then
        echo "ERROR: failed to properly setup the test environment root, \"$_testroot\"" >&2
        exit $res
    fi

    mkdir $_testdir $_testdir_sat $_testtmp
    if [[ $? -gt 0 ]]; then
	echo "ERROR: failed to create test pbench, pbench-satellite, and tmp directories, \"$_testdir\", \"$_testdir_sat\", and/or \"$_testtmp\"" >&2
	exit 1
    fi
    if [[ ! -d $_testdir ]]; then
        echo "ERROR: test pbench directory does not exist, \"$_testdir\"" >&2
        exit 1
    fi
    if [[ ! -d $_testdir_sat ]]; then
	echo "ERROR: test pbench-satellite directory does not exist, \"$_testdir_sat\"" >&2
	exit 1
    fi
    if [[ ! -d $_testtmp ]]; then
        echo "ERROR: test tmp directory does not exist, \"$_testtmp\"" >&2
        exit 1
    fi

    # All the "real" scripts are found at $_testopt/bin, the mock scripts
    # are found in $_testopt/unittest-scripts.
    _orig_PATH=$PATH
    export PATH=$_testopt/unittest-scripts:$_testopt/bin:$PATH

    # Expected location of the final configuration files
    export CONFIG=$_testopt/lib/config/pbench-server.cfg
    export SATCONFIG=$_testopt_sat/lib/config/pbench-server.cfg

    # The activate invocations are supposed to work without CONFIG being set,
    # so they do *not* use the global CONFIG file that the rest of the tests
    # use.  We copy the server and index configuration files to a special
    # directory outside of the source tree to isolate any possible changes to
    # the original source.  The activate script copies it to its "final"
    # resting place.

    _state_config="${_tdir}/state/${1}.config/pbench-server.cfg"
    if [ ! -e ${_state_config} ]; then
        _state_config="${_tdir}/state/config/pbench-server.cfg"
    fi
    > ${_testtmp}/pbench-server.cfg
    printf "[DEFAULT]\n"                   >> ${_testtmp}/pbench-server.cfg
    printf "unittest-dir = ${_testroot}\n" >> ${_testtmp}/pbench-server.cfg
    cat ${_state_config}                   >> ${_testtmp}/pbench-server.cfg

    # First we activate the main pbench server (not a satellite).
    echo "$_testopt/bin/pbench-server-config-activate ${_testtmp}/pbench-server.cfg" >> $_testactout
    $_testopt/bin/pbench-server-config-activate ${_testtmp}/pbench-server.cfg >> $_testactout
    rc=$?
    if [ $rc == 0 ] ;then
        # This script uses the copied config file to do the rest.
        echo "$_testopt/bin/pbench-server-activate ${CONFIG}" >> $_testactout
        $_testopt/bin/pbench-server-activate ${CONFIG} >> $_testactout
        rc=$?
    fi
    if [ $rc -ne 0 ]; then
        echo "ERROR: failed to properly activate the main server test environment root, \"$_testroot\"" >&2
        cat $_testactout >&2
        exit $rc
    fi

    _state_config="${_tdir}/state/${1}.config-satellite/pbench-server.cfg"
    if [ ! -e ${_state_config} ]; then
        _state_config="${_tdir}/state/config-satellite/pbench-server.cfg"
    fi
    > ${_testtmp}/pbench-server.cfg
    printf "[DEFAULT]\n"                   >> ${_testtmp}/pbench-server.cfg
    printf "unittest-dir = ${_testroot}\n" >> ${_testtmp}/pbench-server.cfg
    cat ${_state_config}                   >> ${_testtmp}/pbench-server.cfg

    # Next we activate the satellite pbench server.
    echo "$_testopt_sat/bin/pbench-server-config-activate ${_testtmp}/pbench-server.cfg" >> $_testactout
    $_testopt_sat/bin/pbench-server-config-activate ${_testtmp}/pbench-server.cfg >> $_testactout
    rc=$?
    if [ $rc == 0 ] ;then
        # This script uses the copied config file to do the rest.
        echo "$_testopt_sat/bin/pbench-server-activate ${SATCONFIG}" >> $_testactout
        $_testopt_sat/bin/pbench-server-activate ${SATCONFIG} >> $_testactout
        rc=$?
    fi
    if [ $rc -ne 0 ]; then
        echo "ERROR: failed to properly activate the satellite server test environment root, \"$_testroot\"" >&2
        cat $_testactout >&2
        exit $rc
    fi

    # Up until this point, the activate scripts have been running using the
    # mock scripts, which record their output and execution in $_testlog.
    # But we don't want to have every unit test inherit activation log
    # output unconditionally.  So we move the logs to a special activation
    # log file to make sure we keep it around if we need it when debugging
    # or if a unit test might require it.
    mv $_testlog $_testactlog
    rc=$?
    if [ $rc -ne 0 ]; then
        echo "ERROR: failed to rename $_testlog to $_testactlog: code $rc" >&2
        exit $rc
    fi

    # Add files for a given test
    _state_tb=${_tdir}/state/${1}.tar.xz
    if [ -e ${_state_tb} ]; then
        (cd $_testroot; tar xpf $_state_tb)
        if [[ $? -gt 0 ]]; then
            echo "ERROR: unable to create pbench hierarchy for state $1" >&2
            exit 1
        fi
    fi

    # Run per-test state setup
    _state_setup=${_tdir}/state/${1}.setup
    if [ -f ${_state_setup} ]; then
        (cd $_testroot; $_state_setup)
        if [[ $? -gt 0 ]]; then
            echo "ERROR: unable to run per-test state setup for $1" >&2
            exit 1
        fi
    fi
}

function _run_test {
    # What it takes to run one test
    testname=$1
    cmd=$2
    shift 2

    export _testroot="${_testbase}/${testname}"
    mkdir -p $_testroot
    if [[ ! -d $_testroot ]]; then
        echo "ERROR: failed to create test root directory, \"$_testroot\"" >&2
        exit 1
    fi
    rm -rf $_testroot/*
    if [[ $? -gt 0 ]]; then
        echo "ERROR: failed to empty test root directory, \"$_testroot\"" >&2
        exit 1
    fi
    
    export _testres=$_testroot/result.txt
    export _testout=$_testroot/output.txt
    export _testactout=$_testroot/actoutput.txt
    export _testactlog=$_testroot/test-activation-execution.log
    export _testlog=$_testroot/test-execution.log
    export _testcurlpayload=$_testroot/test-curl-payload.log
    export _testloggerpayload=$_testroot/test-logger-payload.log
    export _testdir=$_testroot/pbench
    export _testdir_local=$_testroot/pbench-local
    export _testdir_sat=$_testroot/pbench-satellite
    export _testdir_sat_local=$_testroot/pbench-satellite-local
    export _testtmp=$_testroot/tmp
    export TMPDIR=$_testtmp
    export _testhtml=$_testroot/var-www-html
    export _testhtml_sat=$_testroot/var-www-html-satellite
    export _testopt=$_testroot/opt/pbench-server
    export _testopt_sat=$_testroot/opt/pbench-server-satellite

    _setup_state ${testname}
    # echo ${testname}: ${cmd}
    ${cmd} $*
    _audit_server; _save_tree; _dump_logs
    _verify_output $res ${testname}
    res=$?
    _reset_state ${testname}
    return $res
}

function _reset_state {
    # Run per-test state reset
    _state_reset=$_tdir/state/${1}.reset
    if [ -f ${_state_reset} ]; then
        (cd $_testroot; $_state_reset)
        if [[ $? -gt 0 ]]; then
            echo "ERROR: unable to run per-test state reset for $1" >&2
            exit 1
        fi
    fi

    export PATH=${_orig_PATH}
    unset CONFIG
    unset SATCONFIG

    rm -f $_testactout
    rm -f $_testlog
    rm -f $_testactlog
    rm -f $_testcurlpayload
    rm -f $_testloggerpayload
    rm -rf $_testdir
    if [[ -d $_testdir ]]; then
        echo "ERROR: unable to remove pbench hierarchy" >&2
        exit 1
    fi
    rm -rf ${_testdir_local}
    if [[ -d ${_testdir_local} ]]; then
        echo "ERROR: unable to remove pbench-local hierarchy" >&2
        exit 1
    fi
    rm -rf ${_testdir_sat}
    if [[ -d ${_testdir_sat} ]]; then
        echo "ERROR: unable to remove pbench-satellite hierarchy" >&2
        exit 1
    fi
    rm -rf ${_testdir_sat_local}
    if [[ -d ${_testdir_sat_local} ]]; then
        echo "ERROR: unable to remove pbench-satellite-local hierarchy" >&2
        exit 1
    fi
    rm -rf $_testtmp
    if [[ -d $_testtmp ]]; then
        echo "ERROR: unable to remove tmp hierarchy" >&2
        exit 1
    fi
    rm -rf $_testhtml
    if [[ -d $_testhtml ]]; then
        echo "ERROR: unable to remove var-www-html hierarchy" >&2
        exit 1
    fi
    rm -rf $_testhtml_sat
    if [[ -d $_testhtml_sat ]]; then
        echo "ERROR: unable to remove var-www-html hierarchy" >&2
        exit 1
    fi
    rm -rf $_testroot/opt
    if [[ -d $_testroot/opt ]]; then
        echo "ERROR: unable to remove opt hierarchy" >&2
        exit 1
    fi
}

declare -A cmds=(
    # check for no TOP directory
    [test-0]="_run_allscripts"
    # check for no LOGSDIR directory
    [test-0.1]="_run_allscripts"
    # check for no TMP directory
    [test-0.2]="_run_allscripts"
    # check for no ARCHIVE directory
    [test-1]="_run_allscripts"
    # check for no INCOMING directory
    [test-2]="_run_allscripts"
    # check for no RESULTS directory
    [test-3]="_run_allscripts"
    # check for no USERS directory
    [test-4]="_run_allscripts"
    # check that all scripts run normally if everything is there
    [test-5]="_run_allscripts"
    # check that all scripts run normally if everything is there, using a
    # separate unpack directory from the incoming directory
    [test-5.1]="_run_allscripts"
    # check that all scripts process tar balls, using a separate unpack
    # directory from the incoming directory
    [test-5.2]="_run_allscripts"

    # backup tests
    # check for normal operation
    [test-6]="_run pbench-backup-tarballs"
    # check for no ARCHIVE directory
    [test-6.1]="_run pbench-backup-tarballs"
    # check for no ARCHIVE link resolution
    [test-6.2]="_run pbench-backup-tarballs"
    # checks that the dest directory is not bogus
    [test-6.3]="_run pbench-backup-tarballs"
    # real dest directory, no files needing backup - should succeed
    [test-6.4]="_run pbench-backup-tarballs"
    # real dest directory, all files needing backup - should succeed
    [test-6.5]="_run pbench-backup-tarballs"
    # real dest directory, no files needing backup - corrupted archive should not be copied
    [test-6.6]="_run pbench-backup-tarballs"

    # indexing tests are all test-7.*

    # Special case of running pbench-index with -I to get a dump
    # of the index patterns in use.
    [test-7.0]="_run pbench-index -I"

    [test-7.1]="_run pbench-index"

    # 7.2.X: UnsupportedTarballFormat exceptions:
    # missing metadata.log
    [test-7.2.0]="_run pbench-index"

    # badly formed tarball: ./<resultdir> prefix instead of <resultdir>
    [test-7.2.1]="_run pbench-index"

    [test-7.3]="_run pbench-index"
    [test-7.4]="_run pbench-index"
    [test-7.5]="_run pbench-index"
    [test-7.6]="_run pbench-index"
    [test-7.7]="_run pbench-index"
    # uperf tarball
    [test-7.8]="_run pbench-index"
    # pbench-user-benchmark tarball
    [test-7.9]="_run pbench-index"
    # uperf, fio results data and prometheus data
    # with float conversion
    [test-7.10]="_run pbench-index"
    [test-7.11]="_run pbench-index"
    [test-7.12]="_run pbench-index"
    # The proc-vmstat results data is 7.13.
    [test-7.13]="_run pbench-index"
    # The mpstat results data is in 7.14.
    [test-7.14]="_run pbench-index"

    # truncated uperf results data so we can do
    # a complete comparison of input to output.
    # uperf throughput (Gb_sec) results
    [test-7.15]="_run pbench-index"

    # truncated uperf results data so we can do
    # a complete comparison of input to output.
    # uperf latency and throughput (usec and trans_sec) results
    [test-7.16]="_run pbench-index"

    # activation test
    [test-8]="_run_activate"

    # pbench-verify-backup-tarballs
    # normal case
    [test-9.1]="_run pbench-verify-backup-tarballs"
    # more tarballs in archive
    [test-9.2]="_run pbench-verify-backup-tarballs"
    # more tarballs in backup
    [test-9.3]="_run pbench-verify-backup-tarballs"
    # bad md5 in orig
    [test-9.4]="_run pbench-verify-backup-tarballs"
    # bad md5 in backup
    [test-9.5]="_run pbench-verify-backup-tarballs"

    # trivial results: no mail
    [test-10]="_run pbench-sync-satellite satellite-one"
    # non-trivial results: mail
    [test-11]="_run pbench-sync-satellite satellite-one"

    # shim - failure, no quarantine directory
    [test-12]="_run pbench-server-prep-shim-001"
    [test-13]="_run pbench-server-prep-shim-002"
    # shim - failure, no reception area
    [test-14]="_run pbench-server-prep-shim-001"
    [test-15]="_run pbench-server-prep-shim-002"

    # pbench-unpack-tarballs unpacking to the incoming directory
    [test-16]="_run pbench-unpack-tarballs"
    # pbench-unpack-tarballs unpacking to a temporary directory
    [test-17]="_run pbench-unpack-tarballs"

    # pbench-move-unpacked should do nothing when incoming directory is target
    [test-18]="_run pbench-move-unpacked"
    # pbench-move-unpacked should work as expected using a temporary directory
    [test-19]="_run pbench-move-unpacked"

    [test-20]="_run echo audit archive hierarchy"

    [test-21]="_run pbench-dispatch"

    # Actually exercises satellite code
    [test-22]="_run pbench-satellite-cleanup"

    # Uses pbench-dispatch to test report status via syslog
    [test-23]="_run pbench-dispatch"
)
all_tests_sorted=$(for x in ${!cmds[@]} ;do echo $x ;done | sed 's/\./-/' | sort -n -t '-' -k 3 | sort -n -t '-' -k 2 --stable | sed 's/\(.*-[0-9]\)-\([0-9]\)/\1.\2/')

mode="serial"
case $1 in
    --serial)
        shift
        mode="serial"
        ;;
    --parallel)
        shift
        mode="parallel"
        ;;
    --*)
        printf "Bad argument $1\n" >&2
        exit 1
        ;;
esac

test_args=$*
if [ -z "$test_args" ] ;then
    # No tests given, run them all in sorted order
    tests=$all_tests_sorted
else
    tests=""
    for test_arg in $test_args ;do
        let found=0
        for test_name in $all_tests_sorted; do
            if [[ "$test_arg" == "$test_name" ]]; then
                tests="$tests $test_name"
                let found=found+1
                break
            elif [[ "$test_name" =~ $test_arg ]]; then
                tests="$tests $test_name"
                let found=found+1
            elif [[ "test-$test_arg" == "$test_name" ]]; then
                tests="$tests $test_name"
                let found=found+1
                break
            elif [[ "$test_name" =~ test-$test_arg ]]; then
                tests="$tests $test_name"
                let found=found+1
            fi
        done
        if [ $found -eq 0 ]; then
            printf "Unknown test $test_arg, skipping ...\n" >&2
        fi
    done
fi

let count=0
let failures=0
for testname in $tests ;do
    cmd=${cmds[$testname]}
    if [ -z "$cmd" ]; then
        printf "Unknown test - Logic bomb!: \"${testname}\"\n" >&2
        continue
    fi
    let count=count+1
    if [[ $mode == "parallel" ]]; then
        _run_test ${testname} ${cmd} &
    else
        _run_test ${testname} ${cmd}
        res=$(cat ${_testbase}/${testname}/result.txt)
        echo "$res - ${testname}"
        if [ $res == "PASS" ]; then
            rm ${_testbase}/${testname}/result.txt
            rmdir ${_testbase}/${testname}
        fi
    fi
    if [[ $? != 0 ]] ;then
        let failures=failures+1
    fi
done
if [ $count -eq 0 ]; then
    printf "No tests run!\n" >&2
    let failures=1
elif [[ $mode == "parallel" ]]; then
    wait
    for testname in $tests ;do
        res=$(cat ${_testbase}/${testname}/result.txt)
        echo "$res - ${testname}"
        if [ $res == "PASS" ]; then
            rm ${_testbase}/${testname}/result.txt
            rmdir ${_testbase}/${testname}
        fi
    done
fi

# Attempt to remove test directory entirely; if we fail, ignore it as it
# just means there are output files present for failed tests.
rmdir $_testbase > /dev/null 2>&1

exit $failures
