<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="886" onload="init(evt)" viewBox="0 0 1200 886" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="886" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="869.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="869.00"> </text><g id="frames"><g><title>_stdout_procint (pbench/indexer.py:2407) (8 samples, 0.29%)</title><rect x="48" y="84" width="3" height="15" fill="rgb(215,168,36)"/><text x="51.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2430) (15 samples, 0.54%)</title><rect x="51" y="84" width="7" height="15" fill="rgb(206,85,6)"/><text x="54.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2453) (24 samples, 0.87%)</title><rect x="58" y="84" width="10" height="15" fill="rgb(223,190,9)"/><text x="61.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2455) (4 samples, 0.14%)</title><rect x="68" y="84" width="2" height="15" fill="rgb(243,82,53)"/><text x="71.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2456) (55 samples, 1.99%)</title><rect x="70" y="84" width="23" height="15" fill="rgb(208,23,38)"/><text x="73.00" y="94.50">_..</text></g><g><title>_stdout_procint (pbench/indexer.py:2457) (8 samples, 0.29%)</title><rect x="93" y="84" width="4" height="15" fill="rgb(209,179,53)"/><text x="96.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2458) (42 samples, 1.52%)</title><rect x="97" y="84" width="18" height="15" fill="rgb(240,131,27)"/><text x="100.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2459) (10 samples, 0.36%)</title><rect x="115" y="84" width="4" height="15" fill="rgb(229,70,24)"/><text x="118.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2460) (212 samples, 7.68%)</title><rect x="119" y="84" width="90" height="15" fill="rgb(227,229,28)"/><text x="122.00" y="94.50">_stdout_pr..</text></g><g><title>_stdout_procint (pbench/indexer.py:2461) (66 samples, 2.39%)</title><rect x="209" y="84" width="29" height="15" fill="rgb(241,145,51)"/><text x="212.00" y="94.50">_s..</text></g><g><title>_stdout_procint (pbench/indexer.py:2462) (20 samples, 0.72%)</title><rect x="238" y="84" width="8" height="15" fill="rgb(242,56,1)"/><text x="241.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2463) (23 samples, 0.83%)</title><rect x="246" y="84" width="10" height="15" fill="rgb(223,133,3)"/><text x="249.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2464) (29 samples, 1.05%)</title><rect x="256" y="84" width="12" height="15" fill="rgb(239,54,34)"/><text x="259.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2465) (20 samples, 0.72%)</title><rect x="268" y="84" width="9" height="15" fill="rgb(206,60,10)"/><text x="271.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2466) (26 samples, 0.94%)</title><rect x="277" y="84" width="11" height="15" fill="rgb(207,188,1)"/><text x="280.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2467) (14 samples, 0.51%)</title><rect x="288" y="84" width="6" height="15" fill="rgb(225,194,34)"/><text x="291.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2468) (28 samples, 1.01%)</title><rect x="294" y="84" width="12" height="15" fill="rgb(244,202,36)"/><text x="297.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2473) (8 samples, 0.29%)</title><rect x="306" y="84" width="4" height="15" fill="rgb(215,92,18)"/><text x="309.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2474) (38 samples, 1.38%)</title><rect x="310" y="84" width="16" height="15" fill="rgb(225,197,27)"/><text x="313.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2475) (12 samples, 0.43%)</title><rect x="326" y="84" width="5" height="15" fill="rgb(240,194,14)"/><text x="329.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2476) (49 samples, 1.77%)</title><rect x="331" y="84" width="21" height="15" fill="rgb(252,75,27)"/><text x="334.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2478) (3 samples, 0.11%)</title><rect x="353" y="84" width="1" height="15" fill="rgb(212,195,37)"/><text x="356.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2479) (81 samples, 2.93%)</title><rect x="354" y="84" width="34" height="15" fill="rgb(230,157,47)"/><text x="357.00" y="94.50">_s..</text></g><g><title>_stdout_procint (pbench/indexer.py:2480) (243 samples, 8.80%)</title><rect x="388" y="84" width="104" height="15" fill="rgb(214,127,52)"/><text x="391.00" y="94.50">_stdout_proc..</text></g><g><title>_stdout_procint (pbench/indexer.py:2481) (1,273 samples, 46.09%)</title><rect x="492" y="84" width="544" height="15" fill="rgb(223,85,38)"/><text x="495.00" y="94.50">_stdout_procint (pbench/indexer.py:2481)</text></g><g><title>_make_source_stdout (pbench/indexer.py:2521) (2,645 samples, 95.76%)</title><rect x="35" y="68" width="1130" height="15" fill="rgb(233,181,47)"/><text x="38.00" y="78.50">_make_source_stdout (pbench/indexer.py:2521)</text></g><g><title>_stdout_procint (pbench/indexer.py:2482) (302 samples, 10.93%)</title><rect x="1036" y="84" width="129" height="15" fill="rgb(247,152,22)"/><text x="1039.00" y="94.50">_stdout_procint ..</text></g><g><title>&lt;module&gt; (indexer-driver.py:129) (2,716 samples, 98.33%)</title><rect x="10" y="52" width="1160" height="15" fill="rgb(209,20,52)"/><text x="13.00" y="62.50">&lt;module&gt; (indexer-driver.py:129)</text></g><g><title>_make_source_stdout (pbench/indexer.py:2522) (12 samples, 0.43%)</title><rect x="1165" y="68" width="5" height="15" fill="rgb(221,27,43)"/><text x="1168.00" y="78.50"></text></g><g><title>&lt;module&gt; (indexer-driver.py:130) (34 samples, 1.23%)</title><rect x="1170" y="52" width="15" height="15" fill="rgb(249,125,29)"/><text x="1173.00" y="62.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 0.11%)</title><rect x="1185" y="84" width="2" height="15" fill="rgb(246,180,38)"/><text x="1188.00" y="94.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.11%)</title><rect x="1185" y="100" width="2" height="15" fill="rgb(220,77,38)"/><text x="1188.00" y="110.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.11%)</title><rect x="1185" y="116" width="2" height="15" fill="rgb(250,39,54)"/><text x="1188.00" y="126.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.11%)</title><rect x="1185" y="132" width="2" height="15" fill="rgb(228,115,31)"/><text x="1188.00" y="142.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.11%)</title><rect x="1185" y="148" width="2" height="15" fill="rgb(212,125,8)"/><text x="1188.00" y="158.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.11%)</title><rect x="1185" y="164" width="2" height="15" fill="rgb(219,200,23)"/><text x="1188.00" y="174.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.11%)</title><rect x="1185" y="180" width="2" height="15" fill="rgb(213,145,43)"/><text x="1188.00" y="190.50"></text></g><g><title>all (2,762 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(249,50,51)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (indexer-driver.py:9) (10 samples, 0.36%)</title><rect x="1185" y="52" width="5" height="15" fill="rgb(213,60,36)"/><text x="1188.00" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (10 samples, 0.36%)</title><rect x="1185" y="68" width="5" height="15" fill="rgb(236,11,50)"/><text x="1188.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 0.25%)</title><rect x="1187" y="84" width="3" height="15" fill="rgb(253,124,12)"/><text x="1190.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 0.25%)</title><rect x="1187" y="100" width="3" height="15" fill="rgb(238,90,25)"/><text x="1190.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 0.25%)</title><rect x="1187" y="116" width="3" height="15" fill="rgb(220,167,42)"/><text x="1190.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.25%)</title><rect x="1187" y="132" width="3" height="15" fill="rgb(220,183,52)"/><text x="1190.00" y="142.50"></text></g><g><title>&lt;module&gt; (pbench/indexer.py:27) (4 samples, 0.14%)</title><rect x="1188" y="148" width="2" height="15" fill="rgb(230,160,46)"/><text x="1191.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.14%)</title><rect x="1188" y="164" width="2" height="15" fill="rgb(238,4,48)"/><text x="1191.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.14%)</title><rect x="1188" y="180" width="2" height="15" fill="rgb(239,139,53)"/><text x="1191.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.14%)</title><rect x="1188" y="196" width="2" height="15" fill="rgb(245,110,19)"/><text x="1191.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.14%)</title><rect x="1188" y="212" width="2" height="15" fill="rgb(234,206,48)"/><text x="1191.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.14%)</title><rect x="1188" y="228" width="2" height="15" fill="rgb(253,165,2)"/><text x="1191.00" y="238.50"></text></g><g><title>&lt;module&gt; (elasticsearch1/__init__.py:17) (4 samples, 0.14%)</title><rect x="1188" y="244" width="2" height="15" fill="rgb(230,17,21)"/><text x="1191.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.14%)</title><rect x="1188" y="260" width="2" height="15" fill="rgb(232,146,48)"/><text x="1191.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.14%)</title><rect x="1188" y="276" width="2" height="15" fill="rgb(235,9,23)"/><text x="1191.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.14%)</title><rect x="1188" y="292" width="2" height="15" fill="rgb(239,177,46)"/><text x="1191.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.14%)</title><rect x="1188" y="308" width="2" height="15" fill="rgb(223,120,1)"/><text x="1191.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.14%)</title><rect x="1188" y="324" width="2" height="15" fill="rgb(239,226,16)"/><text x="1191.00" y="334.50"></text></g><g><title>&lt;module&gt; (elasticsearch1/client/__init__.py:5) (4 samples, 0.14%)</title><rect x="1188" y="340" width="2" height="15" fill="rgb(225,152,45)"/><text x="1191.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.14%)</title><rect x="1188" y="356" width="2" height="15" fill="rgb(233,117,1)"/><text x="1191.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.14%)</title><rect x="1188" y="372" width="2" height="15" fill="rgb(208,110,19)"/><text x="1191.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.14%)</title><rect x="1188" y="388" width="2" height="15" fill="rgb(210,192,51)"/><text x="1191.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.14%)</title><rect x="1188" y="404" width="2" height="15" fill="rgb(207,50,34)"/><text x="1191.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.14%)</title><rect x="1188" y="420" width="2" height="15" fill="rgb(227,38,0)"/><text x="1191.00" y="430.50"></text></g><g><title>&lt;module&gt; (elasticsearch1/transport.py:5) (4 samples, 0.14%)</title><rect x="1188" y="436" width="2" height="15" fill="rgb(218,81,1)"/><text x="1191.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.14%)</title><rect x="1188" y="452" width="2" height="15" fill="rgb(207,204,14)"/><text x="1191.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.14%)</title><rect x="1188" y="468" width="2" height="15" fill="rgb(228,24,43)"/><text x="1191.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.14%)</title><rect x="1188" y="484" width="2" height="15" fill="rgb(210,33,26)"/><text x="1191.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.14%)</title><rect x="1188" y="500" width="2" height="15" fill="rgb(233,173,47)"/><text x="1191.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.14%)</title><rect x="1188" y="516" width="2" height="15" fill="rgb(211,172,47)"/><text x="1191.00" y="526.50"></text></g><g><title>&lt;module&gt; (elasticsearch1/connection/__init__.py:2) (3 samples, 0.11%)</title><rect x="1188" y="532" width="2" height="15" fill="rgb(212,160,16)"/><text x="1191.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.11%)</title><rect x="1188" y="548" width="2" height="15" fill="rgb(225,61,27)"/><text x="1191.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.11%)</title><rect x="1188" y="564" width="2" height="15" fill="rgb(247,201,8)"/><text x="1191.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.11%)</title><rect x="1188" y="580" width="2" height="15" fill="rgb(235,174,43)"/><text x="1191.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.11%)</title><rect x="1188" y="596" width="2" height="15" fill="rgb(224,187,50)"/><text x="1191.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.11%)</title><rect x="1188" y="612" width="2" height="15" fill="rgb(214,182,1)"/><text x="1191.00" y="622.50"></text></g><g><title>&lt;module&gt; (elasticsearch1/connection/http_requests.py:4) (3 samples, 0.11%)</title><rect x="1188" y="628" width="2" height="15" fill="rgb(210,61,5)"/><text x="1191.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.11%)</title><rect x="1188" y="644" width="2" height="15" fill="rgb(222,2,49)"/><text x="1191.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.11%)</title><rect x="1188" y="660" width="2" height="15" fill="rgb(235,157,31)"/><text x="1191.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.11%)</title><rect x="1188" y="676" width="2" height="15" fill="rgb(249,175,18)"/><text x="1191.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.11%)</title><rect x="1188" y="692" width="2" height="15" fill="rgb(243,102,48)"/><text x="1191.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.11%)</title><rect x="1188" y="708" width="2" height="15" fill="rgb(230,183,17)"/><text x="1191.00" y="718.50"></text></g><g><title>&lt;module&gt; (requests/__init__.py:101) (3 samples, 0.11%)</title><rect x="1188" y="724" width="2" height="15" fill="rgb(241,100,49)"/><text x="1191.00" y="734.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (3 samples, 0.11%)</title><rect x="1188" y="740" width="2" height="15" fill="rgb(209,205,17)"/><text x="1191.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.11%)</title><rect x="1188" y="756" width="2" height="15" fill="rgb(230,164,43)"/><text x="1191.00" y="766.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.11%)</title><rect x="1188" y="772" width="2" height="15" fill="rgb(210,223,38)"/><text x="1191.00" y="782.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.11%)</title><rect x="1188" y="788" width="2" height="15" fill="rgb(243,200,46)"/><text x="1191.00" y="798.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.11%)</title><rect x="1188" y="804" width="2" height="15" fill="rgb(237,155,28)"/><text x="1191.00" y="814.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.11%)</title><rect x="1188" y="820" width="2" height="15" fill="rgb(228,221,21)"/><text x="1191.00" y="830.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.11%)</title><rect x="1188" y="836" width="2" height="15" fill="rgb(222,117,52)"/><text x="1191.00" y="846.50"></text></g></g></svg>