<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="182" onload="init(evt)" viewBox="0 0 1200 182" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="182" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="165.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="165.00"> </text><g id="frames"><g><title>_stdout_procint (pbench/indexer.py:2399) (15 samples, 0.41%)</title><rect x="33" y="84" width="5" height="15" fill="rgb(218,13,1)"/><text x="36.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2422) (19 samples, 0.52%)</title><rect x="38" y="84" width="6" height="15" fill="rgb(207,136,13)"/><text x="41.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2445) (33 samples, 0.90%)</title><rect x="45" y="84" width="10" height="15" fill="rgb(250,148,2)"/><text x="48.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2447) (10 samples, 0.27%)</title><rect x="55" y="84" width="3" height="15" fill="rgb(250,129,18)"/><text x="58.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2448) (53 samples, 1.44%)</title><rect x="58" y="84" width="17" height="15" fill="rgb(221,205,51)"/><text x="61.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2449) (14 samples, 0.38%)</title><rect x="75" y="84" width="5" height="15" fill="rgb(209,221,18)"/><text x="78.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2450) (40 samples, 1.08%)</title><rect x="80" y="84" width="13" height="15" fill="rgb(224,199,9)"/><text x="83.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2451) (21 samples, 0.57%)</title><rect x="93" y="84" width="6" height="15" fill="rgb(233,97,38)"/><text x="96.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2452) (232 samples, 6.29%)</title><rect x="99" y="84" width="75" height="15" fill="rgb(209,9,20)"/><text x="102.00" y="94.50">_stdout_..</text></g><g><title>_stdout_procint (pbench/indexer.py:2453) (27 samples, 0.73%)</title><rect x="174" y="84" width="8" height="15" fill="rgb(242,98,39)"/><text x="177.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2454) (22 samples, 0.60%)</title><rect x="182" y="84" width="7" height="15" fill="rgb(249,139,50)"/><text x="185.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2455) (18 samples, 0.49%)</title><rect x="189" y="84" width="6" height="15" fill="rgb(205,161,2)"/><text x="192.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2456) (64 samples, 1.74%)</title><rect x="195" y="84" width="21" height="15" fill="rgb(208,189,10)"/><text x="198.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2457) (20 samples, 0.54%)</title><rect x="216" y="84" width="6" height="15" fill="rgb(223,17,34)"/><text x="219.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2458) (27 samples, 0.73%)</title><rect x="222" y="84" width="9" height="15" fill="rgb(227,20,14)"/><text x="225.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2459) (18 samples, 0.49%)</title><rect x="231" y="84" width="5" height="15" fill="rgb(242,216,8)"/><text x="234.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2460) (21 samples, 0.57%)</title><rect x="236" y="84" width="7" height="15" fill="rgb(209,154,35)"/><text x="239.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2461) (35 samples, 0.95%)</title><rect x="243" y="84" width="11" height="15" fill="rgb(224,191,53)"/><text x="246.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2462) (31 samples, 0.84%)</title><rect x="254" y="84" width="10" height="15" fill="rgb(242,70,47)"/><text x="257.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2463) (20 samples, 0.54%)</title><rect x="264" y="84" width="7" height="15" fill="rgb(238,207,0)"/><text x="267.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2469) (47 samples, 1.27%)</title><rect x="272" y="84" width="15" height="15" fill="rgb(236,121,53)"/><text x="275.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2470) (16 samples, 0.43%)</title><rect x="287" y="84" width="5" height="15" fill="rgb(253,8,43)"/><text x="290.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2471) (39 samples, 1.06%)</title><rect x="292" y="84" width="13" height="15" fill="rgb(227,87,19)"/><text x="295.00" y="94.50"></text></g><g><title>_stdout_procint (pbench/indexer.py:2473) (10 samples, 0.27%)</title><rect x="305" y="84" width="3" height="15" fill="rgb(211,129,38)"/><text x="308.00" y="94.50"></text></g><g><title>_make_source_stdout (pbench/indexer.py:2513) (882 samples, 23.92%)</title><rect x="30" y="68" width="282" height="15" fill="rgb(240,66,24)"/><text x="33.00" y="78.50">_make_source_stdout (pbench/indexer.p..</text></g><g><title>_stdout_procint (pbench/indexer.py:2474) (13 samples, 0.35%)</title><rect x="308" y="84" width="4" height="15" fill="rgb(228,106,39)"/><text x="311.00" y="94.50"></text></g><g><title>make_source_id (pbench/indexer.py:755) (2,039 samples, 55.30%)</title><rect x="333" y="84" width="653" height="15" fill="rgb(237,96,38)"/><text x="336.00" y="94.50">make_source_id (pbench/indexer.py:755)</text></g><g><title>make_source_id (pbench/indexer.py:756) (11 samples, 0.30%)</title><rect x="986" y="84" width="3" height="15" fill="rgb(252,90,5)"/><text x="989.00" y="94.50"></text></g><g><title>_make_source_stdout (pbench/indexer.py:2514) (2,682 samples, 72.74%)</title><rect x="312" y="68" width="858" height="15" fill="rgb(213,132,38)"/><text x="315.00" y="78.50">_make_source_stdout (pbench/indexer.py:2514)</text></g><g><title>make_source_id (pbench/indexer.py:758) (566 samples, 15.35%)</title><rect x="989" y="84" width="181" height="15" fill="rgb(245,31,33)"/><text x="992.00" y="94.50">make_source_id (pbench/..</text></g><g><title>&lt;module&gt; (indexer-driver.py:129) (3,638 samples, 98.67%)</title><rect x="10" y="52" width="1164" height="15" fill="rgb(246,189,50)"/><text x="13.00" y="62.50">&lt;module&gt; (indexer-driver.py:129)</text></g><g><title>_make_source_stdout (pbench/indexer.py:2515) (13 samples, 0.35%)</title><rect x="1170" y="68" width="4" height="15" fill="rgb(249,5,0)"/><text x="1173.00" y="78.50"></text></g><g><title>&lt;module&gt; (indexer-driver.py:130) (36 samples, 0.98%)</title><rect x="1174" y="52" width="12" height="15" fill="rgb(207,37,8)"/><text x="1177.00" y="62.50"></text></g><g><title>all (3,687 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(240,11,18)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (indexer-driver.py:9) (10 samples, 0.27%)</title><rect x="1186" y="52" width="4" height="15" fill="rgb(222,13,4)"/><text x="1189.00" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (10 samples, 0.27%)</title><rect x="1186" y="68" width="4" height="15" fill="rgb(220,210,7)"/><text x="1189.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (10 samples, 0.27%)</title><rect x="1186" y="84" width="4" height="15" fill="rgb(227,209,2)"/><text x="1189.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (10 samples, 0.27%)</title><rect x="1186" y="100" width="4" height="15" fill="rgb(244,208,35)"/><text x="1189.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (10 samples, 0.27%)</title><rect x="1186" y="116" width="4" height="15" fill="rgb(222,130,22)"/><text x="1189.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (10 samples, 0.27%)</title><rect x="1186" y="132" width="4" height="15" fill="rgb(219,89,23)"/><text x="1189.00" y="142.50"></text></g></g></svg>