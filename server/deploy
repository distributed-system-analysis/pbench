#! /bin/bash
# -*- mode: shell-script -*-

# deploy script for pbench background tasks depends on ./config/deploy.conf
# and ./config/run.conf

# Dependency: configtools

while getopts dh x ;do
    case $x in
        d)
            debug=1
            ;;
        h)
            help=1
            ;;
    esac
done

if [[ $help == 1 ]] ;then
    echo "Usage: deploy [-dh]"
    exit 0
fi

if [[ $debug == 1 ]] ;then
    rsync="echo /usr/bin/rsync"
    ssh="echo /usr/bin/ssh"
else
    rsync=/usr/bin/rsync
    ssh=/usr/bin/ssh
fi

opts=$SHELLOPTS
case $opts in
    *xtrace*)
        dir=$(dirname $(which $0))
        PROG=$(basename $(which $0))
        ;;
    *)
        dir=$(dirname $0)
        PROG=$(basename $0)
        ;;
esac

export CONFIG=$dir/config/deploy.conf
if [ ! -f $CONFIG ] ;then
   echo "$PROG: ERROR: required config file $CONFIG does not exist" > /dev/stdout
   exit 1
fi

if which getconf.py > /dev/null 2>&1 ;then
    :
else
    echo "$PROG: ERROR: The configtools package must be installed." > /dev/stdout
    exit 2
fi

TMP=/tmp/deploy-bgtasks.$$
mkdir -p $TMP
trap "rm -rf $TMP" EXIT INT QUIT

function do_scripts {
    role=$1
    user=$2
    host=$3
    shift 3
    scripts=$*

    scriptdir=$dir/$(getconf.py script-dir deploy)
    files=""
    for script in $scripts ;do
        if [ -f $scriptdir/$script ] ;then
            files="$files $scriptdir/$script"
        else
            echo "$PROG: WARNING: script $script does not exist at $scriptdir/$script" > /dev/stdout
        fi
    done
    echo "Copying scripts to $host"
    $rsync -avz $files $user@$host:$(getconf.py deploy-script-dir $role)
}

# refactor
function do_libs {
    role=$1
    user=$2
    host=$3
    shift 3
    libs=$*

    libdir=$dir/$(getconf.py lib-dir deploy)
    files=""
    for lib in $libs ;do
        if [ -e $libdir/$lib ] ;then
            files="$files $libdir/$lib"
        else
            echo "$PROG: WARNING: lib $lib does not exist at $libdir/$lib" > /dev/stdout
        fi
    done
    echo "Copying libs to $host"
    $rsync -avz $files $user@$host:$(getconf.py deploy-lib-dir $role deploy)
}

function do_crontab {
    role=$1
    user=$2
    host=$3
    crontabs=$4

    if [[ $debug == 1 ]] ;then
        echo "+++++++++ $crontabs +++++++++"
        cat $crontabs
        echo "-----------------------------"
    fi

    echo "Ensuring the crontab directory exists remotely on $host"
    remote_dir=$(getconf.py deploy-crontab-dir $role deploy)
    $ssh $user@$host mkdir -p $remote_dir
    echo "Copying the crontab file to $host"
    $rsync -avz $crontabs $user@$host:$remote_dir/crontab
    echo "Refreshing user $user's crontab on $host"
    $ssh $user@$host crontab $remote_dir/crontab
}

function do_config {
    role=$1
    user=$2
    host=$3
    config=$4

    cfgdir_remote=$(getconf.py deploy-config-dir $role deploy)
    echo "Ensuring the config directory exists remotely on $host"
    $ssh $user@$host mkdir -p $cfgdir_remote
    echo "Copying the config file to $host"
    $rsync -avz $config $user@$host:$cfgdir_remote/

    # Check for remote system having configtools installed
    res=$($ssh $user@$host 'which getconf.py > /dev/null 2>&1 && echo "installed"')
    if [ "$res" != "installed" ] ;then
        echo "$PROG: WARNING: configtools does not appear to be installed on $host"
    fi
}

function deploy_host {
    role=$1
    host=$(getconf.py host $role)

    user=$(getconf.py user $role deploy)
    tasks=$(getconf.py -l tasks $role)

    rolescripts=""
    if [ ! -z "$tasks" ] ;then
        # general scripts for all roles
        rolescripts=$(getconf.py -l scripts deploy)
        # role specific scripts
        rolescripts="$rolescripts $(getconf.py -l scripts $role)"
    fi
    # scripts and libs are concatenated and passed as arguments
    scripts="$rolescripts"
    libs=""
    config=$dir/$(getconf.py config-dir deploy)/run.conf
    # Don't pass crontab entries as arguments: newlines are mangled.
    # Use a file instead.
    crontabs=$TMP/crontab.$host
    mailto=$(getconf.py mailto deploy)
    echo "MAILTO=\"$mailto\"" > $crontabs
    mailfrom=$(getconf.py mailfrom $role deploy)
    echo "MAILFROM=\"$mailfrom\"" >> $crontabs
    echo "CONFIG=\"$(getconf.py deploy-config-dir $role deploy)/run.conf\"" >> $crontabs
    for task in $tasks ;do
        # avoid introducing unnecessary spaces: the -z below won't work.
        if [ -z "$scripts" ] ;then
            scripts="$(getconf.py -l scripts $task)"
        else
            scripts="$scripts $(getconf.py -l scripts $task)"
        fi

        if [ -z "$libs" ] ;then
            libs="$(getconf.py -l libs $task)"
        else
            libs="$libs $(getconf.py -l libs $task)"
        fi

        getconf.py -l crontab $task >> $crontabs
    done

    if [ ! -z "$scripts" ] ;then
        do_scripts $role $user $host $scripts
    fi
    if [ ! -z "$libs" ] ;then
        do_libs $role $user $host $libs
    fi
    if [ -s "$crontabs" ] ;then
        do_crontab $role $user $host "$crontabs"
    fi
    if [ -s "$config" ] ;then
        do_config $role $user $host "$config"
    fi
}

roles=$(getconf.py -l roles deploy)
for role in $roles ;do
    deploy_host $role
done

exit 0
