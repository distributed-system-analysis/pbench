#! /bin/bash

# Usage: pbench-verify-backup-tarballs <primary> <backup> <pbench> [ <pbench-local> ]

# Method: in each directory, concatenate all the .md5 files and
# pass them to md5sum for verification (eliminate DUPLICATEs for now: they
# are handled incorrectly by pbench-{move,copy}-results and that needs to
# be fixed).

# For each directory, select all the files that don't pass the md5 check
# and report them. TBD: Report also whether the two sets match between directories
# (IOW, if they were corrupted to begin with).

# Then compare the rest: there might be a few more files in the primary dir
# than in the backup dir, if any additional tarballs have been sent and the
# backup has not dealt with them yet. That is reported but it's only temporary
# so it's OK.

# Any other discrepancy is flagged and reported.

# The second argument is specific to this script: it's the backup
# directory.  The first and the (optional) third arg are consumed by
# pbench-base.sh.  This is the same convention that is used by
# pbench-backup-tarballs.

# load common things
opts=$SHELLOPTS
case $opts in
    *xtrace*)
        dir=$(dirname $(which $0))
        PROG=$(basename $(which $0))
        ;;
    *)
        dir=$(dirname $0)
        PROG=$(basename $0)
        ;;
esac

# TOP, ARCHIVE, BDIR, TMP, LOGSDIR defined in pbench-base.sh
. $dir/pbench-base.sh

primary=$ARCHIVE
backup=$BDIR

echo $CONFIG
echo $mail_recipients
# make sure pbench_base has already defined mail_recipients
# and exit if not, otherwise we'll do a lot of work for nothing.
if [ -z "$mail_recipients" ] ;then
    exit 2
fi

# work files
listp=$TMP/$PROG/primary.$$
listb=$TMP/$PROG/backup.$$
tmp=$TMP/$PROG/tmp.$$
ponly=$TMP/$PROG/primary.only
bonly=$TMP/$PROG/backup.only
report=$TMP/$PROG/report.$$
quarantine=$TMP/$PROG/quarantine.$$
restore=$TMP/$PROG/restore.$$
backuplist=$TMP/$PROG/backuplist.$$
archivelist=$TMP/$PROG/archivelist.$$

# make sure the directory exists
mkdir -p $TMP/$PROG

controllers=$TMP/$PROG/controllers.$$
trap "rm -f $controllers $listp $listp.failed $listb $listb.failed $tmp $ponly $bonly $report $quarantine.list $restore.list $listp.ok $listb.ok $backuplist.ok $archivelist.ok; rmdir $TMP/$PROG" EXIT INT QUIT

> $listp
if cd $primary ;then
    find . -maxdepth 1 -type d | grep -v '^\.$' > $controllers
    while read d ;do
        pushd $d > /dev/null || exit 5
        files=$(ls | grep md5 | grep -v DUPLICATE__NAME)
        if [ ! -z "${files}" ] ;then
            md5sum -c ${files} | sed 's;^;'$d/';'
        fi 
        popd >/dev/null
    done < $controllers | sort > $listp
fi

# backup location
> $listb
if cd $backup ;then
    find . -maxdepth 1 -type d | grep -v '^\.$' > $controllers
    while read d ;do
        pushd $d > /dev/null || exit 6
        files=$(ls | grep md5 | grep -v DUPLICATE__NAME)
        if [ ! -z "${files}" ] ;then
            md5sum -c ${files} | sed 's;^;'$d/';'
        fi 
        popd >/dev/null
    done < $controllers | sort > $listb
fi

# make sure the directorie exist
mkdir -p $primary/QUARANTINE

# function to calculate prefix name
calculate_prefixname () {
    tarname=${1##*/}
    prefixname=${tarname%%.*}
    despath=`echo ${1%/*} | sed 's;^\.;'$2';'`
    prefixpath=`echo $prefixname | sed 's;^;'.prefix/prefix.';'`
    prefix="$despath/$prefixpath"
}

# Restore from archive the tarballs in backup, that fail the MD5 check
# XXX - for now backup supposed to be in the same server as archive
grep FAIL $listb > $listb.failed
cat $listb.failed | sed -e "s/: FAILED$//" > $quarantine.list
grep OK $listp > $listp.ok
cat $listp.ok | sed -e "s/: OK$//" > $archivelist.ok

IFS=$'\n'
for i in `cat $quarantine.list`;do
    if [ -f $i ];then
        grep -q $i $archivelist.ok
        if [ $? -eq 0 ];then
            archivetar=`echo $i | sed 's;^\.;'$primary';'`
            backupdir=`echo ${i%/*} | sed 's;^\.;'$backup';'`
            archivedir=`echo ${i%/*} | sed 's;^\.;'$primary';'`
            cp $archivetar* $backupdir
            calculate_prefixname $i $primary
            if [ -f $archivedir/.prefix/prefix.$prefixname ];then
                cp $archivedir/.prefix/prefix.$prefixname $backupdir/.prefix
            fi
            (echo "RESTORE FROM ARCHIVE"; echo $i | sed 's;^\.;'$primary';') >> $report
        else
            if [ -f $i ];then
                rm $i*
                calculate_prefixname $i $backup
                if [ -f $i ];then
                    rm $prefix
                fi
            fi
        fi

    fi
done

# construct the report
> $report
if [ -s $quarantine.list ] ;then
    (echo "* In $backup: The calculated MD5 of the following entries failed to match the stored MD5, 
    so restore them from archive"; cat $quarantine.list | sed 's;^\.;'$backup';'; echo) >> $report
fi

# Restore from backup the tarballs in archive, that fail the MD5 check
grep FAIL $listp > $listp.failed
cat $listp.failed | sed -e "s/: FAILED$//" > $restore.list
grep OK $listb > $listb.ok
cat $listb.ok | sed -e "s/: OK$//" > $backuplist.ok

if [ -s $restore.list ];then
    (echo "* In $primary: The calculated MD5 of the following entries failed to match the stored MD5,
    so trying to restore from backup, otherwise moving to quarantine"; cat $restore.list | sed 's;^\.;'$primary';';) >> $report
fi

IFS=$'\n'
for i in `cat $restore.list`;do
    if [ -f $i ];then
        grep -q $i $backuplist.ok
        if [ $? -eq 0 ];then
            archivedir=`echo ${i%/*} | sed 's;^\.;'$primary';'`
            cp $i* $archivedir
            calculate_prefixname $i $backup
            if [ -f .prefix/prefix.$prefixname ];then
                cp .prefix/prefix.$prefixname $archivedir/.prefix
            fi
            (echo "RESTORE"; echo $i | sed 's;^\.;'$primary';') >> $report
        fi
        else
            mv "`echo $i | sed 's;^\.;'$primary';'`" $primary/QUARANTINE
            mv "`echo $i.md5 | sed 's;^\.;'$primary';'`" $primary/QUARANTINE
            calculate_prefixname $i $primary
            if [ -f $prefix ];then
                mv $prefix $primary/QUARANTINE
            fi
            (echo "QUARANTINE"; echo $i | sed 's;^\.;'$primary';') >> $report
    fi
done

# construct the report
let ret=0
grep FAIL $listp > $listp.failed
if [ -s $listp.failed ] ;then
    (echo "* In $primary: The calculated MD5 of the following entries failed to match the stored MD5"
     cat $listp.failed | sed 's;^\.;'$primary';'; echo) >> $report
elif [ -s $listp -a ! -s $listp.failed ] ;then
    :
else
    echo "Primary list is empty - is $primary mounted?" >> $report
    ret=7
fi

grep FAIL $listb > $listb.failed
if [ -s $listb.failed ] ;then
    (echo "* In $backup: The calculated MD5 of the following entries failed to match the stored MD5"
     cat $listb.failed | sed 's;^\.;'$backup';'; echo) >> $report
elif [ -s $listb -a ! -s $listb.failed ] ;then
    :
else
    echo "Backup list is empty - is $backup mounted?" >> $report
    ret=8
fi

# TBD: compare the two lists of FAILED files and report appropriately.

# Check for discrepancies but only if both files are non-empty: if for whatever reason,
# one of the mount points is not available, we will get the underlying directory which
# will be empty.

if [[ $ret == 0 ]] ;then
    comm -13 $listp $listb > $bonly
    comm -23 $listp $listb > $ponly

    if [ -s $ponly ] ;then
        (echo "* Files that exist only in primary directory - extra files in this list are probably OK: they just have not been backed up yet.";
         cat $ponly | sed 's;^\.;'$primary';') >> $report
    fi

    if [ -s $bonly ] ;then
        (echo "* Files that exist only in backup directory - this should not happen.";
         cat $bonly | sed 's;^\.;'$backup';') >> $report
    fi
fi

# send it
subj="$PROG.$TS($PBENCH_ENV)"
mailx -s "$subj" $mail_recipients < $report

exit $ret
