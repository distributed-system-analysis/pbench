#! /bin/bash

# This script uses the pbench-server.cfg file just installed, to
# figure out what tasks to add to the pbench crontab on this
# machine. After creating the crontab, it does *not* activate it: that
# is a separate manual step.

usage="Usage: pbench-activate-create-crontab <to-path> <crontab-path>"

to=$1
crontabpath=$2

# crontab
mkdir -p $crontabpath
chown pbench.pbench $crontabpath
chmod 755 $crontabpath
crontab=$crontabpath/crontab

export CONFIG=$to/pbench-server.cfg
if [ ! -f $CONFIG ]
then
    echo "Config file $CONFIG does not exist"
    exit 2
fi

roles=$(getconf.py -l roles deploy)
hostname=$(hostname -f)

echo "CONFIG=$CONFIG" > $crontab

for role in $roles ;do
    host=$(getconf.py host $role)
    if [ "$host" != "$hostname" ] ;then
        continue
    fi
    mailfrom=$(getconf.py mailfrom $role deploy)
    mailto=$(getconf.py mailto $role deploy)
    grep -q MAILTO $crontab ||
        echo "MAILTO=$mailto" >> $crontab
    grep -q MAILFROM $crontab ||
        echo "MAILFROM=$mailfrom" >> $crontab
    tasks=$(getconf.py -l tasks $role)
    for task in $tasks ;do
        crontabline=$(getconf.py crontab $task)
        echo "$crontabline" >> $crontab
    done
done

chown pbench.pbench $crontab
chmod 644 $crontab

# create the lock directory that the cron entries will use
mkdir -p /home/pbench/locks
chown pbench.pbench /home/pbench/locks

exit 0


