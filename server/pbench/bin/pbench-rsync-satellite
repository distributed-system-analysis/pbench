#! /bin/bash

# load common things
opts=$SHELLOPTS
case $opts in
    *xtrace*)
        dir=$(dirname $(which $0))
        PROG=$(basename $(which $0))
        ;;
    *)
        dir=$(dirname $0)
        PROG=$(basename $0)
        ;;
esac
case $# in
    3)
        :
        ;;
    *)
        echo "Usage: $PROG <prefix> <remotehost> <remotearchive>"
        exit 1
        ;;
esac

prefix=$1
remotehost=$2
remotearchive=$3

shift 3

# TOP, TMP, LOGSDIR, ARCHIVE, TS are all defined in pbench-base.sh
. $dir/pbench-base.sh
if [[ -z "$mail_recipients" ]] ;then
    echo "$PROG: mail_recipients is not defined"
    exit -1
fi
files=$(if cd $remotearchive;then find . -path '*/TO-SYNC/*.tar.xz' -printf '%P\n' ;else exit 1 ;fi)
rc=$?
if [[ $rc != 0 ]] ;then
    echo "$PROG: ssh $remotehost \"cd $remotearchive; ls\" failed."
    exit -2
fi

# check if we are running under the unit test regime
if [ "${_PBENCH_SERVER_TEST}" = "1" ] ;then
    # make the names reproducible for unit tests
    tmp=$TMP/$PROG.XXXXX
    status=status.XXXXX
    # don't submit any tarballs for further processing
    dryrun=--dry-run
else
    tmp=$TMP/$PROG.$$
    status=status.$$
    dryrun=
fi

hosts="$(for host in $files;do echo ${host%%/*};done | sort -u )"

trap "rm -rf $tmp" EXIT

mkdir -p $tmp

exclude=$tmp/exclude
echo $EXCLUDE_DIRS | tr ' ' '\n' > $exclude

#log_init $(basename $0)
logdir=$LOGSDIR/$(basename $0)/$prefix/$TS
mkdir -p $logdir
rc=$?
if [[ $rc != 0 ]] ;then
    echo Failed: mkdir -p $logdir
    exit -2
fi

let start_time=$(timestamp-seconds-since-epoch)
echo "$TS: start - $(timestamp)"
for host in $hosts ;do
    localdir=$ARCHIVE/$host
    pushd $localdir >/dev/null || exit 2
    if [ ! -d $logdir/$host ] ;then
        mkdir -p $logdir/$host
    fi
    echo "rsync -av --exclude-from=$exclude --log-file=$logdir/$host/rsync.log . $remotehost:$remotearchive/$prefix::$host/"
    rsync -av --exclude-from=$exclude --log-file=$logdir/$host/rsync.log . $remotehost:$remotearchive/$prefix::$host/
    rc=$?
    if [[ $rc != 0 ]] ;then
        echo "FAILED:    rsync -av $remotehost:$remotearchive/$host/ ."
    fi

    # change the state directory of the symlinks which are successfully synced.
    mv TO-SYNC/* SYNCED
    status=$?
    if [[ $status != 0 ]] ;then
        echo "FAILED:    mv $logdir/$host/TO-SYNC SYNCED"
    fi
    rsync_log=$logdir/$host/rsync.log
    popd > /dev/null
done

let end_time=$(timestamp-seconds-since-epoch)
let duration=end_time-start_time
echo "$TS: end - $(timestamp)"
echo "$TS: duration (secs): $duration"
