#! /bin/bash
# -*- mode: shell-script -*-

# This script will run only on production environment as unpacking to incoming 
# is relatively slower than unpacking tarballs in a tmp directory and then
# move it to incoming.

# load common things
opts=$SHELLOPTS
case $opts in
    *xtrace*)
        dir=$(dirname $(which $0))
        PROG=$(basename $(which $0))
        ;;
    *)
        dir=$(dirname $0)
        PROG=$(basename $0)
        ;;
esac

UNPACK_PATH=$1

# TOP, ARCHIVE, INCOMING, RESULTS are all defined by the base file
. $dir/pbench-base.sh
. $dir/job_pool.sh
###########################################################################

if [[ -z "$mail_recipients" ]] ;then
    echo "$PROG: mail_recipients is not defined"
    exit 1
fi

log_init $(basename $0)
logdir=$LOGSDIR/$(basename $0)/$prefix/$TS
mkdir -p $logdir
rc=$?
if [[ $rc != 0 ]] ;then
    echo Failed: mkdir -p $logdir
    exit 2
fi

# make sure only one copy is running.
# Use 'flock -n $LOCKFILE /home/pbench/bin/pbench-move-unpacked' in the
# crontab to ensure that only one copy is running. The script itself
# does not use any locking.

# the link source and destination for this script
linksrc=UNPACKED
linkdest=MOVED-UNPACKED

echo $TS

# get the list of files we'll be operating on - sort them by size
list=$UNPACK_PATH/pbench-unpack-tarballs.$$
mail_content=$UNPACK_PATH/mail_content.log
find $ARCHIVE/*/$linksrc -name '*.tar.xz' -printf "%s\t%p\n" 2>/dev/null | grep -v DUPLICATE | sed 's/\/'$linksrc'//' | sort -n > $list

trap 'rm -f $list' EXIT INT QUIT

typeset -i ntb=0
typeset -i ntotal=0
typeset -i nerrs=0
typeset -i ndups=0

function process_tarball {
    result=$1
    size=$2
    ntotal=$ntotal+1

    link=$(readlink -e $result)
    if [ ! -f "$link" ] ;then
        echo "$TS: $link does not exist" >&4 | tee -a $mail_content
        nerrs=$nerrs+1
        return 1
    fi
    resultname=$(basename $result)
    resultname=${resultname%.tar.xz}
    hostname=$(basename $(dirname $link))

    # make sure that all the relevant state directories exist
    mk_dirs $hostname
    # ... and a couple of other necessities.
    if [[ $? -ne 0 ]] ;then
        echo "$TS: Creation of $hostname processing directories failed: code $status" >&4 | tee -a $mail_content
        nerrs=$nerrs+1
        return 1
    fi
    mkdir -p $INCOMING/$hostname
    if [[ $? -ne 0 ]] ;then
        echo "$TS: Creation of $INCOMING/$hostname failed: code $status" >&4 | tee -a $mail_content
        nerrs=$nerrs+1
        return 1
    fi
    
    # XXXX - for now, if it's a duplicate name, just punt and avoid producing the error - the full
    # solution will involve renaming the unpacked directory appropriately.
    if [ ${resultname%%.*} == "DUPLICATE__NAME" ] ;then
        ndups=$ndups+1
        return 1
    fi

    incoming=$INCOMING/$hostname/$resultname

    let start_time=$(date +%s)

    # copy the tarball contents to INCOMING - remove the link on failure
    cp -R $UNPACK_PATH/$hostname/$resultname $incoming.copy
    status=$?
    if [[ $status -ne 0 ]] ;then
        echo "$TS: Cannot copy $UNPACK_PATH/$hostname/$resultname to $incoming.copy: code $status" >&4 | tee -a $mail_content
        nerrs=$nerrs+1
        return 1
    fi

    # remove the symlink from incoming
    rm $incoming
    status=$?
    if [[ $status -ne 0 ]] ;then
	rm $RESULTS/$hostname/$prefix$resultname
	ln -s $incoming.copy $RESULTS/$hostname/$prefix$resultname
        echo "$TS: Created symlink of $incoming.copy in $RESULTS: code $status" >&4 | tee -a $mail_content
	nerrs=$nerrs+1
	return 1
    fi

    # rename the copied file to its original name
    mv $incoming.copy $incoming
    status=$?
    if [[ $status -ne 0 ]] ;then
	rm $RESULTS/$hostname/$prefix$resultname
        ln -s $incoming.copy $RESULTS/$hostname/$prefix$resultname
        echo "$TS: Cannot rename $incoming.copy to $incoming: code $status" >&4 | tee -a $mail_content
        nerrs=$nerrs+1
        return 1
    fi

    # remove the unpacked tarballs from UNPACK_PATH directory
    rm -R $UNPACK_PATH/$hostname/$resultname
    status=$?
    if [[ $status -ne 0 ]] ;then
        echo "$TS: Cannot remove $UNPACK_PATH/$hostname/$resultname: code $status" >&4 | tee -a $mail_content
        nerrs=$nerrs+1
	return 1
    fi

    # move the link to $linkdest directory
    mv $ARCHIVE/$hostname/$linksrc/$resultname.tar.xz $ARCHIVE/$hostname/$linkdest/$resultname.tar.xz
    status=$?
    if [[ $status -ne 0 ]] ;then
        echo "$TS: Cannot move $ARCHIVE/$hostname/$resultname from $linksrc to $linkdest: code $status" >&4 | tee -a $mail_content
        rm $RESULTS/$hostname/$prefix$resultname
        nerrs=$nerrs+1
        return 1
    fi
    let end_time=$(date +%s)
    let duration=end_time-start_time
    # log the success
    echo "$TS: $hostname/$resultname: success - elapsed time (secs): $duration - size (bytes): $size"
}

job_pool_init 12 0

while read size result ;do
    # add a job to the pool for the item
    job_pool_run process_tarball $result $size
    ntb=$ntb+1
done < $list

# Wait until all jobs complete
job_pool_wait

# Shut down the job pool
job_pool_shutdown

echo "$TS: Processed $ntb tarballs"

log_finish

if [[ $nerrs -gt 0 ]]; then
    subj="$PROG.$TS($PBENCH_ENV) - w/ $nerrs errors"
    # don't send mail when running unittests
    if [[ "$_PBENCH_SERVER_TEST" != 1 ]] ;then
        echo "Processed $ntotal result tar balls, $ntb successfully, with $nerrs errors and $ndups duplicates" | mailx -s "$subj" $mail_recipients < $mail_content
    fi
fi

exit 0
