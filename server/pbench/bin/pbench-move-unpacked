#! /bin/bash
# -*- mode: shell-script -*-

# This script will run only on production environment as unpacking to incoming 
# is relatively slower than unpacking tarballs in a tmp directory and then
# move it to incoming.

# load common things
opts=$SHELLOPTS
case $opts in
    *xtrace*)
        dir=$(dirname $(which $0))
        PROG=$(basename $(which $0))
        ;;
    *)
        dir=$(dirname $0)
        PROG=$(basename $0)
        ;;
esac

UNPACK_PATH=$1

# TOP, ARCHIVE, INCOMING, RESULTS are all defined by the base file
. $dir/pbench-base.sh
. $dir/job_pool.sh
###########################################################################

log_init $(basename $0) $LOGSDIR/$(basename $0)

# make sure only one copy is running.
# Use 'flock -n $LOCKFILE /home/pbench/bin/pbench-move-unpacked' in the
# crontab to ensure that only one copy is running. The script itself
# does not use any locking.

# the link source and destination for this script
linksrc=UNPACKED
linkdest=MOVED-UNPACKED

echo $TS

# get the list of files we'll be operating on - sort them by size
tmp=$TMP/$PROG.$$
list=$tmp/$PROG.list

mkdir -p $tmp
mail_content=$tmp/mail_content.log
index_content=$tmp/index_mail_contents

trap 'rm -rf $tmp' EXIT INT QUIT

# find command will not generate any result if the linksrc is empty, and because of that du will not get any result 
# to calculate the size. In that scenario du generates the size of the current directory as output, to handle
# that exclude the current directory.
find $ARCHIVE/*/$linksrc -type l -name '*.tar.xz' -printf "%l\n" 2>/dev/null | grep -v DUPLICATE | xargs du -b --exclude "." 2>/dev/null | sort -n > $list

typeset -i ntb=0

# Initialize mail content
> $mail_content
> $index_content

function process_tarball {
    result=$1
    size=$2

    link=$(readlink -e $result)
    if [ ! -f "$link" ] ;then
        echo "$TS: $link does not exist" | tee -a $mail_content >&4 
        return 1
    fi
    resultname=$(basename $result)
    resultname=${resultname%.tar.xz}
    hostname=$(basename $(dirname $link))

    basedir=$(dirname $link)
    # pbench-dispatch has already moved it to the .prefix subdir
    prefixfile=$basedir/.prefix/prefix.$resultname
    if [ -f $prefixfile ] ;then
        # add the slash to make both cases uniform in what follows
        prefix=$(cat $prefixfile)/
    else
        prefix=""
    fi

    # make sure that all the relevant state directories exist
    mk_dirs $hostname
    # ... and a couple of other necessities.
    if [[ $? -ne 0 ]] ;then
        echo "$TS: Creation of $hostname processing directories failed: code $status" | tee -a $mail_content >&4 
        return 1
    fi
    mkdir -p $INCOMING/$hostname
    if [[ $? -ne 0 ]] ;then
        echo "$TS: Creation of $INCOMING/$hostname failed: code $status" | tee -a $mail_content >&4 
        return 1
    fi
    
    # XXXX - for now, if it's a duplicate name, just punt and avoid producing the error - the full
    # solution will involve renaming the unpacked directory appropriately.
    if [ ${resultname%%.*} == "DUPLICATE__NAME" ] ;then
        return 2
    fi

    incoming=$INCOMING/$hostname/$resultname

    let start_time=$(date +%s)

    # log the beginning process of tarball
    echo "Starting: $TS: $hostname/$resultname: size (bytes): $size"

    # copy the tarball contents to INCOMING - remove the link on failure
    cp -R $UNPACK_PATH/$hostname/$resultname $incoming.copy
    status=$?
    if [[ $status -ne 0 ]] ;then
        echo "$TS: Cannot copy $UNPACK_PATH/$hostname/$resultname to $incoming.copy: code $status" | tee -a $mail_content >&4 
        return 1
    fi

    # If $incoming exists, it can only be a directory or a symlink.
    # If it does not exist, then we go on; but that's probably a bug
    # in pbench-unpack-tarballs.
    if [ -d "$incoming" ] ;then
	# Probably left over from a previous unsuccessful pbench-move-unpacked.
	# In general, this should be a symlink, *NOT* a directory. We remove it
	# forcibly, but that's OK, since $incoming.copy was successfully created
	# above (otherwise we'd never get here).
	rm -rf "$incoming"
	status=$?
    elif [ -L "$incoming" ] ;then
        # this is the standard case
	# remove the symlink from incoming
	rm $incoming
	status=$?
    elif [ -e "$incoming" ] ;then
	# impossible!
	echo "$TS: Cannot happen - $incoming is neither a dir nor a symlink!" | tee -a $mail_content >&4 
	return 1
    fi
    if [[ $status -ne 0 ]] ;then
	rm $RESULTS/$hostname/$prefix$resultname
        if [ -d $incoming.copy ] ;then
	    ln -s $incoming.copy $RESULTS/$hostname/$prefix$resultname
            echo "$TS: Created symlink of $incoming.copy in $RESULTS: code $status" | tee -a $mail_content >&4
        else
            (echo "$TS: $incoming could not be removed for some reason: code $status";
             ls $incoming; echo "----") | tee -a $mail_content >&4
        fi
	return 1
    fi

    # Rename the copied file to its original name.
    # One way or another, $incoming is gone at this point.
    mv $incoming.copy $incoming
    status=$?
    if [[ $status -ne 0 ]] ;then
        # move failed, $incoming.copy still exists
        rm -f $RESULTS/$hostname/$prefix$resultname
        ln -sf $incoming.copy $RESULTS/$hostname/$prefix$resultname
        echo "$TS: Cannot rename $incoming.copy to $incoming: code $status" | tee -a $mail_content >&4 
        return 1
    else
	# fix up the results link: this is usually not necessary
	# but if $incoming was a dir (see above), then the link
	# would point to $incoming.copy.
        # Remove the link first (issue #771).
        rm -f $RESULTS/$hostname/$prefix$resultname
        ln -sf $incoming $RESULTS/$hostname/$prefix$resultname
    fi
        

    # remove the unpacked tarballs from UNPACK_PATH directory
    rm -R $UNPACK_PATH/$hostname/$resultname
    status=$?
    if [[ $status -ne 0 ]] ;then
        echo "$TS: Cannot remove $UNPACK_PATH/$hostname/$resultname: code $status" | tee -a $mail_content >&4 
	return 1
    fi

    # move the link to $linkdest directory
    mv $ARCHIVE/$hostname/$linksrc/$resultname.tar.xz $ARCHIVE/$hostname/$linkdest/$resultname.tar.xz
    status=$?
    if [[ $status -ne 0 ]] ;then
        echo "$TS: Cannot move $ARCHIVE/$hostname/$resultname from $linksrc to $linkdest: code $status" | tee -a $mail_content >&4 
        rm $RESULTS/$hostname/$prefix$resultname
        return 1
    fi
    let end_time=$(date +%s)
    let duration=end_time-start_time
    # log the success
    echo "$TS: $hostname/$resultname: success - elapsed time (secs): $duration - size (bytes): $size"
}

# get the concurrency factor from the config file if present - otherwise set it to 1
njobs=$(getconf.py njobs pbench-move-unpacked)
if [[ -z $njobs ]] ;then
    njobs=1
fi

# If there is nothing to be done, exit now: do not create the job
# pool.

# This is a workaround for a job pool problem: it seems that a
# job termination message gets lost, so occasionally the script hangs with
# a job pool process trying to read the next job from the job pool
# queue, but there *is* no next job. This seems to happen *only* when
# there is no work to be done.

if [[ ! -s $list ]] ;then
    echo "$TS: Processed 0 tarballs"
    log_finish
    exit 0
fi

# echo job pool commands
job_pool_echo_command=1

job_pool_init $njobs 0

while read size result ;do
    # add a job to the pool for the item
    job_pool_run process_tarball $result $size
    ntb=$ntb+1
done < $list

# There is no need to call job_pool_wait: it only needs to be called
# when we want to wait for the current batch to finish and then start
# another batch.

# Shut down the job pool
job_pool_shutdown

echo "$TS: Processed $ntb tarballs"

log_finish

if [[ -s $mail_content ]]; then
    subj="$PROG.$TS($PBENCH_ENV) - w/ $nerrs errors"
    # don't send mail when running unittests
    if [[ "$_PBENCH_SERVER_TEST" != 1 ]] ;then
        cat << EOF > $index_content
$subj
Processed $ntotal result tar balls, $ntb successfully, with $nerrs errors and $ndups duplicates

EOF
        cat $mail_content >> $index_content
        pbench-report-status --name $PROG --timestamp $TS --type status $index_content
    fi
fi

exit 0
