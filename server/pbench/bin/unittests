#!/bin/bash

unset PATH
unset CONFIG

# Set an initial standard path.  getconf.py gets installed in /usr/bin
# by the RPM, but it gets installed in /usr/local/bin by `pip install'
# under Travis CI, so we need both.
export PATH=/usr/local/bin:/usr/bin:/bin

export LANG=C
export LC_ALL=C

_tdir=$(dirname $(readlink -f $0))
_gitdir=$(dirname $(dirname $(dirname $_tdir)))
_tlib=${_tdir}/../lib

_testroot=/var/tmp/pbench-test-server
mkdir -p $_testroot
if [[ ! -d $_testroot ]]; then
    echo "ERROR: failed to create test root directory, \"$_testroot\"" >&2
    exit 1
fi
rm -rf $_testroot/*
if [[ $? -gt 0 ]]; then
    echo "ERROR: failed to empty test root directory, \"$_testroot\"" >&2
    exit 1
fi

_testout=$_testroot/output.txt
_testactout=$_testroot/actoutput.txt
_testactlog=$_testroot/test-activation-execution.log
export _testlog=$_testroot/test-execution.log
export _testcurlpayload=$_testroot/test-curl-payload.log
_testdir=$_testroot/pbench
_testdir_local=$_testroot/pbench-local
_testtmp=$_testroot/tmp
_testcfg=$_testroot/cfg
_testhtml=$_testroot/var-www-html

# Fixed timestamp output
export _PBENCH_SERVER_TEST=1

# execution environment
_testopt=$_testroot/opt/pbench-server

export TMPDIR=$_testtmp
export TZ="UTC"

function _run {
    tname=$1
    shift
    echo "+++ Running $tname" >> $_testout
    $tname $@ >> $_testout 2>&1
    echo "--- Finished $tname (status=$?)" >> $_testout
}

function _run_index {
    args="${@}"
    echo "+++ Running indexing for $test" >> $_testout
    cmd="PYTHONPATH=${_tlib}:$PYTHONPATH $_tdir/index-pbench -U -C ${_testopt}/lib/config/pbench-index.cfg -E $_testdir/errors-json-unittests.json ${args} $(readlink -f $_testdir/*.tar.xz)"
    if which python3 > /dev/null 2>&1 ;then
	eval $cmd >> $_testout 2>&1
    elif which scl > /dev/null 2>&1 ;then
        echo "$cmd" | scl enable rh-python36 - >> $_testout 2>&1
    else
	echo "ERROR: unknown Python 3 environment for unit tests" >&2
	exit 1
    fi
    echo "--- Finished indexing for $test (status=$?)" >> $_testout
    sed -i '/File "'$(echo ${_gitdir} | sed 's;/;\\/;g')'/s;'${_gitdir}'/server/;/home/user/repo/pbench/server/;' $_testout
}

function _run_activate {
    # Testing the server activate script, which is used for every other
    # unit test as well is just a matter of emitting the resulting
    # crontab along side the rest of the environment state provided by
    # the unit test framework.
    echo "+++ Verifying server activation" >> $_testout
    cat $_testactout >> $_testout
    echo "++++ ${_testopt}/lib/crontab/crontab" >> $_testout
    cat ${_testopt}/lib/crontab/crontab >> $_testout
    rc=$?
    echo "---- ${_testopt}/lib/crontab/crontab" >> $_testout
    if [ -s $_testactlog ]; then
        echo "++++ $(basename $_testactlog) file contents" >> $_testout
        cat $_testactlog >> $_testout 2>&1
        echo "---- $(basename $_testactlog) file contents" >> $_testout
    fi
    echo "--- Finished verifying server activation (status=$rc)" >> $_testout
}

function _run_allscripts {
    if [ -z "${1}" ]; then
        arg0="${_testdir}/public_html/incoming"
    else
        arg0="${1}"
    fi

    # These three pull in new tar balls from move-results and remote
    # satellite pbench servers feeding them into the dispatch loop.
    _run pbench-server-prep-shim-001
    _run pbench-server-prep-shim-002
    _run pbench-sync-satellite UT remote.example.com /pbench/archive/fs-version-001
    # These next five are related and would flow in this order
    _run pbench-dispatch
    _run pbench-unpack-tarballs $arg0
    _run pbench-move-unpacked $arg0
    _run pbench-copy-sosreports
    _run pbench-index
    # These four are independent, running periodically to accomplish
    # their specific tasks.
    _run pbench-clean-up-dangling-results-links
    _run pbench-edit-prefixes
    _run pbench-backup-tarballs
    _run pbench-verify-backup-tarballs
}

function _local_find {
    # We create our own local find command so that we don't emit the size
    # information for directories.  This is due to the fact that on different
    # file systems empty directories, or directories with small numbers of
    # files, can be handled differently.  E.g. on Ext4 directories have a
    # minimum size of 4096, while on XFS only after a certain size do they
    # grow to multiples of 4096 [1].  We only care about the sizes of files and
    # links in our tests.
    #
    # [1] https://superuser.com/questions/585844/why-directories-size-are-different-in-ls-l-output-on-xfs-file-system
    find ${1} ! -name $(basename ${1}) -type d -printf '%M          - %P\n' , \( ! -type d ! -type l -printf '%M %10s %P\n' \) , -type l -printf '%M %10s %P -> %l\n' | sort -k 3
}

function _save_tree {
    # Save state of the tree
    if [ -d ${_testhtml} ] ;then
        echo "+++ var/www/html tree state (${_testhtml})" >> $_testout
        _local_find ${_testhtml} >> $_testout
        echo "--- var/www/html tree state" >> $_testout
    fi
    echo "+++ pbench tree state (${_testdir})" >> $_testout
    if [ -d ${_testdir} ] ;then
        _local_find ${_testdir} | sed 's;tmp/pbench-\([-a-zA-Z]*\)\.[0-9][0-9]*$;tmp/pbench-\1.NNNN;' >> $_testout
    fi
    echo "--- pbench tree state" >> $_testout
    if [ -d ${_testdir_local} ] ;then
        echo "+++ pbench-local tree state (${_testdir_local})" >> $_testout
        _local_find ${_testdir_local} | sed 's;tmp/pbench-\([-a-zA-Z]*\)\.[0-9][0-9]*$;tmp/pbench-\1.NNNN;' >> $_testout
        echo "--- pbench-local tree state" >> $_testout
    fi
}

function _audit_archive {
    echo "+++ Running unit test audit" >> $_testout
    pbench-audit-archive >> $_testout 2>&1
    echo "--- Finished unit test audit (status=$?)" >> $_testout
}

function _dump_logs {
    # Dump the state of any generated script logs
    echo "+++ pbench log file contents" >> $_testout
    if [ -d $_testdir/logs ] ;then
        find $_testdir/logs -type f | sort | \
            while read fname; do
                grep -HvF "\-\-should-n0t-ex1st--" $fname >> $_testout 2>&1
            done
    fi
    echo "--- pbench log file contents" >> $_testout

    if [ -s $_testlog ]; then
        echo "+++ $(basename $_testlog) file contents" >> $_testout
        sed 's;tmp/pbench-\([-a-zA-Z0-9]*\)\.[0-9][0-9]*/;tmp/pbench-\1.NNNN/;' $_testlog >> $_testout 2>&1
        echo "--- $(basename $_testlog) file contents" >> $_testout
    fi

    if [ -s $_testcurlpayload ]; then
        echo "+++ $(basename $_testcurlpayload) file contents" >> $_testout
        sed 's;tmp/pbench-\([-a-zA-Z]*\)\.[0-9][0-9]*/;tmp/pbench-\1.NNNN/;' $_testcurlpayload >> $_testout 2>&1
        echo "--- $(basename $_testcurlpayload) file contents" >> $_testout
    fi
}

function _verify_output {
    res=$1
    tname=$2
    diff -c $_tdir/gold/${tname}.txt $_testout
    if [[ $? -gt 0 ]]; then
        echo "FAIL - $tname"
        mv $_testout $_testroot/${tname}_output.txt
        res=1
    else
        echo "PASS - $tname"
        rm $_testout
    fi
    return $res
}

function _setup_state {
    res=0
    mkdir -p $_testopt/unittest-scripts/
    let res=res+$?
    cp $_tdir/test-bin/* $_testopt/unittest-scripts/
    let res=res+$?
    mkdir -p $_testopt/bin
    let res=res+$?
    cp $_tdir/{index-pbench,job_pool.sh,unittests,pbench*} $_testopt/bin
    let res=res+$?
    cp -r $_tdir/../lib $_testopt
    let res=res+$?
    mkdir -p $_testcfg
    let res=res+$?
    cp ${_tdir}/state/config/pbench-server.cfg $_testcfg/
    let res=res+$?
    cp ${_tdir}/state/config/pbench-index.cfg $_testcfg/
    let res=res+$?
    mkdir -p $_testhtml
    let res=res+$?
    if [ $res -ne 0 ]; then
	echo "ERROR: failed to properly setup the test environment root, \"$_testroot\"" >&2
	exit $res
    fi

    mkdir $_testdir $_testtmp
    if [[ $? -gt 0 ]]; then
	echo "ERROR: failed to create test pbench and tmp directories, \"$_testdir\" and/or \"$_testtmp\"" >&2
	exit 1
    fi
    if [[ ! -d $_testdir ]]; then
	echo "ERROR: test pbench directory does not exist, \"$_testdir\"" >&2
	exit 1
    fi
    if [[ ! -d $_testtmp ]]; then
	echo "ERROR: test tmp directory does not exist, \"$_testtmp\"" >&2
	exit 1
    fi

    # All the "real" scripts are found at $_testopt/bin, the mock scripts
    # are found in $_testopt/unittest-scripts.
    _orig_PATH=$PATH
    export PATH=$_testopt/unittest-scripts:$_testopt/bin:$PATH

    # Expected location of the final configuration files
    export CONFIG=$_testopt/lib/config/pbench-server.cfg
    # used by pbench-report-status
    export IDXCONFIG=$_testopt/lib/config/pbench-index.cfg

    # The activate invocations are supposed to work without CONFIG being set,
    # so they do *not* use the global CONFIG file that the rest of the tests
    # use.  We copy the server and index configuration files to a special
    # directory outside of the source tree to isolate any possible changes to
    # the original source.  The activate script copies it to its "final"
    # resting place.
    $_testopt/bin/pbench-server-config-activate ${_testcfg}/pbench-server.cfg >> $_testactout
    rc=$?
    if [ $rc == 0 ] ;then
        # This script uses the copied config file to do the rest.
        $_testopt/bin/pbench-server-activate ${CONFIG} >> $_testactout
        rc=$?
    fi

    # Up until this point, the activate scripts have been running using the
    # mock scripts, which record their output and execution in $_testlog.
    # But we don't want to have every unit test inherit activation log
    # output unconditionally.  So we move the logs to a special activation
    # log file to make sure we keep it around if we need it when debugging
    # or if a unit test might require it.
    mv $_testlog $_testactlog

    if [ $rc -ne 0 ]; then
        # Now check that we actually failed to activate the server AFTER we
        # have moved the log file to the expected activation log execution.
        # Note that we are NOT checking if the mv failed, but if the above
        # activation script(s) failed.
        echo "ERROR: failed to properly activate the server test environment root, \"$_testroot\"" >&2
        exit $rc
    fi

    # Add files for a given test
    _state_tb=$_tdir/state/${1}.tar.xz
    if [ -e ${_state_tb} ]; then
        (cd $_testroot; tar xpf $_state_tb)
        if [[ $? -gt 0 ]]; then
            echo "ERROR: unable to create pbench hierarchy for state $1" >&2
            exit 1
        fi
    fi

    # Run per-test state setup
    _state_setup=$_tdir/state/${1}.setup
    if [ -f ${_state_setup} ]; then
        (cd $_testroot; $_state_setup)
        if [[ $? -gt 0 ]]; then
            echo "ERROR: unable to run per-test state setup for $1" >&2
            exit 1
        fi
    fi
}

function _reset_state {
    # Run per-test state reset
    _state_reset=$_tdir/state/${1}.reset
    if [ -f ${_state_reset} ]; then
        (cd $_testroot; $_state_reset)
        if [[ $? -gt 0 ]]; then
            echo "ERROR: unable to run per-test state reset for $1" >&2
            exit 1
        fi
    fi

    export PATH=${_orig_PATH}
    unset CONFIG
    unset IDXCONFIG

    rm -f $_testactout
    rm -f $_testlog
    rm -f $_testactlog
    rm -f $_testcurlpayload
    rm -rf $_testdir
    if [[ -d $_testdir ]]; then
        echo "ERROR: unable to remove pbench hierarchy" >&2
        exit 1
    fi
    rm -rf ${_testdir_local}
    if [[ -d ${_testdir_local} ]]; then
        echo "ERROR: unable to remove pbench-local hierarchy" >&2
        exit 1
    fi
    rm -rf $_testtmp
    if [[ -d $_testtmp ]]; then
        echo "ERROR: unable to remove tmp hierarchy" >&2
        exit 1
    fi
    rm -rf $_testcfg
    if [[ -d $_testcfg ]]; then
        echo "ERROR: unable to remove cfg hierarchy" >&2
        exit 1
    fi
    rm -rf $_testhtml
    if [[ -d $_testhtml ]]; then
        echo "ERROR: unable to remove var-www-html hierarchy" >&2
        exit 1
    fi
    rm -rf $_testroot/opt
    if [[ -d $_testroot/opt ]]; then
        echo "ERROR: unable to remove opt hierarchy" >&2
        exit 1
    fi
}

declare -A cmds=(
    # check for no TOP directory
    [test-0]="_run_allscripts"
    # check for no LOGSDIR directory
    [test-0.1]="_run_allscripts"
    # check for no TMP directory
    [test-1]="_run_allscripts"
    # check for no ARCHIVE directory
    [test-2]="_run_allscripts"
    # check for no INCOMING directory
    [test-3]="_run_allscripts"
    # check for no RESULTS directory
    [test-4]="_run_allscripts"
    # check that it runs if everything is there
    [test-5]="_run_allscripts"
    [test-5.1]="_run_allscripts ${_testdir_local}/public_html/incoming"

    # backup tests
    # check for normal operation
    [test-6]="_run pbench-backup-tarballs"
    # check for no ARCHIVE directory
    [test-6.1]="_run pbench-backup-tarballs"
    # check for no ARCHIVE link resolution
    [test-6.2]="_run pbench-backup-tarballs"
    # checks that the dest directory is not bogus
    [test-6.3]="_run pbench-backup-tarballs"
    # real dest directory, no files needing backup - should succeed
    [test-6.4]="_run pbench-backup-tarballs"
    # real dest directory, all files needing backup - should succeed
    [test-6.5]="_run pbench-backup-tarballs"
    # real dest directory, no files needing backup - corrupted archive should not be copied
    [test-6.6]="_run pbench-backup-tarballs"

    # indexing tests
    [test-7.0]="_run_index -I"
    [test-7.1]="_run_index"
    [test-7.2]="_run_index"
    [test-7.3]="_run_index"
    [test-7.4]="_run_index"
    [test-7.5]="_run_index"
    [test-7.6]="_run_index"
    [test-7.7]="_run_index"
    # uperf tarball
    [test-7.8]="_run_index"
    # pbench-user-benchmark tarball
    [test-7.9]="_run_index"
    # uperf, fio results data and prometheus data
    # with float conversion
    [test-7.10]="_run_index"
    [test-7.11]="_run_index"
    [test-7.12]="_run_index"
    # The proc-vmstat results data is 7.13.
    [test-7.13]="_run_index"
    # The mpstat results data is in 7.14.
    [test-7.14]="_run_index"

    # activation test
    [test-8]="_run_activate"

    # pbench-verify-backup-tarballs
    # normal case
    [test-9.1]="_run pbench-verify-backup-tarballs"
    # more tarballs in archive
    [test-9.2]="_run pbench-verify-backup-tarballs"
    # more tarballs in backup
    [test-9.3]="_run pbench-verify-backup-tarballs"
    # bad md5 in orig
    [test-9.4]="_run pbench-verify-backup-tarballs"
    # bad md5 in backup
    [test-9.5]="_run pbench-verify-backup-tarballs"

    # pbench-sync-satellite - currently broken
    # trivial results: no mail
    [test-10]="_run pbench-sync-satellite TEST foo.bar.com $_testdir/archive"
    # non-trivial results: mail
    [test-11]="_run pbench-sync-satellite TEST2 foo2.bar.com $_testdir/archive"

    # shim - success
    [test-12]="_run pbench-server-prep-shim-001"
    [test-13]="_run pbench-server-prep-shim-002"
    # shim - failure md5
    [test-14]="_run pbench-server-prep-shim-001"
    [test-15]="_run pbench-server-prep-shim-002"

    # pbench-unpack-tarballs unpacking to the incoming directory
    [test-16]="_run pbench-unpack-tarballs ${_testdir}/public_html/incoming"
    # pbench-unpack-tarballs unpacking to a temporary directory
    [test-17]="_run pbench-unpack-tarballs ${_testdir_local}/public_html/incoming"

    # pbench-move-unpacked should do nothing when incoming directory is target
    [test-18]="_run pbench-move-unpacked ${_testdir}/public_html/incoming"
    # pbench-move-unpacked should work as expected using a temporary directory
    [test-19]="_run pbench-move-unpacked ${_testdir_local}/public_html/incoming"

    [test-20]="_run echo audit archive hierarchy"

    [test-21]="_run pbench-dispatch"
)

tests=$*
if [ -z "$tests" ] ;then
    tests=$(for x in ${!cmds[@]} ;do echo $x ;done | sed 's/\./-/' | sort -n -t '-' -k 3 | sort -n -t '-' -k 2 --stable | sed 's/\(.*-[0-9]\)-\([0-9]\)/\1.\2/')
fi

let failures=0
for test in $tests ;do
    _setup_state ${test}
    cmd=${cmds[$test]}
    # echo ${test}: ${cmd}
    ${cmd}
    _audit_archive; _save_tree; _dump_logs
    _verify_output $res ${test}
    res=$?
    if [[ $res != 0 ]] ;then
        let failures=failures+1
    fi

    _reset_state ${test}
done
exit $failures
