#!/bin/bash
export LANG=C
export LC_ALL=C

_tdir=$(dirname $(readlink -f $0))
_gitdir=$(dirname $(dirname $(dirname $_tdir)))
_tlib=${_tdir}/../lib

_testroot=/var/tmp/pbench-test-server
mkdir -p $_testroot
if [[ ! -d $_testroot ]]; then
    echo "ERROR: failed to create test root directory, \"$_testroot\"" >&2
    exit 1
fi
rm -rf $_testroot/*
if [[ $? -gt 0 ]]; then
    echo "ERROR: failed to empty test root directory, \"$_testroot\"" >&2
    exit 1
fi

_testout=$_testroot/output.txt
export _testlog=$_testroot/test-execution.log
export _testreportstatus=$_testroot/test-report-status.log
_testdir=$_testroot/pbench
_testdir_local=$_testroot/pbench-local
_testtmp=$_testroot/tmp

# Fixed timestamp output
export _PBENCH_SERVER_TEST=1

# execution environment
_testopt=$_testroot/opt/pbench-server
export PATH=$_testopt/unittest-scripts:$_tconfigtoolsbin:$PATH
export CONFIG=$_testopt/config/pbench-server.cfg

function _run {
    tname=$1
    shift
    echo "+++ Running $tname" >> $_testout
    $_tdir/$tname $@ >> $_testout 2>&1
    echo "--- Finished $tname (status=$?)" >> $_testout
}

function _run_index {
    echo "+++ Running indexing for $test" >> $_testout
    cmd="TMPDIR=$_testtmp PYTHONPATH=${_tlib}:$PYTHONPATH $_tdir/index-pbench -U -C ${_testopt}/config/pbench-index.cfg $(readlink -f $_testdir/*.tar.xz)"
    if which python3 > /dev/null 2>&1 ;then
	eval $cmd >> $_testout 2>&1
    elif which scl > /dev/null 2>&1 ;then
        echo "$cmd" | scl enable rh-python36 - >> $_testout 2>&1
    else
	echo "ERROR: unknown Python 3 environment for unit tests" >&2
	exit 1
    fi
    echo "--- Finished indexing for $test (status=$?)" >> $_testout
    sed -i '/File "'$(echo ${_gitdir} | sed 's;/;\\/;g')'/s;'${_gitdir}'/server/;/home/user/repo/pbench/server/;' $_testout
}

function _run_activate {
    $_tdir/pbench-server-config-activate ${_testdir}/pbench-server-internal/pbench/lib/config/pbench-server.cfg ${_testdir} >> $_testout
    rc=$?
    if [ $rc != 0 ] ;then
        return 1
    fi
    oldpath=$PATH
    PATH=$_tdir:$PATH
    $_tdir/pbench-server-activate ${_testdir}/opt/pbench-server/lib/config/pbench-server.cfg ${_testdir} >> $_testout
    PATH=$oldpath
}

function _run_allscripts {
    # _run pbench-backup-tarballs
    # These next three are related and would flow in this order
    _run pbench-unpack-tarballs $_testdir
    _run pbench-copy-sosreports
    _run pbench-index
    # These two are independent
    _run pbench-clean-up-dangling-results-links
    _run pbench-edit-prefixes
}

function _save_tree {
    # Save state of the tree
    echo "+++ pbench tree state" >> $_testout
    find $_testdir | sort |
        sed 's;tmp/pbench-\([-a-zA-Z]*\)\.[0-9][0-9]*$;tmp/pbench-\1.NNNN;' >> $_testout
    echo "--- pbench tree state" >> $_testout
    if [ -d ${_testdir_local} ] ;then
        echo "+++ pbench-local tree state" >> $_testout
        find ${_testdir_local} | sort |
            sed 's;tmp/pbench-\([-a-zA-Z]*\)\.[0-9][0-9]*$;tmp/pbench-\1.NNNN;' >> $_testout
        echo "--- pbench-local tree state" >> $_testout
    fi
}

function _dump_logs {
    # Dump the state of any generated script logs
    echo "+++ pbench log file contents" >> $_testout
    if [ -d $_testdir/logs ] ;then
        find $_testdir/logs -type f | sort | \
            while read fname; do
                grep -HvF "\-\-should-n0t-ex1st--" $fname >> $_testout 2>&1
            done
    fi
    echo "--- pbench log file contents" >> $_testout

    echo "+++ test-execution.log file contents" >> $_testout
    grep -HvF "\-\-should-n0t-ex1st--" $_testroot/test-execution.log 2>/dev/null |
         sed 's;tmp/pbench-\([-a-zA-Z0-9]*\)\.[0-9][0-9]*/;tmp/pbench-\1.NNNN/;' >> $_testout>> $_testout 2>&1
    echo "--- test-execution.log file contents" >> $_testout
    rm -f $_testroot/test-execution.log

    if [ -s $_testroot/test-report-status.log ]; then
        echo "+++ test-report-status.log file contents" >> $_testout
        grep -HvF "\-\-should-n0t-ex1st--" $_testroot/test-report-status.log 2>/dev/null |
             sed 's;tmp/pbench-\([-a-zA-Z]*\)\.[0-9][0-9]*/;tmp/pbench-\1.NNNN/;' >> $_testout>> $_testout 2>&1
        echo "--- test-report-status.log file contents" >> $_testout
    fi
    rm -f $_testroot/test-report-status.log
}

function _verify_output {
    res=$1
    tname=$2
    diff -cw $_tdir/gold/${tname}.txt $_testout
    if [[ $? -gt 0 ]]; then
        echo "FAIL - $tname"
        mv $_testout $_testroot/${tname}_output.txt
        res=1
    else
        echo "PASS - $tname"
        rm $_testout
    fi
    return $res
}

function _setup_state {
    res=0
    mkdir -p $_testopt/unittest-scripts/
    let res=res+$?
    cp $_tdir/test-bin/* $_testopt/unittest-scripts/
    let res=res+$?
    mkdir -p $(dirname $CONFIG)
    let res=res+$?
    cp $_tdir/state/config/pbench-server.cfg $_tdir/state/config/pbench-index.cfg $(dirname $CONFIG)/
    let res=res+$?

    if [ $res -ne 0 ]; then
	echo "ERROR: failed to properly setup the test environment root, \"$_testroot\"" >&2
	exit $res
    fi

    mkdir $_testdir $_testtmp
    if [[ $? -gt 0 ]]; then
	echo "ERROR: failed to create test pbench and tmp directories, \"$_testdir\" and/or \"$_testtmp\"" >&2
	exit 1
    fi
    if [[ ! -d $_testdir ]]; then
	echo "ERROR: test pbench directory does not exist, \"$_testdir\"" >&2
	exit 1
    fi
    if [[ ! -d $_testtmp ]]; then
	echo "ERROR: test tmp directory does not exist, \"$_testtmp\"" >&2
	exit 1
    fi
    _state_tb=$_tdir/state/${1}.tar.xz
    (cd $_testroot; tar xpf $_state_tb)
    if [[ $? -gt 0 ]]; then
        echo "ERROR: unable to create pbench hierarchy for state $1" >&2
        exit 1
    fi
}

function _reset_state {
    rm -rf $_testdir
    if [[ -d $_testdir ]]; then
        echo "ERROR: unable to remove pbench hierarchy" >&2
        exit 1
    fi
    rm -rf ${_testdir_local}
    if [[ -d ${_testdir_local} ]]; then
        echo "ERROR: unable to remove pbench-local hierarchy" >&2
        exit 1
    fi
    rm -rf $_testtmp
    if [[ -d $_testtmp ]]; then
        echo "ERROR: unable to remove tmp hierarchy" >&2
        exit 1
    fi
    rm -rf $_testroot/opt
    if [[ -d $_testroot/opt ]]; then
        echo "ERROR: unable to remove opt hierarchy" >&2
        exit 1
    fi
}

declare -A cmds=(
    # check for no TMP directory
    [test-1]="_run_allscripts"
    # check for no ARCHIVE directory
    [test-2]="_run_allscripts"
    # check for no INCOMING directory
    [test-3]="_run_allscripts"
    # check for no RESULTS directory
    [test-4]="_run_allscripts"
    # check that it runs if everything is there
    [test-5]="_run_allscripts"

    # backup tests
    # check for normal operation
    [test-6]="_run pbench-backup-tarballs"
    # check for no ARCHIVE directory
    [test-6.1]="_run pbench-backup-tarballs"
    # check for no ARCHIVE link resolution
    [test-6.2]="_run pbench-backup-tarballs"
    # checks that the dest directory is not bogus
    [test-6.3]="_run pbench-backup-tarballs"
    # real dest directory, no files needing backup - should succeed
    [test-6.4]="_run pbench-backup-tarballs"
    # real dest directory, all files needing backup - should succeed
    [test-6.5]="_run pbench-backup-tarballs"
    # real dest directory, no files needing backup - corrupted archive should not be copied
    [test-6.6]="_run pbench-backup-tarballs"

    # indexing tests
    [test-7.1]="_run_index"
    [test-7.2]="_run_index"
    [test-7.3]="_run_index"
    [test-7.4]="_run_index"
    [test-7.5]="_run_index"
    [test-7.6]="_run_index"
    [test-7.7]="_run_index"
    # uperf tarball
    [test-7.8]="_run_index"
    # pbench-user-benchmark tarball
    [test-7.9]="_run_index"
    # uperf, fio results data and prometheus data
    # with float conversion
    [test-7.10]="_run_index"
    [test-7.11]="_run_index"
    [test-7.12]="_run_index"

    # activation test
    [test-8]="_run_activate"

    # pbench-verify-backup-tarballs
    # normal case
    [test-9.1]="_run pbench-verify-backup-tarballs"
    # more tarballs in archive
    [test-9.2]="_run pbench-verify-backup-tarballs"
    # more tarballs in backup
    [test-9.3]="_run pbench-verify-backup-tarballs"
    # bad md5 in orig
    [test-9.4]="_run pbench-verify-backup-tarballs"
    # bad md5 in backup
    [test-9.5]="_run pbench-verify-backup-tarballs"

    # pbench-sync-satellite - currently broken
    # trivial results: no mail
    [test-10]="_run pbench-sync-satellite TEST foo.bar.com $_testdir/archive"
    # non-trivial results: mail
    [test-11]="_run pbench-sync-satellite TEST2 foo2.bar.com $_testdir/archive"

    # shim - success
    [test-12]="_run pbench-server-prep-shim-001"
    [test-13]="_run pbench-server-prep-shim-002"
    # shim - failure md5
    [test-14]="_run pbench-server-prep-shim-001"
    [test-15]="_run pbench-server-prep-shim-002"
)

tests=$*
if [ -z "$tests" ] ;then
    tests=$(for x in ${!cmds[@]} ;do echo $x ;done | sed 's/\./-/' | sort -n -t '-' -k 3 | sort -n -t '-' -k 2 --stable | sed 's/\(.*-[0-9]\)-\([0-9]\)/\1.\2/')
fi

let failures=0
for test in $tests ;do
    _setup_state ${test}
    cmd=${cmds[$test]}
    # echo ${test}: ${cmd}
    ${cmd}
    _save_tree; _dump_logs
    _verify_output $res ${test}
    res=$?
    if [[ $res != 0 ]] ;then
        let failures=failures+1
    fi

    _reset_state
done
exit $failures
