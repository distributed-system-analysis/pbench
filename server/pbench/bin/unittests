#!/bin/bash

_tdir=$(dirname $(readlink -f $0))
_tlib=${_tdir}/../lib

_testroot=/var/tmp/pbench-test-server
mkdir -p $_testroot
if [[ ! -d $_testroot ]]; then
    echo "ERROR: failed to create test root directory, \"$_testroot\"" >&2
    exit 1
fi
rm -rf $_testroot/*
if [[ $? -gt 0 ]]; then
    echo "ERROR: failed to empty test root directory, \"$_testroot\"" >&2
    exit 1
fi
_testout=$_testroot/output.txt
export _testlog=$_testroot/test-execution.log
_testdir=$_testroot/pbench
mkdir -p $_testdir
if [[ ! -d $_testdir ]]; then
    echo "ERROR: failed to create test pbench directory, \"$_testdir\"" >&2
    exit 1
fi

# Fixed timestamp output
export _PBENCH_SERVER_TEST=1

# execution environment
_testopt=$_testroot/opt/pbench-agent
res=0
mkdir -p $_testopt/unittest-scripts/
let res=res+$?
cp $_tdir/test-bin/* $_testopt/unittest-scripts/
let res=res+$?

export PATH=$_testopt/unittest-scripts:$_tconfigtoolsbin:$PATH
export CONFIG=$_testroot/opt/pbench-server/config/pbench-server.cfg

function _run {
    tname=$1
    shift
    echo "+++ Running $tname" >> $_testout
    $_tdir/$tname $@ >> $_testout 2>&1
    echo "--- Finished $tname (status=$?}" >> $_testout
}

function _run_index {
    dname=$1
    shift
    # Will get deleted by _reset_state
    mkdir -p $_testroot/pbench
    mkdir -p $_testroot/tmp
    echo "+++ Running indexing on $dname" >> $_testout
    TMPDIR=$_testroot/tmp PYTHONPATH=${_tlib}:$PYTHONPATH $_tdir/index-pbench -U -C ${_tlib}/config/pbench-index.cfg.example $(readlink -f $dname.tar.xz) >> $_testout 2>&1
    echo "--- Finished indexing on $dname (status=$?)" >> $_testout
    _gitdir=$(dirname $(dirname $(dirname $_tdir)))
    sed -i '/File "'$(echo ${_gitdir} | sed 's;/;\\/;g')'/s;'${_gitdir}'/server/;/home/user/repo/pbench/server/;' $_testout
}

function _run_activate {
    rootdir=${1%/}
    $_tdir/pbench-server-config-activate ${rootdir}/pbench-server-internal/pbench/lib/config/pbench-server.cfg ${_testdir} >> $_testout
    rc=$?
    if [ $rc != 0 ] ;then
        return 1
    fi
    oldpath=$PATH
    PATH=$_tdir:$PATH
    $_tdir/pbench-server-activate ${_testdir}/opt/pbench-server/lib/config/pbench-server.cfg ${_testdir} >> $_testout
    PATH=$oldpath
}

function _run_allscripts {
    # _run pbench-backup-tarballs
    # These next three are related and would flow in this order
    _run pbench-unpack-tarballs $_testdir
    _run pbench-copy-sosreports
    _run pbench-index
    # These two are independent
    _run pbench-clean-up-dangling-results-links
    _run pbench-edit-prefixes
}
function _save_tree {
    # Save state of the tree
    echo "+++ pbench tree state" >> $_testout
    find $_testdir | sort |
        sed 's;tmp/pbench-\([-a-zA-Z]*\)\.[0-9][0-9]*$;tmp/pbench-\1.NNNN;' >> $_testout
    echo "--- pbench tree state" >> $_testout
}
function _dump_logs {
    # Dump the state of any generated script logs
    echo "+++ pbench log file contents" >> $_testout
    if [ -d $_testdir/logs ] ;then
        find $_testdir/logs -type f | sort | \
            while read fname; do
                grep -HvF "\-\-should-n0t-ex1st--" $fname >> $_testout 2>&1
            done
    fi
    echo "--- pbench log file contents" >> $_testout
    echo "+++ test-execution.log file contents" >> $_testout
    grep -HvF "\-\-should-n0t-ex1st--" $_testroot/test-execution.log 2>/dev/null |
         sed 's;tmp/pbench-\([-a-zA-Z]*\)\.[0-9][0-9]*/;tmp/pbench-\1.NNNN/;' >> $_testout>> $_testout 2>&1
    echo "--- test-execution.log file contents" >> $_testout
    rm -f $_testroot/test-execution.log

}
function _verify_output {
    res=$1
    tname=$2
    diff -cw $_tdir/gold/${tname}.txt $_testout
    if [[ $? -gt 0 ]]; then
        echo "FAIL - $tname"
        mv $_testout $_testroot/${tname}_output.txt
        res=1
    else
        echo "PASS - $tname"
        rm $_testout
    fi
    return $res
}
function _setup_state {
    _state_tb=$_tdir/state/${1}.tar.xz
    (cd $_testroot; tar xf $_state_tb; if [ ! -z "${2}" ] ;then /bin/ln -s ${2}.tar.xz ${1}.tar.xz ;fi)
    if [[ $? -gt 0 ]]; then
        echo "ERROR: unable to create pbench hierarchy for state $1" >&2
        exit 1
    fi
}
function _reset_state {
    rm -rf $_testdir
    if [[ -d $_testdir ]]; then
        echo "ERROR: unable to remove pbench hierarchy" >&2
        exit 1
    fi
    rm -rf $_testroot/tmp
    if [[ -d $_testroot/tmp ]]; then
        echo "ERROR: unable to remove tmp hierarchy" >&2
        exit 1
    fi
}

declare -A cmds=(
    # check for no TMP directory
    [test-1]="_run_allscripts"
    # check for no ARCHIVE directory
    [test-2]="_run_allscripts"
    # check for no INCOMING directory
    [test-3]="_run_allscripts"
    # check for no RESULTS directory
    [test-4]="_run_allscripts"
    # check that it runs if everything is there
    [test-5]="_run_allscripts"

    # backup tests
    # check for normal operation
    [test-6]="_run pbench-backup-tarballs"
    # check for no ARCHIVE directory
    [test-6.1]="_run pbench-backup-tarballs"
    # check for no ARCHIVE link resolution
    [test-6.2]="_run pbench-backup-tarballs"
    # checks that the dest directory is not bogus
    [test-6.3]="_run pbench-backup-tarballs"
    # real dest directory - should succeed
    [test-6.4]="_run pbench-backup-tarballs"

    # indexing tests
    [test-7.1]="_run_index $_testroot/test-7.1"
    [test-7.2]="_run_index $_testroot/test-7.2"
    [test-7.3]="_run_index $_testroot/test-7.3"
    [test-7.4]="_run_index $_testroot/test-7.4"
    [test-7.5]="_run_index $_testroot/test-7.5"
    [test-7.6]="_run_index $_testroot/test-7.6"
    [test-7.7]="_run_index $_testroot/test-7.7"
    # uperf tarball
    [test-7.8]="_run_index $_testroot/test-7.8"
    # pbench-user-benchmark tarball
    [test-7.9]="_run_index $_testroot/test-7.9"
    # uperf, fio results data and prometheus data
    # with float conversion
    [test-7.10]="_run_index $_testroot/test-7.10"
    [test-7.11]="_run_index $_testroot/test-7.11"
    [test-7.12]="_run_index $_testroot/test-7.12"
    
    # activation test
    [test-8]="_run_activate $_testroot/test-8"

    # pbench-verify-backup-tarballs
    # normal case
    [test-9.1]="_run pbench-verify-backup-tarballs"
    # more tarballs in archive
    [test-9.2]="_run pbench-verify-backup-tarballs"
    # more tarballs in backup
    [test-9.3]="_run pbench-verify-backup-tarballs"
    # bad md5 in orig
    [test-9.4]="_run pbench-verify-backup-tarballs"
    # bad md5 in backup
    [test-9.5]="_run pbench-verify-backup-tarballs"

    # pbench-sync-satellite - currently broken
    # trivial results: no mail
    [test-10]="_run pbench-sync-satellite TEST foo.bar.com $_testroot/pbench/archive"
    # non-trivial results: mail
    [test-11]="_run pbench-sync-satellite TEST2 foo2.bar.com $_testroot/pbench/archive"
)

declare -A links=(
    [test-7.8]="uperf__2016-10-06_16:34:03"
    [test-7.9]="pbench-user-benchmark__2017-04-21_20:38:16"
    [test-7.10]="uperf_uperftest_2018.02.02T20.58.00"
    [test-7.11]="fio_rw_2018.02.01T22.40.57"
    [test-7.12]="pbench-user-benchmark__2018.02.05T20.35.36"
)

# indexing unit tests - why is this necessary?
# PATH=/usr/local/bin:$PATH

tests=$*
if [ -z "$tests" ] ;then
    tests=$(for x in ${!cmds[@]} ;do echo $x ;done | sort -t- -k 2 -n)
fi

let failures=0
for test in  $tests ;do
    _setup_state ${test} ${links[$test]}
    cmd=${cmds[$test]}
    # echo ${test}: ${cmd}
    ${cmd}
    _save_tree; _dump_logs
    _verify_output $res ${test}
    res=$?
    if [[ $res != 0 ]] ;then
        let failures=failures+1
    fi
    _reset_state
done
exit $failures
