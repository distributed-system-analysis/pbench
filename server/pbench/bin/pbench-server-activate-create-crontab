#! /bin/bash

prog=$(basename $0)
# This script uses the pbench-server.cfg file just installed, to
# figure out what tasks to add to the pbench crontab on this
# machine. After creating the crontab, it does *not* activate it: that
# is a separate manual step.

usage="Usage: $prog <crontab-path> [<test-dir-prefix>]"

crontabpath=$1
# testdir is only used for unit tests
testdir=$2

if [ ! -z "$testdir" ] ;then
    crontabpath=${testdir}${crontabpath}
fi

# crontab
mkdir -p $crontabpath
chmod 755 $crontabpath
crontab=$crontabpath/crontab

if [ ! -f $CONFIG ]
then
    echo "Config file $CONFIG does not exist"
    exit 2
fi

echo "CONFIG=$CONFIG" > $crontab
bindir=$(getconf.py script-dir pbench-server)
if [ -z "$bindir" ] ;then
    echo "No 'script-dir' setting in [pbench-server] section of config file $CONFIG"
    exit 3
fi
echo "PATH=$bindir:$PATH" >> $crontab

roles=$(getconf.py -l roles pbench-server)
hostname=$(hostname -f)
# in some cases, the host specified in the config file
# is different from what hostname -f returns. In such
# cases, we also have a "real" name in the config file
# that *should* match what hostname -f returns
realhost=$(getconf.py realhost pbench-server)

function crontab_normal() {
    local role=$1
    local host mailfrom mailto

    mailfrom=$(getconf.py mailfrom $role pbench-server)
    if [ -z "$mailfrom" ] ;then
        echo "$role: No mailfrom specified"
        continue
    fi
    mailto=$(getconf.py mailto $role pbench-server)
    if [ -z "$mailto" ] ;then
        echo "$role: No mailto specified"
        continue
    fi
    
    grep -q MAILTO $crontab ||
        echo "MAILTO=$mailto" >> $crontab
    grep -q MAILFROM $crontab ||
        echo "MAILFROM=$mailfrom" >> $crontab
    tasks=$(getconf.py -l tasks $role)
    for task in $tasks ;do
        crontabline=$(getconf.py crontab $task)
        echo "$crontabline" >> $crontab
    done
}

function crontab_with_substitutions() {
    local section=$1
    local task=$2

    crontabline=$(getconf.py crontab $task)
    echo "$crontabline" | sed "$(getconf.py -a $section | grep = | awk -F' = ' '{gsub(/-/, "_", $1); printf "s;$%s;%s;g\n", toupper($1) , $2;}')"  >> $crontab
}

for role in $roles ;do
    host=$(getconf.py host $role)
    if [ "$host" != "$hostname" -a "$realhost" != "$hostname" ] ;then
        if [ "${_PBENCH_SERVER_TEST}" != "1" ] ;then 
            continue
        fi
    fi
    case $role in
        pbench-rsync-satellites)
            satellites=$(getconf.py -l satellites $role)
            tasks=$(getconf.py -l tasks $role)
            for satellite in $satellites ;do
                for task in $tasks; do
                    crontab_with_substitutions $satellite $task
                done
            done
            ;;
        *)
            crontab_normal $role
            ;;
    esac
done

chmod 644 $crontab

# create the lock directory that the cron entries will use
lockdir=$(getconf.py deploy-lock-dir pbench-server)
if [ ! -z "$testdir" ] ;then
    lockdir=${testdir}${lockdir}
fi
mkdir -p ${lockdir}
chmod 755 ${lockdir}

user=$(getconf.py default-user results)
if [ -z "$user" ] ;then
    echo "default-user is undefined in section \"results\" of config file."
    exit 5
fi

group=$(getconf.py default-group results)
if [ -z "$group" ] ;then
    echo "default-group is undefined in section \"results\" of config file."
    exit 5
fi

chown $user.$group ${crontab}
chown -R $user.$group ${lockdir}

exit 0
