# this file describes the elements of deploying the pbench background tools
[DEFAULT]
# CHANGE ME!
mailto = admins@example.com
version = 001
versions = 001 002

pbench-environment = unit-test
unittest-dir = /var/tmp/pbench-test-server

# CHANGE ME!
default-host = pbench.example.com
default-user = pbench
default-group = pbench
default-deploy-dir = %(unittest-dir)s/opt/pbench-server

default-script-dir = %(default-deploy-dir)s/bin
default-lib-dir = %(default-deploy-dir)s/lib
default-crontab-dir = %(default-lib-dir)s/crontab
default-lock-dir = %(default-lib-dir)s/locks

deploy-script-dir = %(default-script-dir)s
deploy-lib-dir = %(default-lib-dir)s
deploy-crontab-dir=%(default-crontab-dir)s
deploy-lock-dir = %(default-lock-dir)s

## See pbench server setup documentation for filesystem setup
# TOP and ARCHIVE are on pbench volume
deploy-pbench-dir = %(unittest-dir)s/pbench
deploy-pbench-local-dir = %(unittest-dir)s/pbench-local
deploy-archive-dir = %(deploy-pbench-dir)s/archive/fs-version-%(version)s
# CHANGE ME!
# LOGSDIR is local - XXX TBD
deploy-pbench-logs-dir = %(deploy-pbench-dir)s/logs
# CHANGE ME!
# BDIR may be remote
#deploy-backup-host = pbench-backup.example.com
deploy-pbench-backup-dir = %(deploy-pbench-dir)s/archive.backup
# CHANGE ME!
# TMP is local
deploy-pbench-tmp-dir = %(deploy-pbench-dir)s/tmp

deploy-pbench-receive-dir-001 = %(deploy-pbench-local-dir)s/fs-version-001/pbench-move-results-receive
deploy-pbench-receive-dir-002 = %(deploy-pbench-local-dir)s/fs-version-002/pbench-move-results-receive

[pbench-files]
pbench-top-dir = %(deploy-pbench-dir)s
pbench-backup-dir = %(deploy-pbench-backup-dir)s
pbench-logs-dir = %(deploy-pbench-logs-dir)s
pbench-tmp-dir = %(deploy-pbench-tmp-dir)s

###########################################################################
## runtime section
###########################################################################
[sosreport]
user = %(default-user)s
# CHANGE ME!
host = pbench-sosreports.example.com
dir = /path/to/sosreport/dir
# CHANGE ME!
mailto = admins@example.com

###########################################################################
## deployment section
###########################################################################
[pbench-server]
user = %(default-user)s
group = %(default-group)s
mailfrom = %(default-user)s@%(default-host)s
install-dir = %(default-deploy-dir)s
script-dir = %(deploy-script-dir)s
archive-dir = %(deploy-archive-dir)s
quarantine-dir = %(deploy-pbench-local-dir)s/quarantine
receive-dir-001 = %(deploy-pbench-receive-dir-001)s
receive-dir-002 = %(deploy-pbench-receive-dir-002)s
crontabdir = %(deploy-lib-dir)s/crontab

# CHANGE ME!
# roles = pbench-results, pbench-backup
roles = pbench-prep, pbench-results, pbench-backup, pbench-rsync-satellites

# when a tarball comes in to this server, what processing should it undergo?
# production-like servers do at least the first two and possibly more of these:
dispatch-states = TO-UNPACK, TO-INDEX, TO-COPY-SOS, TO-BACKUP

# we need to install some stuff in the apache document root
# so we either get it directly or look in the config file.
# N.B. Different distros use different config files.
# The following works on Fedora, RHEL, CentOS.
[apache]
# configfile = /etc/httpd/conf/httpd.conf
documentroot = %(unittest-dir)s/var-www-html

# this *has* to agree with the setting in the pbench-agent config file
[results]

# CHANGE ME!
webserver = pbench.example.com
host_info_url = http://%(webserver)s/pbench-results-host-info.versioned/pbench-results-host-info.URL

###########################################################################
# crontab roles
[pbench-results]
host = %(default-host)s
# CHANGE ME!
tasks = pbench-unpack-tarballs, pbench-copy-sosreports, pbench-edit-prefixes, pbench-index

[pbench-backup]
host = %(default-host)s
tasks = pbench-backup-tarballs, pbench-verify-backup-tarballs

[pbench-rsync-satellites]
tasks = pbench-rsync-satellite, pbench-age-out-satellite
# tasks = pbench-rsync-satellite
satellites = EC2

# the crontab making script will loop over satellites, creating rsync and age-out entries for each.
# satellites
[EC2]
prefix = EC2
satellite-host = host.ec2.example.com
satellite-archive = /path/to/pbench/archive/fs-version-001

###########################################################################
# crontab tasks
[pbench-backup-tarballs]
crontab = 41 4 * * *  flock -n %(deploy-lock-dir)s/pbench-backup-tarballs.lock %(deploy-script-dir)s/pbench-backup-tarballs

[pbench-verify-backup-tarballs]
crontab = 59 4 * * 0  flock -n %(deploy-lock-dir)s/pbench-verify-backup-tarballs.lock %(deploy-script-dir)s/pbench-verify-backup-tarballs %(deploy-pbench-backup-dir)s

[pbench-unpack-tarballs]
crontab = * * * * *  flock -n %(deploy-lock-dir)s/pbench-unpack-tarballs.lock %(deploy-script-dir)s/pbench-unpack-tarballs

[pbench-copy-sosreports]
crontab = 41 * * * *  flock -n %(deploy-lock-dir)s/pbench-copy-sosreports.lock %(deploy-script-dir)s/pbench-copy-sosreports

[pbench-edit-prefixes]
crontab = * * * * *  flock -n %(deploy-lock-dir)s/pbench-edit-prefixes.lock %(deploy-script-dir)s/pbench-edit-prefixes

[pbench-index]
crontab = 26 * * * *  flock -n %(deploy-lock-dir)s/pbench-index.lock %(deploy-script-dir)s/pbench-index

[pbench-clean-up-dangling-results]
crontab = 51 3 * * *  flock -n %(deploy-lock-dir)s/pbench-clean-up-dangling-results-links.lock %(deploy-script-dir)s/pbench-clean-up-dangling-results-links

[pbench-rsync-satellite]
crontab = 51 23 * * *  flock -n %(deploy-lock-dir)s/pbench-rsync-satellite.lock.$PREFIX %(deploy-script-dir)s/pbench-rsync-satellite $PREFIX $SATELLITE_HOST $SATELLITE_ARCHIVE

[pbench-age-out-satellite]
crontab = 51 1 * * 0  flock -n %(deploy-lock-dir)s/pbench-age-out-satellite.lock.$PREFIX %(deploy-script-dir)s/pbench-age-out-satellite $PREFIX $SATELLITE_HOST $SATELLITE_ARCHIVE
