#! /bin/bash
# -*- mode: shell-script -*-

# This script is the first part of the pipeline that processes pbench
# results tarballs.

# First stage:  pbench-unpack-tarballs looks in all the TODO
#               directories, unpacks tarballs, checks MD5 sums and
#               moves the symlink from the TODO subdir to the
#               TO-COPY-SOS subdir.  It runs under cron once a minute
#               in order to minimize the delay between uploading the
#               results and making them available for viewing over the
#               web.

# Second stage: pbench-copy-sosreports looks in all the TO-COPY-SOS
#               subdirs, extracs the sos report from the tarball and
#               copies it to the VoS incoming area for further
#               processing. Assuming that all is well, it moves the
#               symlink from the TO-COPY-SOS subdir to the TO-INDEX
#               subdir.

# Third stage:  pbench-index looks in all the TO-INDEX subdirs and
#               calls the pbench-results-indexer script to index the
#               results tarball into ES. It then moves the symlink from
#               the TO-INDEX subdir to the DONE subdir.

# assumptions:
# - this script runs as a cron job
# - tarballs and md5 sums are uploaded by move/copy-results to
#   $ARCHIVE/$(hostname -s) area.
# - move/copy-results also makes a symlink to each tarball it uploads
#   in $ARCHIVE/TODO.

# This script loops over the contents of $archive/TODO, verifies the md5
# sum of each tarball, and if correct, it unpacks the tarball into
# .../incoming/$(hostname -s)/.  If everything works, it then moves the
# symlink from $ARCHIVE/TODO to $ARCHIVE/TO-COPY-SOS.


###########################################################################
# load common things
opts=$SHELLOPTS
case $opts in
    *xtrace*)
        dir=$(dirname $(which $0))
        PROG=$(basename $(which $0))
        ;;
    *)
        dir=$(dirname $0)
        PROG=$(basename $0)
        ;;
esac

# TOP, ARCHIVE, INCOMING, RESULTS are all defined by the base file
. $dir/pbench-base.sh
###########################################################################

log_init $(basename $0)

# check that all the directories exist
test -d $ARCHIVE || doexit "Bad ARCHIVE=$ARCHIVE"
test -d $INCOMING || doexit "Bad INCOMING=$INCOMING"
test -d $RESULTS || doexit "Bad RESULTS=$RESULTS"

# make sure only one copy is running.
# Use 'flock -n $LOCKFILE /home/pbench/bin/pbench-unpack-tarballs' in the
# crontab to ensure that only one copy is running. The script itself
# does not use any locking.

# the link source and destination for this script
linksrc=TODO
linkdest=TO-COPY-SOS

echo $TS

# get the list of files we'll be operating on - sort them by size
list=$TMP/pbench-unpack-tarballs.$$
find -L $ARCHIVE/*/$linksrc -name '*.tar.xz' -printf "%s\t%p\n" 2>/dev/null | grep -v DUPLICATE | sort -n > $list

trap 'rm -f $list' EXIT INT QUIT

typeset -i ntb=0
typeset -i ntotal=0
typeset -i nerrs=0
typeset -i ndups=0

while read size result ;do
    ntotal=$ntotal+1

    link=$(readlink -e $result)
    if [ ! -f "$link" ] ;then
        echo "$TS: $link does not exist" >&4
        nerrs=$nerrs+1
        continue
    fi

    resultname=$(basename $result)
    resultname=${resultname%.tar.xz}
    hostname=$(basename $(dirname $link))

    # echo $link
    # echo $resultname
    # echo $hostname
    # continue

    # make sure that all the relevant state directories exist
    mk_dirs $hostname
    # ... and a couple of other necessities.
    if [[ $? -ne 0 ]] ;then
        echo "$TS: Creation of $hostname processing directories failed: code $status" >&4
        nerrs=$nerrs+1
        continue
    fi
    mkdir -p $INCOMING/$hostname
    if [[ $? -ne 0 ]] ;then
        echo "$TS: Creation of $INCOMING/$hostname failed: code $status" >&4
        nerrs=$nerrs+1
        continue
    fi
    
    mkdir -p $TMP/$PROG/$hostname
    status=$?
    if [[ $status -ne 0 ]] ;then
        echo "$TS: mkdir -p $TMP/$PROG/$hostname failed: code $status" >&4
        nerrs=$nerrs+1
        continue
    fi
    
    # XXXX - for now, if it's a duplicate name, just punt and avoid producing the error - the full
    # solution will involve renaming the unpacked directory appropriately.
    if [ ${resultname%%.*} == "DUPLICATE__NAME" ] ;then
        ndups=$ndups+1
        continue
    fi

    # create a "Please wait" message in .../incoming.
    incoming=$INCOMING/$hostname/$resultname
    mkdir -p $incoming
    status=$?
    if [[ $status -ne 0 ]] ;then
        echo "$TS: mkdir -p $incoming failed: code $status" >&4
        nerrs=$nerrs+1
        continue
    fi
    echo "Processing - please wait..." > $incoming/index.html
    status=$?
    if [[ $status -ne 0 ]] ;then
        echo "$TS: Creation of $incoming/index.html failed: code $status" >&4
        nerrs=$nerrs+1
        continue
    fi

    # check the md5 sum
    md5=$(cat $link.md5 2> /dev/null | cut -d' ' -f1)
    md5tar=$(md5sum $link 2> /dev/null | cut -d' ' -f1)
    if [ "$md5" != "$md5tar" ] ;then
        echo "$TS: MD5 check failed on $link" >&4
        # move the link so that the script does not report the error continuously
        mv $result $(echo $result | sed 's/TODO/BAD-MD5/')
        nerrs=$nerrs+1
        continue
    fi

    let start_time=$(date +%s)
    # unpack the tarball into a temp area
    pushd $TMP/$PROG/$hostname > /dev/null 2>&1
    tar --extract --no-same-owner --no-overwrite-dir --touch --file="$result"
    status=$?
    if [[ $status -ne 0 ]] ;then
        echo "$TS: 'tar -xf $result' failed: code $status" >&4
        nerrs=$nerrs+1
        popd > /dev/null 2>&1
        continue
    fi
    # chmod directories to at least 555
    find . -type d -print0 | xargs -0 chmod ugo+rx
    status=$?
    if [[ $status -ne 0 ]] ;then
        echo "$TS: 'chmod ugo+rx' of subdirs failed: code $status" >&4
        nerrs=$nerrs+1
        popd > /dev/null 2>&1
        continue
    fi
    # chmod files to at least 444
    chmod -R ugo+r .
    status=$?
    if [[ $status -ne 0 ]] ;then
        echo "$TS: 'chmod -R ugo+r .' failed: code $status" >&4
        nerrs=$nerrs+1
        popd > /dev/null 2>&1
        continue
    fi
    popd > /dev/null 2>&1

    # move the tarball contents to INCOMING
    rm $incoming/index.html
    rmdir $incoming
    status=$?
    if [[ $status -ne 0 ]] ;then
        echo "$TS: Cannot remove $incoming: dir not empty? name collision? code $status" >&4
        nerrs=$nerrs+1
        continue
    fi

    # create the link from results to incoming *before* moving the directory from TMP.
    # That avoids a race with pbench-create-results-links which might create a recursive link

    # if there is a prefix file, create a link as specified by the prefix
    # even if no prefix is specified, we still want to link from the results/ hierarchy to incoming/.
    # user access will eventually be through results/ only.
    basedir=$(dirname $link)
    prefixfile=$basedir/prefix.$resultname
    if [ -f $prefixfile ] ;then
        # add the slash to make both cases uniform in what follows
        prefix=$(cat $prefixfile)/
        mkdir -p $basedir/.prefix
        mv $prefixfile $basedir/.prefix
    else
        prefix=""
    fi

    mkdir -p $RESULTS/$hostname/$prefix
    status=$?
    if [[ $status -ne 0 ]] ;then
        echo "$TS: prefix failure - code $status:         mkdir -p $RESULTS/$hostname/$prefix" >&4
    else
        echo "ln -s $incoming $RESULTS/$hostname/$prefix$resultname"
        ln -s $incoming $RESULTS/$hostname/$prefix$resultname
        status=$?
        if [[ $status -ne 0 ]] ;then
            echo "$TS: prefix failure - code $status: ln -s $incoming $RESULTS/$hostname/$prefix$resultname" >&4
        fi
    fi

    # now move the directory - remove the link on failure
    # -Z needed for proper selinux labeling, but it works when selinux is disabled as well.
    mv -Z $TMP/$PROG/$hostname/$resultname $incoming
    status=$?
    if [[ $status -ne 0 ]] ;then
        echo "$TS: Cannot move $TMP/$PROG/$hostname/$resultname to $incoming: code $status" >&4
        rm $RESULTS/$hostname/$prefix$resultname
        nerrs=$nerrs+1
        continue
    fi

    # move the link to $linkdest directory
    mv $result $(echo $result | sed "s/$linksrc/$linkdest/")
    status=$?
    if [[ $status -ne 0 ]] ;then
        echo "$TS: Cannot move $result link from $linksrc to $linkdest: code $status" >&4
        rm $RESULTS/$hostname/$prefix$resultname
        nerrs=$nerrs+1
        continue
    fi
    let end_time=$(date +%s)
    let duration=end_time-start_time
    # log the success
    echo "$TS: $hostname/$resultname: success - elapsed time (secs): $duration - size (bytes): $size"
    ntb=$ntb+1
done < $list

echo "$TS: Processed $ntb tarballs"

log_finish

if [[ $nerrs -gt 0 ]]; then
    subj="$PROG.$TS($PBENCH_ENV) - w/ $nerrs errors"
    # don't send mail when running unittests
    if [[ "$_PBENCH_SERVER_TEST" != 1 ]] ;then
        echo "Processed $ntotal result tar balls, $ntb successfully, with $nerrs errors and $ndups duplicates" | mailx -s "$subj" $mail_recipients
    fi
fi

exit 0
