#+
# Nginx configuration for the Pbench Server.
#-

user              nginx;
worker_processes  auto;
pid               /run/nginx.pid;

# All nginx error logs flow through syslog.
error_log         syslog:server=unix:/dev/log,facility=local5,tag=nginx,nohostname  info;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include           /usr/share/nginx/modules/*.conf;

events {
    worker_connections  1024;
}

http {
    log_format  main  escape=json  '@cee:{"nginx":{"v2":{'
        '"body_bytes_sent": $body_bytes_sent, '
        '"bytes_sent": $bytes_sent, '
        '"connection": $connection, '
        '"connection_requests": $connection_requests, '
        '"http": {'
            '"referer": "$http_referer", '
            '"user_agent": "$http_user_agent", '
            '"x_forwarded_for": "$http_x_forwarded_for"'
        '}, '
        '"msec": $msec, '
        '"pipe": "$pipe", '
        '"remote": {'
            '"addr": "$remote_addr", '
            '"port": $remote_port, '
            '"user": "$remote_user"'
        '}, '
        '"request": {'
            '"args": "$args", '
            '"length": $request_length, '
            '"method": "$request_method", '
            '"raw": "$request", '
            '"time": $request_time, '
            '"uri": "$uri"'
        '}, '
        '"server": {'
            '"name": "$server_name", '
            '"host": "$host", '
            '"port": $server_port'
        '}, '
        '"status": $status, '
        '"time": "$time_iso8601", '
        '"type": "HTTP", '
        '"upstream": {'
            '"connect_time": "$upstream_connect_time", '
            '"header_time": "$upstream_header_time", '
            '"response_time": "$upstream_response_time"'
        '}'
    '}}}';

    # All nginx access logs flow through syslog as well.
    access_log  syslog:server=unix:/dev/log,facility=local6,tag=nginx,severity=info,nohostname  main;

    sendfile             on;
    tcp_nopush           on;
    tcp_nodelay          on;
    keepalive_timeout    65;
    types_hash_max_size  4096;

    include              /etc/nginx/mime.types;
    default_type         application/octet-stream;

    server {
        listen       8443 ssl;
        listen       [::]:8443 ssl;
        server_name  _;
        ssl_certificate     /etc/pki/tls/certs/pbench-server.crt;
        ssl_certificate_key /etc/pki/tls/private/pbench-server.key;
        root         /srv/pbench/public_html;
        index        index.html;

        error_page   404              /404.html;
        error_page   500 502 503 504  /50x.html;
        error_page   597              @maintenance;

        location @maintenance {
            rewrite ^(.*)$ /maintenance.json break;
        }

        location = /404.html {
            internal;
        }

        location = /50x.html {
            internal;
        }

        location /api {
            if (-f $document_root/maintenance.json) {
                # If the file /srv/pbench/public_html/maintenance.json is
                # present, then a response code of 597 will be returned,
                # indicating the Pbench Server is under maintenance.  The
                # error_page definition above, combined with the @maintenance
                # internal location, means that the content of the
                # maintenance.json file will be used as the body of the message.
                # This allows the SRE to update the maintenance JSON response
                # with an appropriate message.
                return 597;
            }

            proxy_pass               http://unix:/run/pbench-server/pbench-server.sock;
            proxy_redirect           off;
            proxy_connect_timeout    20s;
            proxy_read_timeout       120s;
            proxy_buffering          on;
            proxy_buffers            512 4k;
            proxy_request_buffering  on;
            proxy_http_version       1.1;

            proxy_set_header         Host              $http_host;
            proxy_set_header         X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header         X-Real-IP         $remote_addr;
            proxy_set_header         X-Forwarded-Proto $scheme;

            client_max_body_size     100G;
        }

        location /dashboard {
            # See if the URI exists, as a file or as a directory, under
            # /srv/pbench/public_html and serve that. If it doesn't, just serve
            # /dashboard/index.html.
            try_files  $uri $uri/index.html  /dashboard/index.html;
        }

        location /static/ {
            # Serve the legacy web server files that support the agent generated
            # HTML pages.
            root  /opt/pbench-server/html;
        }

        location / {
            # Serve all other paths requested out of /srv/pbench/public_html/.
            autoindex            on;
            autoindex_localtime  off;
        }
    }
}
