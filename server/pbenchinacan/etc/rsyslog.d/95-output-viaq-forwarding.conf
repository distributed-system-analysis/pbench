# This is basically the RSYSLOG_SyslogProtocol23Format, which is RFC 5424 on
# the wire, but with the message payload a CEE/Lumberjack JSON document.
template(
    name="ViaQ_SyslogProtocol23Format"
    type="string"
    string="<%PRI%>1 %TIMESTAMP:::date-rfc3339% %HOSTNAME% %APP-NAME% %PROCID% %MSGID% %STRUCTURED-DATA% @cee:%$!%\n"
)

# Some log messages have not been stored in the JSON variables, so check and
# add them here.
if strlen($!msg) < 1 then {
    set $!msg = $msg;
}

# Forward messages via TCP, using JSON embedded in message (RFC 5424), with a
# disk-assisted queue.
action(
    name="fwd-viaq"
    type="omfwd"
    Target="10.1.170.92"
    Port="514"
    Protocol="tcp"
    Template="ViaQ_SyslogProtocol23Format"
    # Rebind every thousand messages sent
    RebindInterval="1000"

    # In-memory linked-list queue, but because filename is defined it is disk-assisted
    # See http://www.rsyslog.com/doc/v8-stable/concepts/queues.html?highlight=disk%20assisted
    queue.type="linkedlist"
    # Directory where the queue files on disk will be stored
    queue.spoolDirectory="/var/lib/rsyslog/forwarder.q"
    # Prefix of the name the queue files on disk
    queue.filename="daq"
    # Only store up to a maximum size of logs on disk
    queue.maxDiskSpace="64m"
    # Use 100 MB queue files
    queue.maxFileSize="100m"
    # Update disk queue every "so many" messages
    queue.checkpointInterval="1024"
    # Fsync when a check point occurs
    queue.syncQueueFiles="on"
    # Save messages to disk on shutdown
    queue.saveOnShutdown="on"
    # Allow up to 6 threads processing items in the queue
    queue.workerThreads="6"

    # Keep a "small" queue since journal persistence is assumed
    queue.size="8192"

    # Be sure we don't dequeue too many log messages at one time in case of failure
    queue.DequeueBatchSize="2048"
    # We have a minimum size to avoid making too many bulk API calls
    queue.minDequeueBatchSize="128"
    # Indexing no less than once a second to avoid pounding the target
    queue.minDequeueBatchSize.timeout="1000"

    # Infinite retries if host is down
    action.resumeRetryCount="-1"
)
