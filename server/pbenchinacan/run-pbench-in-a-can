#!/bin/bash -e
# shellcheck disable=SC2086,2174

#
# Run a local containerized deployment of the Pbench Server, together with its
# dependencies.
#
# This script should be run from the root of the Git checkout.
#

# The default container registry to use with the organization name in that
# registry.  E.g., `quay.io/pbench`.  We export it (and the server image name)
# for the subordinate scripts to use.
export PB_CONTAINER_REG=${PB_CONTAINER_REG:-$(< ${HOME}/.config/pbench/ci_registry.name)}
server_image_name=${PB_SERVER_IMAGE_NAME:-"pbench-server"}
server_image_tag=${PB_SERVER_IMAGE_TAG:-"$(< jenkins/branch.name)"}
export PB_SERVER_IMAGE=${PB_CONTAINER_REG}/${server_image_name}:${server_image_tag}

# Default pull policy for all images is to pull the image if the registry has a
# *different* version (despite the name -- different is assumed to be "newer").
export PB_COMMON_IMAGE_PULL_POLICY=${PB_COMMON_IMAGE_PULL_POLICY:-"newer"}
export PB_SERVER_IMAGE_PULL_POLICY="${PB_SERVER_IMAGE_PULL_POLICY:-${PB_COMMON_IMAGE_PULL_POLICY}}"

# Directory to use for the fully built dashboard code.
export PB_DASHBOARD_DIR="${PB_DASHBOARD_DIR:-${PWD}/dashboard/build/}"

export KEYCLOAK_REALM=${KEYCLOAK_REALM:-"pbench-server"}
export KEYCLOAK_CLIENT=${KEYCLOAK_CLIENT:-"pbench-client"}

# Note:  the value of PB_HOST_IP will be used to generate the TLS certificate
# and so it (not `localhost`) must also be used to access the Pbench Server;
# otherwise, the TLS validation will fail due to a host mismatch.
if [[ -z "${PB_HOST_IP}" ]]; then
    host_ip_list=$(hostname -I)
    PB_HOST_IP=${host_ip_list%% *}
    export PB_HOST_IP
fi

host_name=${PB_HOST_NAME:-$(hostname --fqdn)}

# Set up TMP_DIR, if it's not already defined, to point to WORKSPACE_TMP, if it
# is defined (e.g., by the CI), or to `/var/tmp/pbench` as a fallback.
#
# Point SRV_PBENCH at a file tree in the temporary space which will be mapped
# into the Pbench Server container as /srv/pbench to provide all the storage for
# the Server and the Dashboard.
#
# Point PB_DEPLOY_FILES at a directory in the temporary space to hold the
# Pbench Server deployment files (e.g., config files).
TMP_DIR=${TMP_DIR:-${WORKSPACE_TMP:-/var/tmp/pbench}}
export SRV_PBENCH=${SRV_PBENCH:-${TMP_DIR}/srv/pbench}
export PB_DEPLOY_FILES=${PB_DEPLOY_FILES:-${TMP_DIR}/pbench_server_deployment}

#+
# Do setup
#-

# Copy the deployment files to the deployment files directory
pbiac_etc=server/pbenchinacan/etc
rm -rf ${PB_DEPLOY_FILES:?}/etc ${PB_DEPLOY_FILES}/pbench-server.cfg
mkdir -p -m 755 ${PB_DEPLOY_FILES}/etc
cp -r ${pbiac_etc}/rsyslog.d ${pbiac_etc}/rsyslog.conf ${PB_DEPLOY_FILES}/etc/
cp ${pbiac_etc}/pbench-server/pbench-server.cfg ${PB_DEPLOY_FILES}/

openssl req -batch -new -noenc -sha256 -days 365 -x509 -newkey rsa:2048 \
     -out ${TMP_DIR}/dependency.crt \
     -keyout ${TMP_DIR}/dependency.key \
     -subj "/C=US/ST=Massachusetts/L=Westford/O=Red Hat/OU=Performance & Scale/CN=localhost"

chmod 0644 ${TMP_DIR}/dependency.crt ${TMP_DIR}/dependency.key

# Customize the Pbench Server config file for canned operation
sed -Ei \
    -e "/^ *realhost/ s/=.*/= $(hostname -f)/" \
    -e "s/<keycloak_realm>/${KEYCLOAK_REALM}/" \
    -e "s/<keycloak_client>/${KEYCLOAK_CLIENT}/" \
    ${PB_DEPLOY_FILES}/pbench-server.cfg

# Set up the /srv/pbench file tree
podman unshare rm -rf ${SRV_PBENCH}/*
mkdir -p -m 0755  \
    ${SRV_PBENCH}/archive/fs-version-001 \
    ${SRV_PBENCH}/public_html/dashboard \
    ${SRV_PBENCH}/tmp \
    ${SRV_PBENCH}/cache

cp ${TMP_DIR}/dependency.crt ${TMP_DIR}/elastic.crt
cp ${TMP_DIR}/dependency.key ${TMP_DIR}/elastic.key

chmod 0644 ${TMP_DIR}/elastic.crt ${TMP_DIR}/elastic.key

cp ${TMP_DIR}/dependency.crt ${TMP_DIR}/postgres.crt
cp ${TMP_DIR}/dependency.key ${TMP_DIR}/postgres.key

chmod 0644 ${TMP_DIR}/postgres.crt
chmod 0640 ${TMP_DIR}/postgres.key
cat ${TMP_DIR}/postgres.crt ${TMP_DIR}/postgres.key > ${TMP_DIR}/postgres.pem

cp ${TMP_DIR}/dependency.crt ${TMP_DIR}/keycloak.crt
cp ${TMP_DIR}/dependency.key ${TMP_DIR}/keycloak.key

chmod 0644 ${TMP_DIR}/keycloak.crt
chmod 0640 ${TMP_DIR}/keycloak.key

# Set up the static fallback pages for Nginx.
#
# NOTE:  This is the first invocation of the Podman run command in this
#        deployment, so we apply the pull policy here; after this invocation (if
#        it doesn't fail...), the container image will be present in the local
#        repository, and so we use the default policy ("missing") for the other
#        invocations. (Otherwise, we risk pulling a remote image when we
#        shouldn't.)
podman run \
    --rm \
    --pull ${PB_SERVER_IMAGE_PULL_POLICY} \
    --volume ${SRV_PBENCH}:/srv/pbench:Z \
    --entrypoint cp \
    ${PB_SERVER_IMAGE} \
    /usr/share/nginx/html/404.html /usr/share/nginx/html/50x.html /srv/pbench/public_html/

# Ensure everything _under_ ${SRV_PBENCH} is owned by the "pbench" user INSIDE
# the container.  (We have to use bash in order to get the wildcard expansion
# _inside_ the container.)
podman run \
    --rm \
    --volume ${SRV_PBENCH}:/srv/pbench:Z \
    --entrypoint bash \
    ${PB_SERVER_IMAGE} \
    -c "chown -R pbench:pbench /srv/pbench/*"

# Create a private key and certificate, signed by our own, private CA, for the
# Pbench Server to use to provide SSL connections.  The certificate has to
# match the host that the container is running on, so we generate it on the fly
# and place it in the deployment files directory.
#
# We do this in the Pbench Server container so that we get a known version of
# openssl (the native one on the Jenkins executors appears to be ancient).
#
# Note that this command, if successful, dumps the status of the factorization
# search to stderr which produces a bunch of junk in the output; thus, we
# redirect stderr to stdout and then pipe it through sed to remove any complete
# lines consisting solely of any combination of periods, plus signs, asterisks,
# and hyphens.
podman run \
    --rm \
    --volume ${PB_DEPLOY_FILES}:/data:Z \
    --volume ${PWD}/${pbiac_etc}/pki/tls:/pki_tls:Z \
    --entrypoint /usr/bin/openssl \
    ${PB_SERVER_IMAGE} \
    req -batch -new -noenc -sha256 -days 365 -newkey rsa:2048 \
    -out /data/pbench-server.crt \
    -keyout /data/pbench-server.key \
    -subj "/C=US/ST=Massachusetts/L=Westford/O=Red Hat/OU=Performance & Scale/CN=${host_name}" \
    -CA /pki_tls/certs/pbench_CA.crt \
    -CAkey /pki_tls/private/pbench_CA.key \
    -addext "authorityKeyIdentifier = keyid,issuer" \
    -addext "basicConstraints=CA:FALSE" \
    -addext "keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment" \
    -addext "subjectAltName = IP.2:${PB_HOST_IP}" \
    2>&1 | sed -E -e '/^[.+*-]*$/ d'

#+
# Start the services which the Pbench Server depends upon and then start the
# Pbench Server itself.
#
# See NOTE above on the first Podman run invocation regarding pull policy.
#-
export PB_SERVER_IMAGE_PULL_POLICY=missing
server/pbenchinacan/deploy-dependencies
server/pbenchinacan/deploy
