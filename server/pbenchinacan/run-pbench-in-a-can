#!/bin/bash -e
# shellcheck disable=SC2086,2174

#
# Run a local containerized deployment of the Pbench Server, together with its
# dependencies.
#
# This script should be run from the root of the Git checkout.
#

# The default container registry to use with the organization name in that
# registry.  E.g., `quay.io/pbench`.  We export it (and the server image name)
# for the subordinate scripts to use.
export PB_CONTAINER_REG=${PB_CONTAINER_REG:-$(< ${HOME}/.config/pbench/ci_registry.name)}
server_image_name=${PB_SERVER_IMAGE_NAME:-"pbench-server"}
server_image_tag=${PB_SERVER_IMAGE_TAG:-"$(< jenkins/branch.name)"}
export PB_SERVER_IMAGE=${PB_CONTAINER_REG}/${server_image_name}:${server_image_tag}

# Default pull policy for all images is to pull the image if the registry has a
# *different* version (despite the name -- different is assumed to be "newer").
export PB_COMMON_IMAGE_PULL_POLICY=${PB_COMMON_IMAGE_PULL_POLICY:-"newer"}
export PB_SERVER_IMAGE_PULL_POLICY="${PB_SERVER_IMAGE_PULL_POLICY:-${PB_COMMON_IMAGE_PULL_POLICY}}"

# Directory to use for the fully built dashboard code.
export PB_DASHBOARD_DIR="${PB_DASHBOARD_DIR:-${PWD}/dashboard/build/}"

# Keycloak realm and client IDs to be used by the load_keycloak.sh script and
# the pbench-server.cfg file.
export KEYCLOAK_REALM=${KEYCLOAK_REALM:-"pbench-server"}
export KEYCLOAK_CLIENT=${KEYCLOAK_CLIENT:-"pbench-client"}
export KEYCLOAK_AUDIENCE=${KEYCLOAK_AUDIENCE:-"pbench-server"}

# Name or IP address to be used by the client to access the Pbench Server, to
# load the Dashboard, and to interface with the canned Keycloak server
host_name=${PB_HOST:-localhost}

# Set a value for the -addext "subjectAltName=..." option to the cert creation.
# Set the initial value "manually" and skip the "dummy" value to make the
# comma-separated concatenations work nicely.
#
# Notes about the use of `readarray`:  in order for the output array to be
# visible to the rest of the commands, the `readarray` command must not be
# executed in a subprocess, and therefore it cannot be on the receiving end
# of a pipe.  Instead we execute the `hostname` command in a "command
# expansion" inside a "here string".  Unfortunately, this causes a newline
# to be appended to the output, so that if we divide the result on spaces
# we end up with an extra array entry containing just a newline.  So, instead
# we translate the spaces into newlines ("squeezing" out any repeated
# delimiters) and use the `readarray` default delimiter which is the newline.
subj_alt_name="DNS.1:localhost"
readarray -t cert_hostnames <<< "$(echo "dummy $(hostname -A)" | tr -s ' ' '\n')"
for ((i=1; i < ${#cert_hostnames[*]}; i++)); do
  subj_alt_name+=", DNS.$((i+1)):${cert_hostnames[i]}"
done
readarray -t cert_ipaddrs <<< "$(echo "127.0.0.1 ::1 $(hostname -I)" | tr -s ' ' '\n')"
for ((i=0; i < ${#cert_ipaddrs[*]}; i++)); do
  subj_alt_name+=", IP.$((i+1)):${cert_ipaddrs[i]}"
done
echo "subjectAltName is <${subj_alt_name}>."

grep -q ${host_name} <<< ${subj_alt_name} \
  || echo "Warning: requested host name/addr (${host_name}) is not covered by the TLS cert." >&2

# Set up TMP_DIR, if it's not already defined, to point to WORKSPACE_TMP, if it
# is defined (e.g., by the CI), or to `/var/tmp/pbench` as a fallback.
#
# Point SRV_PBENCH at a file tree in the temporary space which will be mapped
# into the Pbench Server container as /srv/pbench to provide all the storage for
# the Server and the Dashboard.
#
# Point PB_DEPLOY_FILES at a directory in the temporary space to hold the
# Pbench Server deployment files (e.g., config files).
TMP_DIR=${TMP_DIR:-${WORKSPACE_TMP:-/var/tmp/pbench}}
export SRV_PBENCH=${SRV_PBENCH:-${TMP_DIR}/srv/pbench}
export PB_DEPLOY_FILES=${PB_DEPLOY_FILES:-${TMP_DIR}/pbench_server_deployment}

#+
# Do setup
#-

# Copy the deployment files to the deployment files directory
pbiac_etc=server/pbenchinacan/etc
rm -rf ${PB_DEPLOY_FILES:?}/etc ${PB_DEPLOY_FILES}/pbench-server.cfg
mkdir -p -m 755 ${PB_DEPLOY_FILES}/etc
cp -r ${pbiac_etc}/rsyslog.d ${pbiac_etc}/rsyslog.conf ${PB_DEPLOY_FILES}/etc/
cp ${pbiac_etc}/pbench-server/pbench-server.cfg ${PB_DEPLOY_FILES}/

# Customize the Pbench Server config file for canned operation
sed -Ei \
    -e "/^ *realhost/ s/=.*/= $(hostname -f)/" \
    -e "s|##KEYCLOAK_SERVER_URL##|https://${host_name}:8090|" \
    -e "s/##KEYCLOAK_REALM##/${KEYCLOAK_REALM}/" \
    -e "s/##KEYCLOAK_CLIENT##/${KEYCLOAK_CLIENT}/" \
    -e "s/##KEYCLOAK_AUDIENCE##/${KEYCLOAK_AUDIENCE}/" \
    -e "s/##ADMIN_NAMES##/${PB_ADMIN_NAMES}/" \
    ${PB_DEPLOY_FILES}/pbench-server.cfg

# Set up the /srv/pbench file tree
podman unshare rm -rf ${SRV_PBENCH}/*
mkdir -p -m 0755  \
    ${SRV_PBENCH}/archive/fs-version-001 \
    ${SRV_PBENCH}/backup \
    ${SRV_PBENCH}/cache \
    ${SRV_PBENCH}/nginx \
    ${SRV_PBENCH}/public_html/dashboard \
    ${SRV_PBENCH}/tmp

# Set up the static fallback pages for Nginx.
#
# NOTE:  This is the first invocation of the Podman run command in this
#        deployment, so we apply the pull policy here; after this invocation (if
#        it doesn't fail...), the container image will be present in the local
#        repository, and so we use the default policy ("missing") for the other
#        invocations. (Otherwise, we risk pulling a remote image when we
#        shouldn't.)
podman run \
    --rm \
    --pull ${PB_SERVER_IMAGE_PULL_POLICY} \
    --volume ${SRV_PBENCH}:/srv/pbench:Z \
    --entrypoint cp \
    ${PB_SERVER_IMAGE} \
    /usr/share/nginx/html/404.html /usr/share/nginx/html/50x.html /srv/pbench/public_html/

# Ensure everything _under_ ${SRV_PBENCH} is owned by the "pbench" user INSIDE
# the container.  (We have to use bash in order to get the wildcard expansion
# _inside_ the container.)
podman run \
    --rm \
    --volume ${SRV_PBENCH}:/srv/pbench:Z \
    --entrypoint bash \
    ${PB_SERVER_IMAGE} \
    -c "chown -R pbench:pbench /srv/pbench/*"

# Create a private key and certificate, signed by our own, private CA, for the
# Pbench Server to use to provide SSL connections.  The certificate has to
# match the host that the container is running on, so we generate it on the fly
# and place it in the deployment files directory.
#
# We do this in the Pbench Server container so that we get a known version of
# openssl (the native one on the Jenkins executors appears to be ancient).
#
# Note that this command, if successful, dumps the status of the factorization
# search to stderr which produces a bunch of junk in the output; thus, we
# redirect stderr to stdout and then pipe it through sed to remove any complete
# lines consisting solely of any combination of periods, plus signs, asterisks,
# and hyphens.
podman run \
    --rm \
    --volume ${PB_DEPLOY_FILES}:/data:Z \
    --volume ${PWD}/${pbiac_etc}/pki/tls:/pki_tls:Z \
    --entrypoint /usr/bin/openssl \
    ${PB_SERVER_IMAGE} \
    req -batch -new -noenc -sha256 -days 365 -newkey rsa:2048 \
    -out /data/pbench-server.crt \
    -keyout /data/pbench-server.key \
    -subj "/C=US/ST=Massachusetts/L=Westford/O=Red Hat/OU=Performance & Scale/CN=${host_name}" \
    -CA /pki_tls/certs/pbench_CA.crt \
    -CAkey /pki_tls/private/pbench_CA.key \
    -addext "authorityKeyIdentifier = keyid,issuer" \
    -addext "basicConstraints=CA:FALSE" \
    -addext "keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment" \
    -addext "subjectAltName = ${subj_alt_name}" \
    2>&1 | sed -E -e '/^[.+*-]*$/ d'

chmod 0640 ${PB_DEPLOY_FILES}/pbench-server.key
#+
# Start the services which the Pbench Server depends upon and then start the
# Pbench Server itself.
#
# See NOTE above on the first Podman run invocation regarding pull policy.
#-
export PB_SERVER_IMAGE_PULL_POLICY=missing
server/pbenchinacan/deploy-dependencies
server/pbenchinacan/deploy
