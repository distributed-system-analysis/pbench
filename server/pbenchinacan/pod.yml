#
# Pod Specification for a self-contained Pbench Server Environment.
#
# This configuration creates a pod for the Pbench Server deployment using
# four separate containers: the Pbench Server and its associated
# Elasticsearch instance, PostgreSQL database instance, and KeyCloak broker
# instance.
#
# The pod should be invoked via the following command
#
#    envsubst < server/pbenchinacan/pod.yml | podman play kube -
#
# with the following environment variables defined:
#
#  PB_POD_NAME - the name to be used for the pod
#  PB_CONTAINER_REG - the FQDN of the container registry
#  PB_ORG_NAME - the organization name of the image repository in the container
#                registry
#  PB_<name>_IMAGE_TAG - the tag container image
#  PB_<name>_IMAGE_NAME - the image name to use
#  PB_<name>_IMAGE_PULL_POLICY - pull policy to use
#      For each of the above, replace <name> with one of:
#          ELASTICSEARCH | KEYCLOAK | POSTGRESQL | SERVER
#  PB_DASHBOARD_DIR - the directory to mount into the pbench server container
#                     containing the dashboard code to use
#
# The resulting pod maps the following ports:
#
#   5432 - PostgreSQL
#   8080 - HTTP web server (and Pbench Dashboard)
#   8090 - keycloak authentication server
#   9200 - Elasticsearch
#
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: pbenchserverinacan
  name: ${PB_POD_NAME}
spec:
  hostname: "pbenchinacan"
  containers:
  - args:
    - eswrapper
    command:
    - /bin/tini
    - --
    - /usr/local/bin/docker-entrypoint.sh
    env:
    - name: PATH
      value: /usr/share/elasticsearch/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    - name: TERM
      value: xterm
    - name: container
      value: oci
    - name: ELASTIC_CONTAINER
      value: "true"
    - name: discovery.type
      value: "single-node"
    - name: xpack.security.enabled
      value: "false"
    image: ${PB_CONTAINER_REG}/${PB_ORG_NAME}/${PB_ELASTICSEARCH_IMAGE_NAME}:${PB_ELASTICSEARCH_IMAGE_TAG}
    imagePullPolicy: ${PB_ELASTICSEARCH_IMAGE_PULL_POLICY}
    name: elasticsearch
    ports:
      - containerPort: 9200
        hostPort: 9200
    resources: {}
    securityContext:
      allowPrivilegeEscalation: true
      capabilities: {}
      privileged: false
      readOnlyRootFilesystem: false
      seLinuxOptions: {}
      sysctls:
      - name: vm.max_map_count
        value: "262144"
    workingDir: /usr/share/elasticsearch
  - command:
    - /opt/keycloak/bin/kc.sh
    - start-dev
    - --http-port=8090
    - --health-enabled=true
    image: ${PB_CONTAINER_REG}/${PB_ORG_NAME}/${PB_KEYCLOAK_IMAGE_NAME}:${PB_KEYCLOAK_IMAGE_TAG}
    imagePullPolicy: ${PB_KEYCLOAK_IMAGE_PULL_POLICY}
    name: keycloak
    ports:
      - containerPort: 8090
        hostPort: 8090
    workingDir: /opt/keycloak
  - args:
    - run-postgresql
    command:
    - container-entrypoint
    env:
    - name: PATH
      value: /opt/app-root/src/bin:/opt/app-root/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    - name: TERM
      value: xterm
    - name: container
      value: oci
    - name: DESCRIPTION
      value: PostgreSQL is an advanced Object-Relational database management system
        (DBMS). The image contains the client and server programs that you'll need
        to create, run, maintain and access a PostgreSQL DBMS server.
    - name: STI_SCRIPTS_URL
      value: image:///usr/libexec/s2i
    - name: PGUSER
      value: postgres
    - name: PLATFORM
      value: el8
    - name: APP_DATA
      value: /opt/app-root
    - name: SUMMARY
      value: PostgreSQL is an advanced Object-Relational database management system
    - name: CONTAINER_SCRIPTS_PATH
      value: /usr/share/container-scripts/postgresql
    - name: ENABLED_COLLECTIONS
    - name: POSTGRESQL_VERSION
      value: "13"
    - name: APP_ROOT
      value: /opt/app-root
    - name: STI_SCRIPTS_PATH
      value: /usr/libexec/s2i
    - name: HOME
      value: /var/lib/pgsql
    - name: POSTGRESQL_USER
      value: pbenchcontainer
    - name: POSTGRESQL_PASSWORD
      value: pbench
    - name: POSTGRESQL_DATABASE
      value: pbenchcontainer
    image: ${PB_CONTAINER_REG}/${PB_ORG_NAME}/${PB_POSTGRESQL_IMAGE_NAME}:${PB_POSTGRESQL_IMAGE_TAG}
    imagePullPolicy: ${PB_POSTGRESQL_IMAGE_PULL_POLICY}
    name: postgresql
    ports:
      - containerPort: 5432
      - hostPort: 5432
    resources: {}
    securityContext:
      allowPrivilegeEscalation: true
      capabilities: {}
      privileged: false
      readOnlyRootFilesystem: false
      runAsGroup: 26
      runAsUser: 26
      seLinuxOptions: {}
    workingDir: /opt/app-root/src
  - command:
    - /sbin/init
    env:
    - name: PATH
      value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    - name: TERM
      value: xterm
    - name: container
      value: oci
    image: ${PB_CONTAINER_REG}/${PB_ORG_NAME}/${PB_SERVER_IMAGE_NAME}:${PB_SERVER_IMAGE_TAG}
    imagePullPolicy: ${PB_SERVER_IMAGE_PULL_POLICY}
    name: pbenchserver
    ports:
      - containerPort: 8080
        hostPort: 8080
    resources: {}
    securityContext:
      allowPrivilegeEscalation: true
      capabilities: {}
      privileged: false
      readOnlyRootFilesystem: false
      seLinuxOptions: {}
    volumeMounts:
    - mountPath: /srv/pbench/public_html/dashboard
      name: dashboard_deployment
    workingDir: /
  volumes:
  - name: dashboard_deployment
    hostPath:
      path: ${PB_DASHBOARD_DIR}
      type: DirectoryOrCreate
  dnsConfig: {}
  restartPolicy: Never
status: {}
